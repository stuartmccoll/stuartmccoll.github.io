<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Stuart McColl</title><link>https://stuartmccoll.github.io/posts/</link><description>Recent content in Posts on Stuart McColl</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 24 Jun 2023 11:30:00 +0100</lastBuildDate><atom:link href="https://stuartmccoll.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Use PowerShell to find deallocated Azure VMs</title><link>https://stuartmccoll.github.io/posts/2023-06-24-use-powershell-to-fund-deallocated-azure-vms/</link><pubDate>Sat, 24 Jun 2023 11:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-06-24-use-powershell-to-fund-deallocated-azure-vms/</guid><description>In this post, I&amp;rsquo;ll show you how to find deallocated Azure Virtual Machines using the Azure Resource Graph PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to find deallocated Azure Virtual Machines
using the Azure Resource Graph PowerShell module.</p>
<h2 id="install-the-azure-az-powershell-module">Install the Azure Az PowerShell module</h2>
<p>We&rsquo;re going to follow <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps">this guide on Microsoft Learn</a>
to install the Azure Az PowerShell module.</p>
<p>I&rsquo;m going to assume that you have the latest version of PowerShell installed.
If you don&rsquo;t, you can follow <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell">this guide on Microsoft Learn</a>.</p>
<p>Run the following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">Az</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-Repository</span> <span class="n">PsGallery</span> <span class="n">-Force</span>
</code></pre></div><p>You&rsquo;ll need to authenticate Azure PowerShell by signing in with your Azure
credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Connect-AzAccount</span>
</code></pre></div><h2 id="install-the-azure-resource-graph-powershell-module">Install the Azure Resource Graph PowerShell module</h2>
<p>We&rsquo;re going to follow <a href="https://learn.microsoft.com/en-us/azure/governance/resource-graph/first-query-powershell#add-the-resource-graph-module">this guide on Microsoft Learn</a>
to install the Azure Resource Graph PowerShell module.</p>
<p>Run the following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">Az</span><span class="p">.</span><span class="n">ResourceGraph</span>
</code></pre></div><h2 id="using-the-search-azgraph-cmdlet">Using the <code>Search-AzGraph</code> cmdlet</h2>
<p>Azure Virtual Machines that have been stopped will have a PowerState property
of &lsquo;deallocated&rsquo;. We can use this in an Azure Resource Graph query to find
any Azure Virtual Machines that have been stopped.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Search-AzGraph</span> <span class="n">-Query</span> <span class="s2">&#34;where type=~ &#39;Microsoft.Compute/VirtualMachines&#39; and properties.extended.instanceView.powerState.code == &#39;PowerState/deallocated&#39; | project name, location&#34;</span>
</code></pre></div><p>With this query, we&rsquo;re asking to retrieve any Azure resources that have a type
of <code>Microsoft.Compute/VirtualMachines</code> and where the
<code>properties.extended.instanceView.powerState.code</code> property is equal to
<code>PowerState/deallocated</code>. We&rsquo;re then asking only for the <code>name</code> and <code>location</code>
properties to be returned.</p>
<p>You should get a response like:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">name</span>        <span class="n">location</span>
<span class="p">----</span>        <span class="p">--------</span>
<span class="n">TestVM1</span>     <span class="n">eastus</span>
</code></pre></div><p>If you want more information to be returned about the resource, you can leave
out the <code>| project name, location</code> part of the query to return the default
dataset.</p>
<h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Search-AzGraph</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resourcegraph/search-azgraph">Microsoft Learn</a>.</p>
]]></content></item><item><title>My Microsoft Build 2023 takeaways</title><link>https://stuartmccoll.github.io/posts/2023-06-06-microsoft-build-2023-takeaways/</link><pubDate>Tue, 06 Jun 2023 22:15:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-06-06-microsoft-build-2023-takeaways/</guid><description>I&amp;rsquo;m slowly working my way through my backlog of Microsoft Build 2023 session recordings, but wanted to take some time out to summarise my key takeaways from this year&amp;rsquo;s event.
The common thread that ran throughout the event this year was artifical intelligence (AI), woven into sessions focused on what developers are building and how they&amp;rsquo;re building it, as well as sessions looking at the future of work and how this will be impacted by AI.</description><content type="html"><![CDATA[<p>I&rsquo;m slowly working my way through my backlog of <a href="https://build.microsoft.com/en-US">Microsoft Build 2023</a>
session recordings, but wanted to take some time out to summarise my key
takeaways from this year&rsquo;s event.</p>
<p>The common thread that ran throughout the event this year was artifical
intelligence (AI), woven into sessions focused on what developers are building
and how they&rsquo;re building it, as well as sessions looking at the future of work
and how this will be impacted by AI.</p>
<h2 id="copilot-everywhere">Copilot everywhere</h2>
<p>One of the biggest announcements from this year&rsquo;s event is that Copilot is
coming to Windows 11 (available in preview in June). Windows Copilot will
enable all Windows users to become &lsquo;power&rsquo; users, putting a personal
assistant capable of taking actions, configuring settings, summarising content,
connecting accross applications, and more, right at the heart of the Windows
experience.</p>
<p>Elsewhere, developers can now integrate applications and services with
Microsoft 365 Copilot with plugins.</p>
<p>I&rsquo;m excited to see how Windows Copilot can improve my daily workflows.</p>
<h2 id="windows-terminal-is-getting-smarter">Windows Terminal is getting smarter</h2>
<p>Another application, another copilot. This time, GitHub Copilot X is coming
to Windows Terminal. Users <em>&ldquo;will be able to take advantage of natural
language AI both inline and in an experimental chat experience to recommend
commands, explain errors and take actions&rdquo;</em>.</p>
<p>I can see this being a huge time-saver. Error returned by a build script? Don&rsquo;t
switch context to Edge in order to search for the error, simply ask Copilot
what it means and get back an explanation, as well as a resolution, all right
there in the terminal.</p>
<h2 id="a-new-dashboard-for-windows-developers">A new dashboard for Windows developers</h2>
<p>Dev Home is an open-source, centralised place to configure a development
environment (not only a local machine, but also remote environments like
Dev Box or GitHub Codespaces), monitor system performance, and manage projects.</p>
<p>System performance can be monitored using a customisable dashboard, which is
extensible using widgets built using the Windows widget platform. Dev Home can
be customised using extensions, one of which will be installed by default; the
Dev Home GitHub Extension. Extensions can provide widgets for use on the
Dev Home dashboard.</p>
<p>Reducing the time from new machine to local development environment can only be
a good thing. It&rsquo;ll be interesting to see whether Dev Home does gain any
traction as being the central hub for all things development on Windows
devices.</p>
<h2 id="dev-drive-delivers-performance-improvements">Dev Drive delivers performance improvements</h2>
<p>The introduction of Dev Drive promises to deliver <em>&ldquo;performance, security and
control&rdquo;</em>, bringing a new type of storage volume to Windows optimised
specifically for typical developer workloads.</p>
<p>With an up to 30% improvement on overall build times, and performance
improvements to other operations, such as cloning repositories, Dev Drive will
bring important performance gains with minimal configuration required.</p>
<h2 id="more-ai-training-and-development-comes-to-microsoft-learn">More AI training and development comes to Microsoft Learn</h2>
<p>Additional training and documentation is being launched on Microsoft Learn,
to help people leverage the power of AI, through instructor-led training,
self-paced learning paths, cloud games, and more.</p>
<p>These newly-launched offerings cover a breadth of products, including Azure
OpenAI Service, Power Apps, Power Virtual Agents, and GitHub Copilot.</p>
<h2 id="further-reading">Further reading</h2>
<p>Check out the <a href="https://news.microsoft.com/build-2023-book-of-news/">Microsoft Build 2023 Book of News</a>
for a summary of news from the event.</p>
<p>Read more about Dev Home at <a href="https://blogs.windows.com/windowsdeveloper/2023/05/30/introducing-dev-home/">Windows Blogs</a>.</p>
<p>Further information on setting up Dev Home can be found on <a href="https://learn.microsoft.com/en-us/windows/dev-home/">Microsoft Learn</a>.</p>
<p>Read more about Dev Drive at <a href="https://blogs.windows.com/windowsdeveloper/2023/06/01/dev-drive-performance-security-and-control-for-developers/">Windows Blogs</a>.</p>
<p>Further information on setting up Dev Drive can be found on <a href="https://learn.microsoft.com/en-us/windows/dev-drive/">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use PowerShell to monitor system performance</title><link>https://stuartmccoll.github.io/posts/2023-05-01-use-powershell-to-monitor-system-performance/</link><pubDate>Mon, 01 May 2023 11:15:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-05-01-use-powershell-to-monitor-system-performance/</guid><description>In this post, I&amp;rsquo;ll show you how to monitor system performance using PowerShell. I&amp;rsquo;ll introduce you to a few different cmdlets and some examples of how you might use them to monitor the performance of a system.
Get-Process This cmdlet provides information about all of the running processes on a system, including their process ID, their CPU usages, and their memory usage.
You might use this cmdlet to:
Get the five processes using the most CPU: Get-Process | Sort-Object -Property CPU | Select-Object Name,CPU -Last 5.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to monitor system performance using PowerShell.
I&rsquo;ll introduce you to a few different cmdlets and some examples of how you
might use them to monitor the performance of a system.</p>
<h2 id="get-process"><code>Get-Process</code></h2>
<p>This cmdlet provides information about all of the running processes on a
system, including their process ID, their CPU usages, and their memory usage.</p>
<p>You might use this cmdlet to:</p>
<ul>
<li>Get the five processes using the most CPU:
<code>Get-Process | Sort-Object -Property CPU | Select-Object Name,CPU -Last 5</code>.</li>
<li>Get the five processes using the most memory:
<code>Get-Process | Sort-Object -Property WorkingSet | Select-Object Name,WorkingSet -Last 5</code></li>
<li>Get the total CPU time of a specific process:
<code>(Get-Process -Name msedge).TotalProcessorTime</code></li>
</ul>
<h2 id="get-counter"><code>Get-Counter</code></h2>
<p>This cmdlet provides information about system performance counters, such as
CPU, memory, and disk usage.</p>
<p>You might use this cmdlet to:</p>
<ul>
<li>Check free space on a drive:
<code>(Get-Counter '\LogicalDisk(C:)\% Free Megabytes').CounterSamples.CookedValue/1024</code></li>
<li>Check the amount of available memory: <code>Get-Counter '\Memory\Available MBytes'</code></li>
<li>Check network traffic: <code>Get-Counter '\Network Interface(*)\Bytes Total/sec'</code></li>
</ul>
<h2 id="get-wmiobject"><code>Get-WmiObject</code></h2>
<p>This cmdlet provides access to the Windows Management Instrumentation (WMI)
database, which contains information about system resources.</p>
<p>You might use this cmdlet to:</p>
<ul>
<li>Check system uptime:
<code>Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property LastBootUpTime | ForEach-Object {[System.Management.ManagementDateTimeConverter]::ToDateTime($_.LastBootUpTime)} | Select-Object -ExpandProperty DateTime</code></li>
<li>Check system battery status:
<code>Get-WmiObject -Class Win32_Battery | Select-Object -Property BatteryStatus,EstimatedChargeRemaining</code></li>
<li>Check system fan speeds:
<code>Get-WmiObject -Namespace &quot;root\cimv2&quot; -Class &quot;Win32_Fan&quot; | Select-Object -Property DeviceID, CurrentSpeed</code></li>
</ul>
<h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-Process</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process">Microsoft Learn</a>.</p>
<p>Further information on the <code>Get-Counter</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-counter">Microsoft Learn</a>.</p>
<p>Further information on the <code>Get-WmiObject</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use Bicep to create an Azure key vault</title><link>https://stuartmccoll.github.io/posts/2023-04-23-use-bicep-to-create-a-key-vault/</link><pubDate>Sun, 23 Apr 2023 22:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-23-use-bicep-to-create-a-key-vault/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares an Azure key vault resource containing a single secret.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .bicep file I create.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to create a
<a href="https://github.com/Azure/bicep">Bicep</a> file which declares an Azure key vault
resource containing a single secret.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>I&rsquo;ll be using <a href="https://code.visualstudio.com/">Visual Studio Code</a> as my
editor, where I&rsquo;ll be writing the <code>.bicep</code> file for this walkthrough. I&rsquo;ll also
be using the official <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-bicep">Bicep extension</a>.</p>
<p>I&rsquo;ll be using the
<a href="https://learn.microsoft.com/en-us/powershell/azure/?view=azps-9.5.0">Azure Az PowerShell module</a>
to handle deploying the resources declared in the <code>.bicep</code> file I create. You
can find instructions on <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-9.5.0">installing the module</a>
at Microsoft Learn.</p>
<p>You&rsquo;ll need to install <a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/">Azure Bicep</a>
if you haven&rsquo;t already.</p>
<p>The rest of this post assumes that you&rsquo;ve already authenticated the Azure Az
PowerShell module with an Azure account.</p>
<h2 id="creating-an-azure-resource-group">Creating an Azure resource group</h2>
<p>Before we begin writing our Bicep code, we&rsquo;ll create an Azure resource group
using the Azure Az PowerShell module. Run the following command in a PowerShell
session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroup</span> <span class="n">-Name</span> <span class="n">rgKeyVaultDemo</span> <span class="n">-Location</span> <span class="n">uksouth</span>
</code></pre></div><p>You&rsquo;ll get a response back similar to the following (where <code>&lt;subscription_id&gt;</code>
contains your own Azure subscription identifier):</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">ResourceGroupName</span> <span class="err">:</span> <span class="n">rgKeyVaultDemo</span>
<span class="n">Location</span>          <span class="err">:</span> <span class="n">uksouth</span>
<span class="n">ProvisioningState</span> <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Tags</span>              <span class="err">:</span>
<span class="n">ResourceId</span>        <span class="err">:</span> <span class="p">/</span><span class="n">subscriptions</span><span class="p">/&lt;</span><span class="n">subscription_id</span><span class="p">&gt;/</span><span class="n">resourceGroups</span><span class="p">/</span><span class="n">rgKeyVaultDemo</span>
</code></pre></div><h2 id="creating-the-bicep-file">Creating the <code>.bicep</code> file</h2>
<p>Create a new file called <code>Create-KeyVault.bicep</code>. In this file, we&rsquo;ll
be declaring two different Azure resources:</p>
<ul>
<li>the key vault itself.</li>
<li>a single secret to be stored within the key vault.</li>
</ul>
<p>We&rsquo;ll be passing two mandatory parameters when deploying the resources declared
in this file; the name of the key vault to be created; and the name of the
secret to be created.</p>
<pre><code class="language-bicep" data-lang="bicep">@description('The name of the key vault to be created')
param keyVaultName string

@description('The name of the key vault secret to be created')
param secretName string
</code></pre><p>We&rsquo;ll also be passing another parameter when deploying the resources declared
in this file - the Azure region that we want to deploy to, which we&rsquo;ll give
a parameter name of <code>location</code>. If not passed, this will default to the
location of the associated Azure resource group.</p>
<pre><code class="language-bicep" data-lang="bicep">@description('Location for all resources')
param location string = resourceGroup.location()
</code></pre><h3 id="declaring-the-key-vault">Declaring the key vault</h3>
<p>You can find information on all of the available properties within the
<a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.keyvault/vaults?pivots=deployment-language-bicep">Microsoft Learn documentation for the Microsoft.KeyVault/vaults resource type</a>.</p>
<p>When declaring this resource, the properties we&rsquo;re setting are as follows:</p>
<ul>
<li><code>name</code> - the name of the resource.</li>
<li><code>location</code> - the Azure region where the resource will be deployed.</li>
<li><code>accessPolicies</code> - an array of identities that have access to the key vault.</li>
<li><code>enableRbacAuthorization</code> - controls how data actions are authorised.</li>
<li><code>enableSoftDelete</code> - specifies whether &lsquo;soft delete&rsquo; functionality is
enabled.</li>
<li><code>enabledForDeployment</code> - specifies whether Azure Virtual Machines are
permitted to retrieve certificates stored as secrets from the key vault.</li>
<li><code>enabledForDiskEncryption</code> - specifies whether Azure Disk Encryption
is permitted to retrieve secrets from the vault and unwrap keys.</li>
<li><code>enabledForTemplateDeployment</code> - specifies whether Azure Resource
Manager is permitted to retrieve secrets from the key vault.</li>
<li><code>sku</code> - the name of the SKU; <code>standard</code> is effectively &lsquo;pay per use&rsquo;.</li>
<li><code>softDeleteRetentionInDays</code> the number of days to retain data after
soft deletion.</li>
<li><code>tenantId</code> - the Azure Active Directory tenant identifier that should
be used for authenticating requests to the key vault.</li>
</ul>
<pre><code class="language-bicep" data-lang="bicep">resource vault 'Microsoft.KeyVault/vaults@2023-02-01' = {
  name: keyVaultName
  location: location
  properties: {
    accessPolicies: []
    enableRbacAuthorization: false
    enableSoftDelete: true
    enabledForDeployment: false
    enabledForDiskEncryption: false
    enabledForTemplateDeployment: false
    softDeleteRetentionInDays: 7
    sku: {
      family: 'A'
      name: 'standard'
    }
    tenantId: subscription().tenantId
  }
}
</code></pre><h3 id="declaring-the-secret">Declaring the secret</h3>
<p>You can find information on all of the available properties within the
<a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.keyvault/vaults/secrets?pivots=deployment-language-bicep">Microsoft Learn documentation for the Microsoft.KeyVault/vaults/secrets resource type</a>.</p>
<p>When declaring this resource, the properties we&rsquo;re setting are as follows:</p>
<ul>
<li><code>name</code> - the name of the resource</li>
<li><code>parent</code> - the key vault that this secret will belong to.</li>
<li><code>value</code> - the value of the secret.</li>
</ul>
<pre><code class="language-bicep" data-lang="bicep">resource secret 'Microsoft.KeyVault/vaults/secrets@2023-02-01' = {
  name: secretName
  parent: vault
  properties: {
    value: 'TestValue'
  }
}
</code></pre><h2 id="deploying-the-resources-declared-in-the-bicep-file">Deploying the resources declared in the <code>.bicep</code> file</h2>
<p>To deploy the resources declared in our .<code>bicep</code> file, run the following
command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">rgKeyVaultDemo</span> <span class="n">-TemplateFile</span> <span class="p">./</span><span class="nb">Create-KeyVault</span><span class="p">.</span><span class="n">bicep</span> <span class="n">-keyVaultName</span> <span class="p">&lt;</span><span class="n">UNIQUE_VALUE</span><span class="p">&gt;</span> <span class="n">-secretName</span> <span class="n">TestSecret</span>
</code></pre></div><p>You should receive a similar response to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">DeploymentName</span>          <span class="err">:</span> <span class="nb">Create-KeyVault</span>
<span class="n">ResourceGroupName</span>       <span class="err">:</span> <span class="n">rgTestKeyVault</span>
<span class="n">ProvisioningState</span>       <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Timestamp</span>               <span class="err">:</span> <span class="n">23</span><span class="p">/</span><span class="n">04</span><span class="p">/</span><span class="n">2023</span> <span class="n">20</span><span class="err">:</span><span class="n">57</span><span class="err">:</span><span class="n">48</span>
<span class="n">Mode</span>                    <span class="err">:</span> <span class="n">Incremental</span>
<span class="n">TemplateLink</span>            <span class="err">:</span>
<span class="n">Parameters</span>              <span class="err">:</span>
                          <span class="n">Name</span>             <span class="nb">Type </span>                      <span class="n">Value</span>
                          <span class="p">===============</span>  <span class="p">=========================</span>  <span class="p">==========</span>
                          <span class="n">keyVaultName</span>     <span class="n">String</span>                     <span class="s2">&#34;TestKeyVault&#34;</span>
                          <span class="n">secretName</span>       <span class="n">String</span>                     <span class="s2">&#34;TestSecret&#34;</span>
                          <span class="n">location</span>         <span class="n">String</span>                     <span class="s2">&#34;uksouth&#34;</span>
                          <span class="n">sku</span>              <span class="n">String</span>                     <span class="s2">&#34;standard&#34;</span>

<span class="n">Outputs</span>                 <span class="err">:</span>
<span class="n">DeploymentDebugLogLevel</span> <span class="err">:</span>
</code></pre></div><p>You can validate that the deployment has been successful by running the
following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResource</span> <span class="n">-ResourceGroupName</span> <span class="n">rgKeyVaultDemo</span>
</code></pre></div><h2 id="removing-resources">Removing resources</h2>
<p>Finally, let&rsquo;s remove the resources created. Run the following command in a
PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Remove-AzResourceGroup</span> <span class="n">-Name</span> <span class="n">rgKeyVaultDemo</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>If you&rsquo;re interested in exploring Bicep further, you may be interested in the
<a href="https://learn.microsoft.com/en-gb/training/paths/fundamentals-bicep/">Fundamentals of Bicep</a>
learning path at Microsoft Learn.</p>
]]></content></item><item><title>Use GitHub Actions to validate Bicep files</title><link>https://stuartmccoll.github.io/posts/2023-04-22-use-github-actions-to-validate-bicep-files/</link><pubDate>Sat, 22 Apr 2023 11:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-22-use-github-actions-to-validate-bicep-files/</guid><description>In this post, I&amp;rsquo;ll show you how to validate Bicep files using GitHub Actions.
What is GitHub Actions? GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform built into GitHub. It allows for the automation of build, test, and deployment pipelines.
It can also be used for running workflows based on other repository events, like automatically responding to created issues.
The structure of a GitHub Actions workflow GitHub Actions workflows are made up of three things.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to validate Bicep files using GitHub Actions.</p>
<h2 id="what-is-github-actions">What is GitHub Actions?</h2>
<p>GitHub Actions is a continuous integration and continuous delivery (CI/CD)
platform built into GitHub. It allows for the automation of build, test, and
deployment pipelines.</p>
<p>It can also be used for running workflows based on other repository events,
like automatically responding to created issues.</p>
<h2 id="the-structure-of-a-github-actions-workflow">The structure of a GitHub Actions workflow</h2>
<p>GitHub Actions workflows are made up of three things.</p>
<h3 id="an-event-trigger">An event trigger</h3>
<p>A GitHub Actions workflow can be configured to trigger based on an event
occuring in a GitHub repository, such as a pull request being opened, or
a branch being deleted.</p>
<h3 id="a-job">A job</h3>
<p>A GitHub Actions workflow can contain one or more jobs. These can be run
sequentially, or in parallel.</p>
<p>Each job will run inside its own virtual machine runner, or inside a
container.</p>
<h3 id="steps-within-a-job">Steps within a job</h3>
<p>Each job has one or more steps. A step might be a script that you define,
or an action; a reusable extension.</p>
<p>Steps are executed in order, and on the same runner, meaning that you can
share data from one step to another.</p>
<h2 id="a-github-actions-workflow-for-validating-bicep-files">A GitHub Actions workflow for validating Bicep files</h2>
<p>This example GitHub Actions workflow assumes that you want to validate
Bicep files when a pull request is raised against your repository. It also
assumes that the Bicep files that you wish to validate are contained within
the <code>.azure/bicep/</code> directory.</p>
<p>You should create a <code>.github</code> directory in the root of your repository. In
this directory, you should create another directory, this time named
<code>workflows</code>. Within here, create a new file named <code>bicep.yml</code>.</p>
<p>First, we have to define a name for the GitHub Actions workflow.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Validate Bicep files</span><span class="w">
</span></code></pre></div><p>Next, we have to define the repository event that will trigger the GitHub
Actions workflow.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="l">pull_request</span><span class="w">
</span></code></pre></div><p>Finally, we have to define the job itself, and the steps that make up the job.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">validate</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">az bicep build --file .azure/bicep/*.bicep</span><span class="w">
</span></code></pre></div><ul>
<li>We&rsquo;re definining a single job, named <code>validate</code>.</li>
<li>We&rsquo;re declaring that this job will run on the latest version of Ubuntu
(<code>runs-on: ubuntu-latest</code>).</li>
<li>We&rsquo;re declaring two steps. In the first step, we&rsquo;re reusing the <code>checkout</code>
action available on GitHub Marketplace. This allows our GitHub Actions
workflow to checkout our repository. In the second step, we&rsquo;re running an
Azure CLI command to build any files with a <code>.bicep</code> file extension within
the <code>.azure/bicep</code> directory. If any of these files fail to build, our
GitHub Actions workflow will report a failure, otherwise it will succeed.</li>
</ul>
<p>Altogether, our <code>.github/workflows/bicep.yml</code> file looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Validate Bicep files</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="l">pull_request</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">validate</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">az bicep build --file .azure/bicep/*.bicep</span><span class="w">
</span></code></pre></div><p>Once merged into the repository, any future pull requests raised will trigger
this GitHub Actions workflow to be run.</p>
<h2 id="further-reading">Further reading</h2>
<p>Further information on GitHub Actions can be found at
<a href="https://docs.github.com/en/actions/learn-github-actions/">GitHub Docs</a>.</p>
]]></content></item><item><title>Use PowerShell to find empty files</title><link>https://stuartmccoll.github.io/posts/2023-04-15-use-powershell-to-find-empty-files/</link><pubDate>Sat, 15 Apr 2023 09:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-15-use-powershell-to-find-empty-files/</guid><description>In this post, I&amp;rsquo;ll show you how to find empty files using PowerShell.
Find empty files in the current working directory The following command will retrieve empty files within the current working directory (e.g., it won&amp;rsquo;t recursively search within inner directories). It&amp;rsquo;ll return the full file path to any empty files that it finds.
Get-ChildItem -File | Where-Object { $_.PSIsContainer -eq $false -and $_.Length -eq 0 } | Select -ExpandProperty FullName We&amp;rsquo;re using the Get-ChildItem cmdlet here to retrieve a list of all files within the current working directory.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to find empty files using PowerShell.</p>
<h2 id="find-empty-files-in-the-current-working-directory">Find empty files in the current working directory</h2>
<p>The following command will retrieve empty files within the current working
directory (e.g., it won&rsquo;t recursively search within inner directories).
It&rsquo;ll return the full file path to any empty files that it finds.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-ChildItem</span> <span class="o">-File</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="n">PSIsContainer</span> <span class="o">-eq</span> <span class="nv">$false</span> <span class="o">-and</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Length</span> <span class="o">-eq</span> <span class="n">0</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">FullName</span>
</code></pre></div><p>We&rsquo;re using the <code>Get-ChildItem</code> cmdlet here to retrieve a list of all files
within the current working directory. We&rsquo;re then utilising the <code>Where-Object</code>
cmdlet to filter this list to return <em>only</em> files
(<code>$_.PSIsContainer -eq $false</code>) and <em>only</em> files with no length
(<code>-and $_.Length -eq 0</code>).</p>
<p>The final part of the command (<code>Select -ExpandProperty FullName</code>) returns
the full path to any empy files found.</p>
<h2 id="find-empty-files-beneath-the-current-working-directory">Find empty files beneath the current working directory</h2>
<p>We can expand our search to recursively search within <em>all</em> directories within
the current working directory by adding a single flag to the command -
<code>-Recurse</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-ChildItem</span> <span class="o">-File</span> <span class="n">-Recurse</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="n">PSIsContainer</span> <span class="o">-eq</span> <span class="nv">$false</span> <span class="o">-and</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Length</span> <span class="o">-eq</span> <span class="n">0</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">FullName</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-ChildItem</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem">Microsoft Learn</a>.</p>
<p>Further information on the <code>Where-Object</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.3">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use PowerShell to find large files</title><link>https://stuartmccoll.github.io/posts/2023-04-07-use-powershell-to-find-large-files/</link><pubDate>Fri, 07 Apr 2023 12:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-07-use-powershell-to-find-large-files/</guid><description>In this post, I&amp;rsquo;ll show you how to find large files using PowerShell.
Using the Get-ChildItem cmdlet Searching for files based on different properties can all be done using PowerShell&amp;rsquo;s built-in Get-ChildItem cmdlet.
Find the largest files within the current working directory The following command will retrieve the ten largest files within the current working directory (e.g., it won&amp;rsquo;t recursively search within inner directories). It&amp;rsquo;ll sort these ten results in descending size order, returning the file names and the file size.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to find large files using PowerShell.</p>
<h2 id="using-the-get-childitem-cmdlet">Using the <code>Get-ChildItem</code> cmdlet</h2>
<p>Searching for files based on different properties can all be done using
PowerShell&rsquo;s built-in <code>Get-ChildItem</code> cmdlet.</p>
<h3 id="find-the-largest-files-within-the-current-working-directory">Find the largest files within the current working directory</h3>
<p>The following command will retrieve the ten largest files within the current
working directory (e.g., it won&rsquo;t recursively search within inner directories).
It&rsquo;ll sort these ten results in descending size order, returning the file names
and the file size.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-ChildItem</span> <span class="o">-File</span> <span class="p">|</span> <span class="nb">Sort </span><span class="n">-Descending</span> <span class="n">-Property</span> <span class="n">Length</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-First</span> <span class="n">10</span> <span class="n">Name</span><span class="p">,</span> <span class="n">Length</span>
</code></pre></div><p>When running the above command, you&rsquo;ll receive a response that looks like the
output below.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Name</span>          <span class="n">Length</span>
<span class="p">----</span>          <span class="p">------</span>
<span class="n">FirstFile</span>       <span class="n">2790</span>
<span class="n">SecondFile</span>      <span class="n">213</span>
<span class="n">ThirdFile</span>       <span class="n">182</span>
<span class="p">...</span>
</code></pre></div><h3 id="find-the-largest-files-beneath-the-current-working-directory">Find the largest files beneath the current working directory</h3>
<p>We can expand our search to recursively search within <em>all</em> directories within
the current working directory by adding a single flag to the command -
<code>-Recurse</code>.</p>
<p>The following command will retrieve the ten largest files beneath the current
working directory (e.g., it won&rsquo;t just find files inside the current working
directory, but will continue to search within inner directories). It&rsquo;ll sort
these ten results in descending size order, returning the file names and the
file size.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-ChildItem</span> <span class="n">-Recurse</span> <span class="o">-File</span> <span class="p">|</span> <span class="nb">Sort </span><span class="n">-Descending</span> <span class="n">-Property</span> <span class="n">Length</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-First</span> <span class="n">10</span> <span class="n">Name</span><span class="p">,</span> <span class="n">Length</span>
</code></pre></div><h3 id="find-the-largest-file-within-a-user-profile">Find the largest file within a user profile</h3>
<p>Perhaps you&rsquo;re only interested in finding the largest file within a given user
profile. This is easily done by passing the <code>$env:USERPROFILE</code> value to
<code>Get-ChildItem</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-ChildItem</span> <span class="nv">$env:USERPROFILE</span> <span class="n">-Recurse</span> <span class="o">-File</span> <span class="p">|</span> <span class="nb">Sort </span><span class="n">-Descending</span> <span class="n">-Property</span> <span class="n">Length</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-First</span> <span class="n">1</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-ChildItem</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use Bicep to create an Application Insights resource</title><link>https://stuartmccoll.github.io/posts/2023-04-01-use-bicep-to-create-an-application-insights-resource/</link><pubDate>Sat, 01 Apr 2023 21:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-01-use-bicep-to-create-an-application-insights-resource/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares the resources required for an Application Insights instance, specifically one used to monitor a website.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to create a
<a href="https://github.com/Azure/bicep">Bicep</a> file which declares the resources
required for an Application Insights instance, specifically one used to
monitor a website.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>I&rsquo;ll be using <a href="https://code.visualstudio.com/">Visual Studio Code</a> as my
editor, where I&rsquo;ll be writing the <code>.bicep</code> file for this walkthrough. I&rsquo;ll also
be using the official <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-bicep">Bicep extension</a>.</p>
<p>I&rsquo;ll be using the
<a href="https://learn.microsoft.com/en-us/powershell/azure/?view=azps-9.5.0">Azure Az PowerShell module</a>
to handle deploying the resources declared in the <code>.bicep</code> file I create. You
can find instructions on <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-9.5.0">installing the module</a>
at Microsoft Learn.</p>
<p>You&rsquo;ll need to install <a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/">Azure Bicep</a>
if you haven&rsquo;t already.</p>
<p>The rest of this post assumes that you&rsquo;ve already authenticated the Azure Az
PowerShell module with an Azure account.</p>
<h2 id="creating-an-azure-resource-group">Creating an Azure resource group</h2>
<p>Before we begin writing our Bicep code, we&rsquo;ll create an Azure resource group
using the Azure Az PowerShell module. Run the following command in a PowerShell
session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroup</span> <span class="n">-Name</span> <span class="n">rgApplicationInsightsDemo</span> <span class="n">-Location</span> <span class="n">uksouth</span>
</code></pre></div><p>You&rsquo;ll get a response back similar to the following (where <code>&lt;subscription_id&gt;</code>
contains your own Azure subscription identifier):</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">ResourceGroupName</span> <span class="err">:</span> <span class="n">rgApplicationInsightsDemo</span>
<span class="n">Location</span>          <span class="err">:</span> <span class="n">uksouth</span>
<span class="n">ProvisioningState</span> <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Tags</span>              <span class="err">:</span>
<span class="n">ResourceId</span>        <span class="err">:</span> <span class="p">/</span><span class="n">subscriptions</span><span class="p">/&lt;</span><span class="n">subscription_id</span><span class="p">&gt;/</span><span class="n">resourceGroups</span><span class="p">/</span><span class="n">rgApplicationInsightsDemo</span>
</code></pre></div><h2 id="creating-the-bicep-file">Creating the <code>.bicep</code> file</h2>
<p>Create a new file called <code>Create-ApplicationInsights.bicep</code>. In this file, we&rsquo;ll
be declaring two different Azure resources:</p>
<ul>
<li>an Application Insights resource</li>
<li>a Log Analytics workspace - this isn&rsquo;t <em>strictly</em> necessary; without it, you
can create an Application Insights with the &lsquo;Classic&rsquo; Resource Mode. However, this mode has been deprecated in favour of using a Log Analytics workspace.</li>
</ul>
<p>We&rsquo;ll be passing a single parameter when deploying the resources declared in
this file - the Azure region that we want to deploy to, which
we&rsquo;ll give a parameter name of <code>location</code>. If not passed, this will default
to the location of the associated Azure resource group:</p>
<pre><code class="language-bicep" data-lang="bicep">@description('Location for all resources')
param location string = resourceGroup.location()
</code></pre><h3 id="declaring-the-log-analytics-workspace">Declaring the Log Analytics workspace</h3>
<p>You can find information on all of the available properties within the
<a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.operationalinsights/workspaces?pivots=deployment-language-bicep">Microsoft Learn documentation for the Microsoft.OperationInsights/workspaces resource type</a>.</p>
<p>When declaring this resource, the properties we&rsquo;re setting are as follows:</p>
<ul>
<li><code>name</code> - the name of the resource.</li>
<li><code>location</code> - the Azure region where the resource will be deployed.</li>
<li><code>sku</code> - the name of the SKU; <code>PerGB2018</code> is effectively &lsquo;pay per use&rsquo;.</li>
<li><code>retentionInDays</code> - the number of days to retain workspace data.</li>
</ul>
<pre><code class="language-bicep" data-lang="bicep">resource workspace 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: 'logWebsiteApplicationInsightsWorkspace'
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: 30
  }
}
</code></pre><h3 id="declaring-the-azure-application-insights-resource">Declaring the Azure Application Insights resource</h3>
<p>You can find information on all of the available properties within the
<a href="https://learn.microsoft.com/en-us/azure/templates/microsoft.insights/components?pivots=deployment-language-bicep">Microsoft Learn documentation for the Microsoft.Insights/components resource type</a>.</p>
<p>When declaring this resource, the properties we&rsquo;re setting are as follows:</p>
<ul>
<li><code>name</code> - the name of the resource.</li>
<li><code>location</code> - the Azure region where the resource will be deployed.</li>
<li><code>kind</code> - the kind of application that the resource refers to. In this example
we&rsquo;re monitoring a website, so we&rsquo;re using <code>web</code>.</li>
<li><code>Application_Type</code> - the type of application being monitored. Again, we&rsquo;re
using <code>web</code>.</li>
<li><code>Flow_Type</code> - the documentation specifies that this is to be set as
<code>Bluefield</code> when creating resources via the REST API.</li>
<li><code>Ingestion_Mode</code> - the flow of the ingestion; we&rsquo;re delivering to a Log
Analytics workspace, so our value is <code>LogAnalytics</code>.</li>
<li><code>publicNetworkAccessForIngestion</code> - the network access type for accessing
Application Insights ingestion.</li>
<li><code>publicNetworkAccessForQuery</code> - the network access type for accessing
Application Insights query.</li>
<li><code>Request_Source</code> - the documentation specifies that this is to be set as
<code>rest</code> when creating resources via the REST API.</li>
<li><code>RetentionInDays</code> - the retention period in days.</li>
<li><code>WorkspaceResourceId</code> - the resource identifier of the Log Analytics
workspace that data will be ingested to.</li>
</ul>
<pre><code class="language-bicep" data-lang="bicep">resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: 'appiWebsite'
  kind: 'web'
  location: location
  properties: {
    Application_Type: 'web'
    Flow_Type: 'Bluefield'
    IngestionMode: 'LogAnalytics'
    publicNetworkAccessForIngestion: 'Enabled'
    publicNetworkAccessForQuery: 'Enabled'
    Request_Source: 'rest'
    RetentionInDays: 90
    WorkspaceResourceId: workspace.id
  }
}
</code></pre><h2 id="deploying-the-resources-declared-in-the-bicep-file">Deploying the resources declared in the <code>.bicep</code> file</h2>
<p>To deploy the resources declared in our .<code>bicep</code> file, run the following
command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">rgApplicationInsightsDemo</span> <span class="n">-TemplateFile</span> <span class="p">./</span><span class="nb">Create-ApplicationInsights</span><span class="p">.</span><span class="n">bicep</span>
</code></pre></div><p>You should receive a similar response to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">DeploymentName</span>          <span class="err">:</span> <span class="nb">Create-ApplicationInsights</span>
<span class="n">ResourceGroupName</span>       <span class="err">:</span> <span class="n">rgApplicationInsightsDemo</span>
<span class="n">ProvisioningState</span>       <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Timestamp</span>               <span class="err">:</span> <span class="n">01</span><span class="p">/</span><span class="n">04</span><span class="p">/</span><span class="n">2023</span> <span class="n">11</span><span class="err">:</span><span class="n">08</span><span class="err">:</span><span class="n">36</span>
<span class="n">Mode</span>                    <span class="err">:</span> <span class="n">Incremental</span>
<span class="n">TemplateLink</span>            <span class="err">:</span>
<span class="n">Parameters</span>              <span class="err">:</span>
                          <span class="n">Name</span>             <span class="nb">Type </span>                      <span class="n">Value</span>
                          <span class="p">===============</span>  <span class="p">=========================</span>  <span class="p">==========</span>
                          <span class="n">location</span>         <span class="n">String</span>                     <span class="s2">&#34;uksouth&#34;</span>

<span class="n">Outputs</span>                 <span class="err">:</span>

<span class="n">DeploymentDebugLogLevel</span> <span class="err">:</span>
</code></pre></div><p>You can validate that the deployment has been successful by running the
following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResource</span> <span class="n">-ResourceGroupName</span> <span class="n">rgApplicationInsightsDemo</span>
</code></pre></div><h2 id="removing-resources">Removing resources</h2>
<p>Finally, let&rsquo;s remove the resources created. Run the following command in a
PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Remove-AzResourceGroup</span> <span class="n">-Name</span> <span class="n">rgApplicationInsightsDemo</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>If you&rsquo;re interested in exploring Bicep further, you may be interested in the
<a href="https://learn.microsoft.com/en-gb/training/paths/fundamentals-bicep/">Fundamentals of Bicep</a>
learning path at Microsoft Learn.</p>
]]></content></item><item><title>Use PowerShell to find empty Azure resource groups</title><link>https://stuartmccoll.github.io/posts/2023-03-29-use-powershell-to-find-empty-azure-resource-groups/</link><pubDate>Wed, 29 Mar 2023 20:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-29-use-powershell-to-find-empty-azure-resource-groups/</guid><description>In this post, I&amp;rsquo;ll show you how to find and remove empty Azure resource groups using the Azure Az PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to find and remove empty Azure resource groups
using the Azure Az PowerShell module.</p>
<h2 id="install-the-azure-az-powershell-module">Install the Azure Az PowerShell module</h2>
<p>We&rsquo;re going to follow <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps">this guide on Microsoft Learn</a>
to install the Azure Az PowerShell module.</p>
<p>I&rsquo;m going to assume that you have the latest version of PowerShell installed.
If you don&rsquo;t, you can follow <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell">this guide on Microsoft Learn</a>.</p>
<p>Run the following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">Az</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-Repository</span> <span class="n">PsGallery</span> <span class="n">-Force</span>
</code></pre></div><p>You&rsquo;ll need to authenticate Azure PowerShell by signing in with your Azure
credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Connect-AzAccount</span>
</code></pre></div><h2 id="using-the-get-azresourcegroup-cmdlet">Using the <code>Get-AzResourceGroup</code> cmdlet</h2>
<p>You can run the <code>Get-AzResourceGroup</code> cmdlet without any options to retrieve
all Azure resource groups within your connected Azure account.</p>
<p>We&rsquo;ll use this cmdlet in tandem with the <code>Get-AzResource</code> cmdlet to retrieve
the names of all resource groups that do not have associated resources.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResourceGroup</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(!(</span><span class="nb">Get-AzResource</span> <span class="n">-ResourceGroupName</span> <span class="nv">$_</span><span class="p">.</span><span class="n">ResourceGroupName</span><span class="p">))</span> <span class="p">{</span> <span class="nb">Write-Host</span> <span class="nv">$_</span><span class="p">.</span><span class="n">ResourceGroupName</span> <span class="p">}</span> <span class="p">}</span>
</code></pre></div><p>This can be taken a step further to remove any resource groups that are found
to have no associated resources, by using the <code>Remove-AzResourceGroup</code> cmdlet.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResourceGroup</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(!(</span><span class="nb">Get-AzResource</span> <span class="n">-ResourceGroupName</span> <span class="nv">$_</span><span class="p">.</span><span class="n">ResourceGroupName</span><span class="p">))</span> <span class="p">{</span> <span class="nb">Remove-AzResourceGroup</span> <span class="nv">$_</span><span class="p">.</span><span class="n">ResourceGroupName</span> <span class="p">}</span> <span class="p">}</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-AzResourceGroup</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azresourcegroup">Microsoft Learn</a>.</p>
<p>Further information on the <code>Remove-AzResourceGroup</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resources/remove-azresourcegroup">Microsoft Learn</a>.</p>
<p>Further information on the <code>Get-AzResource</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azresource">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use PowerShell to find untagged Azure resources</title><link>https://stuartmccoll.github.io/posts/2023-03-28-use-powershell-to-find-untagged-azure-resources/</link><pubDate>Tue, 28 Mar 2023 11:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-28-use-powershell-to-find-untagged-azure-resources/</guid><description>In this post, I&amp;rsquo;ll show you how to retrieve Azure resources that do not have any associated tags.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to retrieve Azure resources that do not have
any associated tags.</p>
<h2 id="install-the-azure-az-powershell-module">Install the Azure Az PowerShell module</h2>
<p>We&rsquo;re going to follow <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps">this guide on Microsoft Learn</a>
to install the Azure Az PowerShell module.</p>
<p>I&rsquo;m going to assume that you have the latest version of PowerShell installed.
If you don&rsquo;t, you can follow <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell">this guide on Microsoft Learn</a>.</p>
<p>Run the following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">Az</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-Repository</span> <span class="n">PsGallery</span> <span class="n">-Force</span>
</code></pre></div><p>You&rsquo;ll need to authenticate Azure PowerShell by signing in with your Azure
credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Connect-AzAccount</span>
</code></pre></div><h2 id="using-the-get-resource-cmdlet">Using the <code>Get-Resource</code> cmdlet</h2>
<p>You can run the <code>Get-Resource</code> cmdlet without any options to retrieve all
Azure resources within your connected Azure account.</p>
<p>To narrow down the list of resources to <em>only</em> those that do not have any
associated tags, we&rsquo;ll utilise the <code>Where-Object</code> cmdlet as well. You can
find out more about this cmdlet on <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object">Microsoft Learn</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResource</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="n">Tags</span> <span class="o">-eq</span> <span class="nv">$null</span> <span class="o">-or</span> <span class="nv">$_Tags</span><span class="p">.</span><span class="n">Count</span> <span class="o">-eq</span> <span class="n">0</span><span class="p">}</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-AzResource</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azresource">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use Bicep to create an Azure Function App</title><link>https://stuartmccoll.github.io/posts/2023-03-26-use-bicep-to-create-an-azure-function-app/</link><pubDate>Sun, 26 Mar 2023 15:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-26-use-bicep-to-create-an-azure-function-app/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares the resources required for an Azure Function App.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .bicep file I create. You can find instructions on installing the module at Microsoft Learn.</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to create a
<a href="https://github.com/Azure/bicep">Bicep</a> file which declares the resources
required for an Azure Function App.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>I&rsquo;ll be using <a href="https://code.visualstudio.com/">Visual Studio Code</a> as my
editor, where I&rsquo;ll be writing the <code>.bicep</code> file for this walkthrough. I&rsquo;ll also
be using the official <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-bicep">Bicep extension</a>.</p>
<p>I&rsquo;ll be using the
<a href="https://learn.microsoft.com/en-us/powershell/azure/?view=azps-9.5.0">Azure Az PowerShell module</a>
to handle deploying the resources declared in the <code>.bicep</code> file I create. You
can find instructions on <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps?view=azps-9.5.0">installing the module</a>
at Microsoft Learn.</p>
<p>You&rsquo;ll need to install <a href="https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/">Azure Bicep</a>
if you haven&rsquo;t already.</p>
<p>The rest of this post assumes that you&rsquo;ve already authenticated the Azure Az
PowerShell module with an Azure account.</p>
<h2 id="creating-an-azure-resource-group">Creating an Azure resource group</h2>
<p>Before we begin writing our Bicep code, we&rsquo;ll create an Azure resource group
using the Azure Az PowerShell module. Run the following command in a PowerShell
session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroup</span> <span class="n">-Name</span> <span class="nb">rg-BicepFunctionAppDemo</span> <span class="n">-Location</span> <span class="n">uksouth</span>
</code></pre></div><p>You&rsquo;ll get a response back similar to the following (where <code>&lt;subscription_id&gt;</code>
contains your own Azure subscription identifier):</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">ResourceGroupName</span> <span class="err">:</span> <span class="nb">rg-BicepFunctionAppDemo</span>
<span class="n">Location</span>          <span class="err">:</span> <span class="n">uksouth</span>
<span class="n">ProvisioningState</span> <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Tags</span>              <span class="err">:</span>
<span class="n">ResourceId</span>        <span class="err">:</span> <span class="p">/</span><span class="n">subscriptions</span><span class="p">/&lt;</span><span class="n">subscription_id</span><span class="p">&gt;/</span><span class="n">resourceGroups</span><span class="p">/</span><span class="nb">rg-BicepFunctionAppDemo</span>
</code></pre></div><h2 id="the-azure-function-code">The Azure Function code</h2>
<p>The Bicep file that we create shortly won&rsquo;t <em>only</em> declare the resources for an
Azure Function App, but it&rsquo;ll also contain declarations necessary to deploy an
Azure Function inside of this resource. For the purposes of this walkthrough,
I&rsquo;ve taken a copy of the default code populated when manually creating a new
.NET Azure Function HTTP trigger. When triggered with no query parameters, this
code simply responds with:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">This HTTP triggered function executed successfully. Pass a name in the query
string or in the request body for a personalized response.
</code></pre></div><p>I&rsquo;ve compressed the contents of this default code into a .<code>zip</code> file and
uploaded it to my GitHub account. If you&rsquo;re playing along, you can use the same
default code found in <a href="https://github.com/stuartmccoll/bicep-examples/azure-function-app/">this GitHub repository</a>.
A full copy of the <code>Create-AzureFunctionApp.bicep</code> file that we create below
can also be found in the same GitHub repository.</p>
<h2 id="creating-the-bicep-file">Creating the <code>.bicep</code> file</h2>
<p>Create a new file called <code>Create-AzureFunctionApp.bicep</code>. In this file, we&rsquo;ll
be declaring <em>five</em> different Azure resources:</p>
<ul>
<li>an Azure Function App</li>
<li>an Azure Storage account (required by the Azure Function App)</li>
<li>a serverless Consumption hosting plan (required by the Azure Function App)</li>
<li>an Application Insights resource (allowing us to collect logs)</li>
<li>a zip deployment (allowing us to deploy our pre-packaged <code>.zip</code> file
containing the code mentioned above).</li>
</ul>
<p>I&rsquo;ve decomposed the entire <code>.bicep</code> file into individual sections below,
but you can also <a href="https://github.com/stuartmccoll/bicep-examples/blob/main/azure-function-app/Create-AzureFunctionApp.bicep">view the file in its entirety</a>.</p>
<p>We&rsquo;ll be passing <em>two</em> parameters when deploying the resources declared in
this file. First, will be the Azure region that we want to deploy to, which
we&rsquo;ll give a parameter name of <code>location</code>. If not passed, this will default
to the location of the associated Azure resource group:</p>
<pre><code class="language-bicep" data-lang="bicep">@description('Location for all resources')
param location string = resourceGroup.location()
</code></pre><p>Our second parameter will allow us to pass the URL of the <code>.zip</code> file
containing our default Azure Function code:</p>
<pre><code class="language-bicep" data-lang="bicep">@description('Location of Azure Function .zip archive')
param packageUri string
</code></pre><p>We&rsquo;ll create two variables for our Azure Function App name, and our
Azure Storage account name:</p>
<pre><code class="language-bicep" data-lang="bicep">var functionAppName = 'funcBicepFunctionAppDemo'
var storageAccountName = 'stbicepfunctionappdemo'
</code></pre><h3 id="declaring-the-azure-storage-account">Declaring the Azure Storage account</h3>
<pre><code class="language-bicep" data-lang="bicep">resource storageAccount 'Microsoft.Storage/storageAccounts@2021-08-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'Storage'
}
</code></pre><h3 id="declaring-the-azure-serverless-consumption-hosting-plan">Declaring the Azure serverless Consumption hosting plan</h3>
<pre><code class="language-bicep" data-lang="bicep">resource hostingPlan 'Microsoft.Web/serverfarms@2021-03-01' = {
  name: 'aseBicepFunctionAppDemo'
  location: location
  sku: {
    name: 'Y1'
    tier: 'Dynamic'
  }
  properties: {}
}
</code></pre><h3 id="declaring-the-azure-function-app">Declaring the Azure Function App</h3>
<pre><code class="language-bicep" data-lang="bicep">resource functionApp 'Microsoft.Web/sites@2021-03-01' = {
  name: functionAppName
  location: location
  kind: 'functionapp'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    serverFarmId: hostingPlan.id
    siteConfig: {
      appSettings: [
        {
          name: 'AzureWebJobsStorage'
          value: 'DefaultEndpointsProtocol=https;AccountName=${storageAccountName};EndpointSuffix=${environment().suffixes.storage};AccountKey=${storageAccount.listKeys().keys[0].value}'
        }
        {
          name: 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING'
          value: 'DefaultEndpointsProtocol=https;AccountName=${storageAccountName};EndpointSuffix=${environment().suffixes.storage};AccountKey=${storageAccount.listKeys().keys[0].value}'
        }
        {
          name: 'FUNCTIONS_EXTENSION_VERSION'
          value: '~4'
        }
        {
          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
          value: applicationInsights.properties.InstrumentationKey
        }
        {
          name: 'FUNCTIONS_WORKER_RUNTIME'
          value: 'dotnet'
        }
      ]
    }
    httpsOnly: true
  }
}
</code></pre><h3 id="declaring-the-azure-application-insights-resource">Declaring the Azure Application Insights resource</h3>
<p>This resource isn&rsquo;t <em>strictly</em> necessary, as it isn&rsquo;t something that is
mandatory when deploying a new Azure Function App.</p>
<pre><code class="language-bicep" data-lang="bicep">resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: 'appiBicepFunctionAppDemo'
  location: location
  kind: 'web'
  properties: {
    Application_Type: 'web'
    Request_Source: 'rest'
  }
}
</code></pre><h3 id="declaring-the-zip-deployment-resource">Declaring the <code>.zip</code> deployment resource</h3>
<p>It&rsquo;s important that the <code>packageUri</code> property value matches the name that you
give to the <code>.zip</code> file URL parameter mentioned earlier. For ease, I&rsquo;ve given
both the same name.</p>
<pre><code class="language-bicep" data-lang="bicep">resource zipDeploy 'Microsoft.Web/sites/extensions@2022-03-01' = {
  parent: functionApp
  name: 'MSDeploy'
  properties: {
    packageUri: packageUri
  }
}
</code></pre><h2 id="deploying-the-resources-declared-in-the-bicep-file">Deploying the resources declared in the <code>.bicep</code> file</h2>
<p>If you don&rsquo;t already have the Azure CLI installed, you can find an installation
guide at <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli">Microsoft Learn</a>.</p>
<p>To deploy the resources declared in our .<code>bicep</code> file, run the following
command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="nb">rg-BicepFunctionAppDemo</span> <span class="n">-TemplateFile</span> <span class="p">./</span><span class="nb">Create-AzureFunctionApp</span><span class="p">.</span><span class="n">bicep</span> <span class="n">-packageUri</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">stuartmccoll</span><span class="p">/</span><span class="nb">bicep-examples</span><span class="p">/</span><span class="n">raw</span><span class="p">/</span><span class="n">main</span><span class="p">/</span><span class="nb">azure-function</span><span class="n">-app</span><span class="p">/</span><span class="n">BicepFunctionAppDemo</span><span class="p">.</span><span class="n">zip</span>
</code></pre></div><p>You should receive a similar response to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">DeploymentName</span>          <span class="err">:</span> <span class="nb">Create-AzureFunctionApp</span>
<span class="n">ResourceGroupName</span>       <span class="err">:</span> <span class="nb">rg-BicepFunctionAppDemo</span>
<span class="n">ProvisioningState</span>       <span class="err">:</span> <span class="n">Succeeded</span>
<span class="n">Timestamp</span>               <span class="err">:</span> <span class="n">26</span><span class="p">/</span><span class="n">03</span><span class="p">/</span><span class="n">2023</span> <span class="n">13</span><span class="err">:</span><span class="n">31</span><span class="err">:</span><span class="n">22</span>
<span class="n">Mode</span>                    <span class="err">:</span> <span class="n">Incremental</span>
<span class="n">TemplateLink</span>            <span class="err">:</span>
<span class="n">Parameters</span>              <span class="err">:</span>
                          <span class="n">Name</span>             <span class="nb">Type </span>                      <span class="n">Value</span>
                          <span class="p">===============</span>  <span class="p">=========================</span>  <span class="p">==========</span>
                          <span class="n">location</span>         <span class="n">String</span>                     <span class="s2">&#34;uksouth&#34;</span>
                          <span class="n">packageUri</span>       <span class="n">String</span>
                          <span class="s2">&#34;https://github.com/stuartmccoll/bicep-examples/raw/main/azure-function-app/BicepFunctionAppDemo.zip&#34;</span>

<span class="n">Outputs</span>                 <span class="err">:</span>
<span class="n">DeploymentDebugLogLevel</span> <span class="err">:</span>
</code></pre></div><p>You can validate that the deployment has been successful by running the
following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzResource</span> <span class="n">-ResourceGroupName</span> <span class="nb">rg-BicepFunctionAppDemo</span>
</code></pre></div><p>If you navigate to the Azure function resource in your account, you&rsquo;ll find a
&lsquo;Get Function Url&rsquo; button on the Overview screen. If you navigate to the URL,
you should receive our expected response:</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">This HTTP triggered function executed successfully. Pass a name in the query
string or in the request body for a personalized response.
</code></pre></div><h2 id="removing-resources">Removing resources</h2>
<p>Finally, let&rsquo;s remove the resources created. Run the following command in a
PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Remove-AzResourceGroup</span> <span class="n">-Name</span> <span class="nb">rg-BicepFunctionAppDemo</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>If you&rsquo;re interested in exploring Bicep further, you may be interested in the
<a href="https://learn.microsoft.com/en-gb/training/paths/fundamentals-bicep/">Fundamentals of Bicep</a>
learning path at Microsoft Learn.</p>
]]></content></item><item><title>Use PowerShell to retrieve Azure location information</title><link>https://stuartmccoll.github.io/posts/2023-03-24-use-powershell-to-retrieve-azure-location-information/</link><pubDate>Fri, 24 Mar 2023 18:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-24-use-powershell-to-retrieve-azure-location-information/</guid><description>In this post, I&amp;rsquo;ll show you how to retrieve Azure location names using PowerShell; specifically, using the Azure Az PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description><content type="html"><![CDATA[<p>In this post, I&rsquo;ll show you how to retrieve Azure location names using
PowerShell; specifically, using the Azure Az PowerShell module.</p>
<h2 id="install-the-azure-az-powershell-module">Install the Azure Az PowerShell module</h2>
<p>We&rsquo;re going to follow <a href="https://learn.microsoft.com/en-us/powershell/azure/install-az-ps">this guide on Microsoft Learn</a>
to install the Azure Az PowerShell module.</p>
<p>I&rsquo;m going to assume that you have the latest version of PowerShell installed.
If you don&rsquo;t, you can follow <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell">this guide on Microsoft Learn</a>.</p>
<p>Run the following command in a PowerShell session:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">Az</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-Repository</span> <span class="n">PsGallery</span> <span class="n">-Force</span>
</code></pre></div><p>You&rsquo;ll need to authenticate Azure PowerShell by signing in with your Azure
credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Connect-AzAccount</span>
</code></pre></div><h2 id="using-the-get-azlocation-cmdlet">Using the <code>Get-AzLocation</code> cmdlet</h2>
<p>You can run the <code>Get-AzLocation</code> cmdlet without any filtering to return
information such as latitude, longitude, physical location, region type, etc.
Here, we&rsquo;re going to filter to retrieve <em>only</em> the location names, e.g. the
<code>Location</code> of each object returned.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzLocation</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">Location</span>
</code></pre></div><p>This will return a formatted table containing only the &lsquo;unfriendly&rsquo; version of
each location, e.g. &lsquo;eastus&rsquo;, &lsquo;uksouth&rsquo;, etc. If you&rsquo;re looking to include
Azure location information in a Bicep file, for example, chances are that this
is the value that you&rsquo;re looking for.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Location</span>
<span class="p">--------</span>
<span class="n">eastus</span>
<span class="n">eastus2</span>
</code></pre></div><p>If you wanted to expand your returned results to also include the &lsquo;friendly&rsquo;
version of each location, you can.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzLocation</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">DisplayName</span><span class="p">,</span><span class="n">Location</span>
</code></pre></div><p>This will return a formatted table containing the &lsquo;friendly&rsquo; and &lsquo;unfriendly&rsquo;
version of each location.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">DisplayName</span>          <span class="n">Location</span>
<span class="p">-----------</span>          <span class="p">--------</span>
<span class="n">East</span> <span class="n">US</span>              <span class="n">eastus</span>
<span class="n">East</span> <span class="n">US</span> <span class="n">2</span>            <span class="n">eastus2</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<p>Further information on the <code>Get-AzLocation</code> cmdlet can be found on
<a href="https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azlocation">Microsoft Learn</a>.</p>
]]></content></item><item><title>Use Bicep to create a monthly budget in Azure</title><link>https://stuartmccoll.github.io/posts/2023-03-19-use-bicep-to-create-a-monthly-budget-in-azure/</link><pubDate>Sun, 19 Mar 2023 21:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-19-use-bicep-to-create-a-monthly-budget-in-azure/</guid><description>I&amp;rsquo;ve recently started experimenting with Bicep for deploying Azure resources declaratively.
In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares a simple Azure Budget with a monthly alert.
Creating the .bicep file Create a new file, called main.bicep.
The first thing we&amp;rsquo;ll declare in this file is the target scope of any resources that we create. In this case, the Budget we&amp;rsquo;re creating will be created at a Subscription level.</description><content type="html"><![CDATA[<p>I&rsquo;ve recently started experimenting with <a href="https://github.com/Azure/bicep">Bicep</a>
for deploying Azure resources declaratively.</p>
<p>In this post, I&rsquo;ll show you how to create a Bicep file which declares a simple
Azure Budget with a monthly alert.</p>
<h2 id="creating-the-bicep-file">Creating the <code>.bicep</code> file</h2>
<p>Create a new file, called <code>main.bicep</code>.</p>
<p>The first thing we&rsquo;ll declare in this file is the target scope of any
resources that we create. In this case, the Budget we&rsquo;re creating will be
created at a Subscription level.</p>
<pre><code class="language-bicep" data-lang="bicep">targetScope = 'subscription'
</code></pre><p>Next, we&rsquo;ll declare some input parameters to be used when we deploy our
resources.</p>
<pre><code class="language-bicep" data-lang="bicep">param startDate string
param endDate string
param email array
</code></pre><p>The <code>startDate</code> and <code>endDate</code> will be used to configure how long our Budget
lasts, whilst the <code>email</code> array will be used to send email alerts.</p>
<p>Finally, we&rsquo;ll declare the Budget resource itself.</p>
<pre><code class="language-bicep" data-lang="bicep">resource budget 'Microsoft.Consumption/budgets@2021-10-01' = {
  name: 'BudgetMonthly'
  properties: {
    timePeriod: {
      startDate: startDate
      endDate: endDate
    }
    timeGrain: 'Monthly'
    amount: 10
    category: 'Cost'
    notifications: {
      NotificationForExceededBudget1: {
        enabled: true
        operator: 'GreaterThan'
        threshold: 90
        contactEmails: email
      }
      NotificationForExceededBudget2: {
        enabled: true
        operator: 'GreaterThan'
        threshold: 110
        contactEmails: email
      }
    }
  }
}
</code></pre><p>The <code>thresholds</code> within the two notification objects can be thought of as our
triggers; the first threshold of <code>90</code> means that we&rsquo;ll send a notification once
we&rsquo;ve exceeded 90% of our <code>amount</code> (which in this case is $10, meaning $0.90);
the second threshold of <code>110</code> means that we&rsquo;ll send a notification once we&rsquo;ve
exceeded 110% of our <code>amount</code> ($1.10).</p>
<h2 id="deploying-the-resources-declared-in-the-bicep-file">Deploying the resources declared in the <code>.bicep</code> file</h2>
<p>If you don&rsquo;t already have the Azure CLI installed, you can find an installation
guide at <a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli">Microsoft Learn</a>.</p>
<p>With the Azure CLI installed and authenticated, deploying the resource is done
using the following PowerShell commands:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$email</span> <span class="p">=</span> <span class="p">@(</span><span class="s2">&#34;user@contoso.com&#34;</span><span class="p">)</span>

<span class="nb">New-AzSubscriptionDeployment</span> <span class="n">-Name</span> <span class="n">budgetMonthly</span> <span class="n">-Location</span> <span class="n">uksouth</span> <span class="n">-TemplateFile</span> <span class="p">./</span><span class="n">main</span><span class="p">.</span><span class="n">bicep</span> <span class="n">-startDate</span> <span class="s2">&#34;2023-03-01&#34;</span> <span class="n">-endDate</span> <span class="s2">&#34;2023-12-31&#34;</span> <span class="n">-email</span> <span class="nv">$email</span>
</code></pre></div>]]></content></item><item><title>Sync contents between two S3 Buckets</title><link>https://stuartmccoll.github.io/posts/2023-01-14-sync-contents-between-s3-buckets/</link><pubDate>Sat, 14 Jan 2023 11:32:05 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/2023-01-14-sync-contents-between-s3-buckets/</guid><description>Something I&amp;rsquo;ve had to do on more than one occassion recently is copy the contents of one S3 bucket to another S3 bucket. There is no built-in way of doing this in the AWS Management Console, but it is possible using the AWS Command Line Interface (CLI).
As an example, I&amp;rsquo;m going to create two new S3 buckets in my AWS account using Terraform, push some objects into my source bucket, and then copy the contents of this bucket into my target bucket.</description><content type="html"><![CDATA[<p>Something I&rsquo;ve had to do on more than one occassion recently is copy the
contents of one S3 bucket to another S3 bucket. There is no built-in way
of doing this in the AWS Management Console, but it <em>is</em> possible using
the AWS Command Line Interface (CLI).</p>
<p>As an example, I&rsquo;m going to create two new S3 buckets in my AWS account
using Terraform, push some objects into my source bucket, and then copy
the contents of this bucket into my target bucket. If you&rsquo;d like to
skip the setup and jump straight to the instructions, head to the
<a href="#syncing-contents">Syncing contents</a> section.</p>
<h2 id="provisioning-our-infrastructure">Provisioning our infrastructure</h2>
<p>I&rsquo;m going to use Terraform to create two S3 buckets with some basic
configuration, one named <code>${account-id}-source</code>, and the other named
<code>${account-id}-target</code>. If you&rsquo;re playing along, the following steps
assume that you have Terraform installed and AWS credentials configured
locally.</p>
<p>First, we&rsquo;ll create a new directory to store out Terraform files.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir sync-s3-bucket-contents
</code></pre></div><p>In this directory, we&rsquo;ll create a new <code>versions.tf</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">touch versions.tf
</code></pre></div><p>In this file we&rsquo;ll declare our required Terraform version and provider(s).</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="nx">terraform</span> <span class="p">{</span>
  <span class="na">required_version</span> = <span class="s2">&#34;&gt;= 1.3.6&#34;</span>

  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="na">aws</span> = <span class="p">{</span>
      <span class="na">source</span>  = <span class="s2">&#34;hashicorp/aws&#34;</span>
      <span class="na">version</span> = <span class="s2">&#34;&gt;= 4.50.0&#34;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Next, we&rsquo;ll create a new <code>main.tf</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">touch main.tf
</code></pre></div><p>In this file, we&rsquo;ll utilise our provider:</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="kr">provider</span> <span class="s2">&#34;aws&#34;</span> <span class="p">{</span>
  <span class="na">region</span> = <span class="nx">local</span><span class="p">.</span><span class="nx">region</span>
<span class="p">}</span>
</code></pre></div><p>We&rsquo;ll declare our local variables:</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="nx">locals</span> <span class="p">{</span>
  <span class="na">account_id</span> = <span class="nb">data</span><span class="p">.</span><span class="nx">aws_caller_identity</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">account_id</span>
  <span class="na">region</span>     = <span class="s2">&#34;eu-west-2&#34;</span>
<span class="p">}</span>
</code></pre></div><p>And we&rsquo;ll grab the AWS account identifier being used, so that we can
use that in our S3 bucket names to ensure that they&rsquo;re unique:</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="kr">data</span> <span class="s2">&#34;aws_caller_identity&#34;</span> <span class="s2">&#34;current&#34;</span> <span class="p">{}</span>
</code></pre></div><p>Finally, we&rsquo;ll declare our S3 buckets:</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="kr">module</span> <span class="s2">&#34;s3_source_bucket&#34;</span> <span class="p">{</span>
  <span class="na">source</span> = <span class="s2">&#34;terraform-aws-modules/s3-bucket/aws&#34;</span>

  <span class="na">bucket</span> = <span class="s2">&#34;</span><span class="si">${</span><span class="nx">local</span><span class="p">.</span><span class="nx">account_id</span><span class="si">}</span><span class="s2">-source-bucket&#34;</span>

  <span class="na">block_public_acls</span>       = <span class="kc">true</span>
  <span class="na">block_public_policy</span>     = <span class="kc">true</span>
  <span class="na">ignore_public_acls</span>      = <span class="kc">true</span>
  <span class="na">restrict_public_buckets</span> = <span class="kc">true</span>

  <span class="na">acl</span> = <span class="s2">&#34;private&#34;</span>

  <span class="na">server_side_encryption_configuration</span> = <span class="p">{</span>
    <span class="na">rule</span> = <span class="p">{</span>
      <span class="na">apply_server_side_encryption_by_default</span> = <span class="p">{</span>
        <span class="na">sse_algorithm</span> = <span class="s2">&#34;AES256&#34;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">
</span><span class="kr">module</span> <span class="s2">&#34;s3_target_bucket&#34;</span> <span class="p">{</span>
  <span class="na">source</span> = <span class="s2">&#34;terraform-aws-modules/s3-bucket/aws&#34;</span>

  <span class="na">bucket</span> = <span class="s2">&#34;</span><span class="si">${</span><span class="nx">local</span><span class="p">.</span><span class="nx">account_id</span><span class="si">}</span><span class="s2">-target-bucket&#34;</span>

  <span class="na">block_public_acls</span>       = <span class="kc">true</span>
  <span class="na">block_public_policy</span>     = <span class="kc">true</span>
  <span class="na">ignore_public_acls</span>      = <span class="kc">true</span>
  <span class="na">restrict_public_buckets</span> = <span class="kc">true</span>

  <span class="na">acl</span> = <span class="s2">&#34;private&#34;</span>

  <span class="na">server_side_encryption_configuration</span> = <span class="p">{</span>
    <span class="na">rule</span> = <span class="p">{</span>
      <span class="na">apply_server_side_encryption_by_default</span> = <span class="p">{</span>
        <span class="na">sse_algorithm</span> = <span class="s2">&#34;AES256&#34;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Altogether, our <code>main.tf</code> file should look like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-terraform" data-lang="terraform"><span class="kr">provider</span> <span class="s2">&#34;aws&#34;</span> <span class="p">{</span>
  <span class="na">region</span> = <span class="nx">local</span><span class="p">.</span><span class="nx">region</span>
<span class="p">}</span>

<span class="nx">locals</span> <span class="p">{</span>
  <span class="na">account_id</span> = <span class="nb">data</span><span class="p">.</span><span class="nx">aws_caller_identity</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">account_id</span>
  <span class="na">region</span>     = <span class="s2">&#34;eu-west-2&#34;</span>
<span class="p">}</span>
<span class="kr">
</span><span class="kr">data</span> <span class="s2">&#34;aws_caller_identity&#34;</span> <span class="s2">&#34;current&#34;</span> <span class="p">{}</span>
<span class="kr">
</span><span class="kr">module</span> <span class="s2">&#34;s3_source_bucket&#34;</span> <span class="p">{</span>
  <span class="na">source</span> = <span class="s2">&#34;terraform-aws-modules/s3-bucket/aws&#34;</span>

  <span class="na">bucket</span> = <span class="s2">&#34;</span><span class="si">${</span><span class="nx">local</span><span class="p">.</span><span class="nx">account_id</span><span class="si">}</span><span class="s2">-source-bucket&#34;</span>

  <span class="na">block_public_acls</span>       = <span class="kc">true</span>
  <span class="na">block_public_policy</span>     = <span class="kc">true</span>
  <span class="na">ignore_public_acls</span>      = <span class="kc">true</span>
  <span class="na">restrict_public_buckets</span> = <span class="kc">true</span>

  <span class="na">acl</span> = <span class="s2">&#34;private&#34;</span>

  <span class="na">server_side_encryption_configuration</span> = <span class="p">{</span>
    <span class="na">rule</span> = <span class="p">{</span>
      <span class="na">apply_server_side_encryption_by_default</span> = <span class="p">{</span>
        <span class="na">sse_algorithm</span> = <span class="s2">&#34;AES256&#34;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">
</span><span class="kr">module</span> <span class="s2">&#34;s3_target_bucket&#34;</span> <span class="p">{</span>
  <span class="na">source</span> = <span class="s2">&#34;terraform-aws-modules/s3-bucket/aws&#34;</span>

  <span class="na">bucket</span> = <span class="s2">&#34;</span><span class="si">${</span><span class="nx">local</span><span class="p">.</span><span class="nx">account_id</span><span class="si">}</span><span class="s2">-target-bucket&#34;</span>

  <span class="na">block_public_acls</span>       = <span class="kc">true</span>
  <span class="na">block_public_policy</span>     = <span class="kc">true</span>
  <span class="na">ignore_public_acls</span>      = <span class="kc">true</span>
  <span class="na">restrict_public_buckets</span> = <span class="kc">true</span>

  <span class="na">acl</span> = <span class="s2">&#34;private&#34;</span>

  <span class="na">server_side_encryption_configuration</span> = <span class="p">{</span>
    <span class="na">rule</span> = <span class="p">{</span>
      <span class="na">apply_server_side_encryption_by_default</span> = <span class="p">{</span>
        <span class="na">sse_algorithm</span> = <span class="s2">&#34;AES256&#34;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>With that in place, we&rsquo;ll run <code>terraform init</code> to initiliase everything,
followed by <code>terraform validate</code> to ensure that everything we&rsquo;ve written is
valid Terraform code. <code>terraform plan</code> will tell us exactly what Terraform will
provision. Finally, running <code>terraform apply</code> will provision our infrastructure.</p>
<h2 id="adding-items-to-our-source-s3-bucket">Adding items to our source S3 bucket</h2>
<p>Again, if you&rsquo;re playing along, the following section assumes that you have
the AWS CLI installed, and AWS credentials configured locally.</p>
<p>I&rsquo;ve created two <code>.txt</code> files locally, <code>test-1.txt</code> and <code>test-2.txt</code>. To move
these from my local machine into our source S3 bucket, I can use the following
AWS CLI command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws s3 mv test-1.txt s3://<span class="si">${</span><span class="nv">my</span><span class="p">-account-id</span><span class="si">}</span>-source-bucket
aws s3 mv test-2.txt s3://<span class="si">${</span><span class="nv">my</span><span class="p">-account-id</span><span class="si">}</span>-source-bucket
</code></pre></div><p>To check that the files have successfully been moved, I can run the following
AWS CLI command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws s3 ls <span class="si">${</span><span class="nv">my</span><span class="p">-account-id</span><span class="si">}</span>-source-bucket
</code></pre></div><h2 id="syncing-contents">Syncing contents</h2>
<p>Now, to sync the contents from the source bucket to the target bucket, I run
the following AWS CLI command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws s3 sync s3://<span class="si">${</span><span class="nv">my</span><span class="p">-account-id</span><span class="si">}</span>-source-bucket s3://<span class="si">${</span><span class="nv">my</span><span class="p">-account-id</span><span class="si">}</span>-target-bucket
</code></pre></div><h2 id="tearing-down-our-infrastructure">Tearing down our infrastructure</h2>
<p>Finally, to remove the infrastructure I provisioned for this example, I can
run <code>terraform destroy</code>.</p>
]]></content></item><item><title>Maintain an Azure Container Registry using a PowerShell Azure Function</title><link>https://stuartmccoll.github.io/posts/2022-09-10-maintain-acr-using-azure-function/</link><pubDate>Sat, 10 Sep 2022 23:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-09-10-maintain-acr-using-azure-function/</guid><description>This year I created a small C# CLI application that scrapes this website and stores the results in Azure Blob Storage. It&amp;rsquo;s essentially a not-very-good version of the the Internet Archive&amp;rsquo;s Wayback Machine, but specific only to this website.
The process happens in two parts. If I merge any pull requests on the website-archiver into main, then a GitHub Actions workflow pushes the latest Docker image to an Azure Container Registry.</description><content type="html"><![CDATA[<p>This year I created a small C# CLI application that scrapes this website and
stores the results in Azure Blob Storage. It&rsquo;s essentially a not-very-good
version of the the <a href="https://archive.org/">Internet Archive</a>&rsquo;s
<a href="https://web.archive.org/">Wayback Machine</a>, but specific only to this website.</p>
<p>The process happens in two parts. If I merge any pull requests on the
<a href="https://github.com/stuartmccoll/website-archiver">website-archiver</a> into
<code>main</code>, then a GitHub Actions workflow pushes the latest Docker image to an
Azure Container Registry. If I merge any pull requests on the repository that
holds the codebase for this website, then another GitHub Actions workflow
triggers the deployment of an Azure Container Instance using the <code>latest</code>
tagged image in the aforementioned Azure Container Registry. The container
runs, the website is scraped and stored in Azure Blob Storage, and then
the container exits.</p>
<p>So far, this is working well. When I update this website, within a minute or
two I can see the most recently scraped version land in Azure Blob Storage.
Whilst I plan to hang on to all of these &lsquo;scrapes&rsquo;, what I don&rsquo;t need to hang
onto in the long term is outdated container images for the website archiver
itself. I could manually drop into the Azure Container Registry every once
in a while and remove any that aren&rsquo;t needed - it&rsquo;s not as if I&rsquo;m frequently
uploading updated images - but this seems like something that should be easy
enough to automate.</p>
<h2 id="removing-images-from-azure-container-registry-using-powershell">Removing images from Azure Container Registry using PowerShell</h2>
<p>Rather than head straight for an Azure Function, we&rsquo;ll test the theory in our
local <a href="https://docs.microsoft.com/en-us/windows/terminal/">Windows Terminal</a>
first. I want to:</p>
<ul>
<li>List the available images in an Azure Container Registry repository, ordered
by when they were last updated.</li>
<li>If there are more than five images available, then I want to remove all
<em>except</em> the most recently updated five images.</li>
</ul>
<p>We&rsquo;ll use two cmdlets, one for each action above;
<a href="https://docs.microsoft.com/en-us/powershell/module/az.containerregistry/get-azcontainerregistrytag"><code>Get-AzContainerRegistryTag</code></a> and
<a href="https://docs.microsoft.com/en-us/powershell/module/az.containerregistry/remove-azcontainerregistrytag"><code>Remove-AzContainerRegistryTag</code></a>.</p>
<p>First, we retrieve <em>all</em> available tagged images in an Azure Container Registry
repository.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$Tags</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-AzContainerRegistryTag</span> <span class="n">-RepositoryName</span> <span class="s2">&#34;RepoName&#34;</span> <span class="p">`</span>
<span class="n">-RegistryName</span> <span class="s2">&#34;RegName&#34;</span><span class="p">).</span><span class="n">Tags</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">LastUpdateTime</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">Name</span>
</code></pre></div><p>Now, if <code>$Tags</code> contains more than five tagged images, we want to remove all
but the five most recent.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="k">if</span> <span class="p">(</span><span class="nv">$Tags</span><span class="p">.</span><span class="n">Length</span> <span class="o">-gt</span> <span class="n">5</span><span class="p">)</span>
<span class="p">{</span>

  <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Tag</span> <span class="k">in</span> <span class="nv">$Tags</span><span class="p">[</span><span class="n">0</span><span class="p">..(</span><span class="nv">$Tags</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">5</span><span class="p">)])</span>
  <span class="p">{</span>
    <span class="nb">Remove-AzContainerRegistryTag</span> <span class="n">-RepositoryName</span> <span class="s2">&#34;RepoName&#34;</span> <span class="p">`</span>
    <span class="n">-RegistryName</span> <span class="s2">&#34;RegName&#34;</span> <span class="n">-Name</span> <span class="nv">$Tag</span><span class="p">.</span><span class="n">Name</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div><p>That&rsquo;s the extent of the PowerShell we&rsquo;ll write here, other than a bit of
logging output for our Azure Function.</p>
<h2 id="running-an-azure-function-on-a-timer">Running an Azure Function on a timer</h2>
<p>After creating an Azure Function App (using the PowerShell Core runtime stack),
we&rsquo;ve got an extra step before we add our code or configure our timer. We&rsquo;ll
need to make the <code>Az.ContainerRegistry</code> PowerShell module available to our
Function. This can be done by heading to &lsquo;App files&rsquo;, and adding the following
line to <code>requirements.psd1</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="s1">&#39;Az.ContainerRegistry&#39;</span> <span class="p">=</span> <span class="s1">&#39;3.0.0&#39;</span>
</code></pre></div><p>Configuring the timer is done when creating the Azure Function itself; select
&lsquo;Timer trigger&rsquo; from the available templates. Give it a name, and enter a
cron expression to specify the schedule that the Azure Function will run on.
I&rsquo;ve gone with <code>0 30 23 * * Sat</code>, which equates to 23:30 every Saturday. The
cron format in Azure is <code>{second} {minute} {hour} {day} {month} {day of week}</code>.</p>
<p>Azure will pre-populate our Azure Function with some boilerplate, which we&rsquo;ll
leave for now, inserting our full code in the middle:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="c"># Input bindings are passed in via param block.</span>
<span class="k">param</span><span class="p">(</span><span class="nv">$Timer</span><span class="p">)</span>

<span class="c"># Get the current universal time in the default string format.</span>
<span class="nv">$currentUTCtime</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Date</span><span class="p">).</span><span class="n">ToUniversalTime</span><span class="p">()</span>

<span class="c"># The &#39;IsPastDue&#39; property is &#39;true&#39; when the current function invocation is</span>
<span class="c"># later than scheduled.</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$Timer</span><span class="p">.</span><span class="n">IsPastDue</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s2">&#34;PowerShell timer is running late!&#34;</span>
<span class="p">}</span>

<span class="nb">Write-Host</span> <span class="s2">&#34;Retrieving Azure Container Registry Repository Tags in &#34;</span><span class="p">`</span>
<span class="s2">&#34;descending order of LastUpdatedTime&#34;</span>

<span class="nv">$Tags</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-AzContainerRegistryTag</span> <span class="n">-RepositoryName</span> <span class="s2">&#34;RepoName&#34;</span> <span class="p">`</span>
<span class="n">-RegistryName</span> <span class="s2">&#34;RegName&#34;</span><span class="p">).</span><span class="n">Tags</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">LastUpdateTime</span> <span class="p">|</span> <span class="p">`</span>
<span class="nb">Select-Object</span> <span class="n">Name</span>

<span class="nb">Write-Host</span> <span class="s2">&#34;Finished retrieving </span><span class="p">$(</span><span class="nv">$Tags</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span><span class="s2"> Azure Container Registry &#34;</span> <span class="p">`</span>
<span class="s2">&#34;Repository Tags in descending order of LastUpdatedTime&#34;</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$Tags</span><span class="p">.</span><span class="n">Length</span> <span class="o">-gt</span> <span class="n">5</span><span class="p">)</span>
<span class="p">{</span>

    <span class="nb">Write-Host</span> <span class="s2">&#34;More than 5 tags found for Azure Container Registry Repository&#34;</span>

    <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Tag</span> <span class="k">in</span> <span class="nv">$Tags</span><span class="p">[</span><span class="n">0</span><span class="p">..(</span><span class="nv">$Tags</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">5</span><span class="p">)])</span>
    <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">&#34;Removing Tag </span><span class="p">$(</span><span class="nv">$Tag</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span><span class="s2">&#34;</span>
        <span class="nb">Remove-AzContainerRegistryTag</span> <span class="n">-RepositoryName</span> <span class="s2">&#34;RepoName&#34;</span> <span class="p">`</span>
        <span class="n">-RegistryName</span> <span class="s2">&#34;RegName&#34;</span> <span class="n">-Name</span> <span class="nv">$Tag</span><span class="p">.</span><span class="n">Name</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c"># Write an information log with the current time.</span>
<span class="nb">Write-Host</span> <span class="s2">&#34;PowerShell timer trigger function ran! TIME: $currentUTCtime&#34;</span>

</code></pre></div><p>This is now happily running in my Azure account, limiting the amount of storage
that I&rsquo;m using in this particular Azure Container Registry.</p>
]]></content></item><item><title>Push a Docker image to Azure Container Registry using a GitHub Actions workflow</title><link>https://stuartmccoll.github.io/posts/2022-06-11-github-action-to-azure-container-registry/</link><pubDate>Sat, 11 Jun 2022 11:15:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-06-11-github-action-to-azure-container-registry/</guid><description>Building and pushing Docker images to Azure Container Registry is simple with a small GitHub Actions workflow.
This blog post assumes you&amp;rsquo;ve got a docker-compose.yml file in your GitHub repository. If you&amp;rsquo;re just using a Dockerfile, you&amp;rsquo;ll need to make a tiny amendment to the Build Docker image step in the push-to-acr.yml file described below.
Microsoft Azure setup/configuration If you&amp;rsquo;re starting fresh, in terms of our Azure setup we&amp;rsquo;ll need:</description><content type="html"><![CDATA[<p>Building and pushing Docker images to Azure Container Registry is simple with
a small GitHub Actions workflow.</p>
<p>This blog post assumes you&rsquo;ve got a <code>docker-compose.yml</code> file in your GitHub
repository. If you&rsquo;re just using a <code>Dockerfile</code>, you&rsquo;ll need to make a tiny
amendment to the <code>Build Docker image</code> step in the <code>push-to-acr.yml</code> file
described below.</p>
<h2 id="microsoft-azure-setupconfiguration">Microsoft Azure setup/configuration</h2>
<p>If you&rsquo;re starting fresh, in terms of our Azure setup we&rsquo;ll need:</p>
<ul>
<li>a Resource Group;</li>
<li>an Azure Container Registry (ACR);</li>
<li>and an access key so that we can access our ACR programmatically from our
GitHub Actions workflow.</li>
</ul>
<p>If you&rsquo;ve already got this configured, you can skip to the
<a href="#github-actions-workflow">next section</a>.</p>
<p>I&rsquo;ll use PowerShell to create this. First, our Resource Group.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzResourceGroup</span> <span class="n">-Name</span> <span class="s2">&#34;mydemoappghatoacr&#34;</span> <span class="n">-Location</span> <span class="s2">&#34;UK South&#34;</span>
</code></pre></div><p>With that done, we&rsquo;ll create our ACR within this Resource Group.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">New-AzContainerRegistry</span> <span class="n">-ResourceGroupName</span> <span class="s2">&#34;mydemoappghatoacr&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;mydemoappghatoacr&#34;</span> <span class="n">-Sku</span> <span class="s2">&#34;Basic&#34;</span> <span class="n">-EnableAdminUser</span>
</code></pre></div><p>Finally, let&rsquo;s grab the access key values we&rsquo;ll need to connect to our ACR
from our GitHub Actions workflow.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Get-AzContainerRegistryCredential</span> <span class="n">-ResourceGroupName</span> <span class="s2">&#34;mydemoappghatoacr&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;mydemoappghatoacr&#34;</span>
</code></pre></div><p>Make a note of the <code>Username</code> and <code>Password</code> values from this response.</p>
<h2 id="github-actions-workflow">GitHub Actions workflow</h2>
<p>Before we create our GitHub Actions workflow, we&rsquo;ll add a couple of Actions
secrets to our GitHub repository. These are encrypted environment variables
that can be used within our GitHub Actions workflow(s), which stops us from
exposing values that we want to remain secure, such as our Microsoft Azure
client ID and secret.</p>
<p>Head to your GitHub repository, and navigate to the Settings screen. In here,
you should be able to find a Secrets section under the Security subheading.
Secrets currently allows you to configure secrets for Actions, Codespaces,
and Dependabot. Select Actions, and then click &lsquo;New repository secret&rsquo;.</p>
<p>We&rsquo;ll be adding three Actions secrets:</p>
<ol>
<li><code>ACR_REGISTRY_NAME</code>, containing the name of your ACR.</li>
<li><code>AZ_SP_CLIENT_ID</code> containing the <code>Username</code> value you noted earlier.</li>
<li><code>AZ_SP_CLIENT_SECRET</code> containing the <code>Password</code> value you noted earlier.</li>
</ol>
<p>In your repository, create a new directory named <code>.github</code>. Inside here, we&rsquo;ll
create another new directory named <code>workflows</code>, inside which we&rsquo;ll add a new
empty file named <code>push-to-acr.yml</code>, with the resulting file path being
<code>.\.github\workflows\push-to-acr.yml</code>.</p>
<p>First, we&rsquo;ll give our workflow a name, and some run configuration. In this
case we&rsquo;re telling GitHub Actions to run this workflow when we push code
to our <code>main</code> branch.</p>
<p>Secondly, we&rsquo;re checking out the repository code.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Push to Azure Container Registry</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">main</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push-to-azure-container-registry</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout repository</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@main</span><span class="w">
</span></code></pre></div><p>In order for our GitHub Actions workflow to push to ACR, it&rsquo;ll need to
authenticate using the credentials we&rsquo;ve stored as GitHub Actions secrets.
To do this, we&rsquo;ll use the <a href="https://github.com/marketplace/actions/azure-container-registry-login">Azure Container Registry Login</a>
GitHub Action available on the <a href="https://github.com/marketplace">GitHub Marketplace</a>.
This GitHub Action will handle the authentication for us, we just need to
tell it what values to use.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Login to Azure Container Registry</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">azure/docker-login@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">login-server</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io</span><span class="w">
</span><span class="w">          </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.AZ_SP_CLIENT_ID }}</span><span class="w">
</span><span class="w">          </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.AZ_SP_CLIENT_SECRET }}</span><span class="w">
</span></code></pre></div><p>Next, we&rsquo;ll add a simple step to our workflow that will build our Docker image.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Docker image</span><span class="w">
</span><span class="w"></span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">docker-compose build</span><span class="w">
</span></code></pre></div><p>Our workflow is now capable of checking out our codebase and building our
Docker image. The final step is to push this image to our pre-configured
Azure Container Registry.</p>
<p>Let&rsquo;s add this final step to our workflow. This last step will tag the image
we&rsquo;ve just built with the Git commit SHA, and then push this tagged image
to ACR.</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Push Docker image to Azure Container Registry</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    docker tag mydemoapp:latest ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/mydemoapp:${{ github.sha }}
</span><span class="sd">    docker push ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/mydemoapp:${{ github.sha }}</span><span class="w">    
</span></code></pre></div><p>Our full GitHub Actions workflow file looks like the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Push to Azure Container Registry</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">main</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push-to-azure-container-registry</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout repository</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@main</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Login to Azure Container Registry</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">azure/docker-login@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">login-server</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io</span><span class="w">
</span><span class="w">          </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.AZ_SP_CLIENT_ID }}</span><span class="w">
</span><span class="w">          </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.AZ_SP_CLIENT_SECRET }}</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Docker image</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">docker-compose build</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Push Docker image to Azure Container Registry</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            docker tag mydemoapp:latest ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/mydemoapp:${{ github.sha }}
</span><span class="sd">            docker push ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/mydemoapp:${{ github.sha }}</span><span class="w">            
</span></code></pre></div>]]></content></item><item><title>Use PowerShell to generate a GUID</title><link>https://stuartmccoll.github.io/posts/2022-06-02-use-powershell-to-generate-a-guid/</link><pubDate>Thu, 02 Jun 2022 11:05:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-06-02-use-powershell-to-generate-a-guid/</guid><description>Another quick automation using PowerShell, this time to solve the problem of quickly adding a new GUID to the clipboard.
The New-Guid cmdlet will quickly create a random globally unique identifier, with the below output.
Guid ---- 8c312165-113b-4c30-91e9-e4e6edebcf0b This is great, but I&amp;rsquo;ve got a couple of extra needs; I don&amp;rsquo;t need the - characters, and I want the GUID to be added straight to my clipboard.
Ignoring the header is simple:</description><content type="html"><![CDATA[<p>Another quick automation using PowerShell, this time to solve the problem of
quickly adding a new GUID to the clipboard.</p>
<p>The <code>New-Guid</code> cmdlet will quickly create a random globally unique identifier,
with the below output.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Guid</span>
<span class="p">----</span>
<span class="n">8c312165</span><span class="p">-</span><span class="n">113b</span><span class="p">-</span><span class="n">4c30</span><span class="p">-</span><span class="n">91e9-e4e6edebcf0b</span>
</code></pre></div><p>This is great, but I&rsquo;ve got a couple of extra needs; I don&rsquo;t need the <code>-</code>
characters, and I want the GUID to be added straight to my clipboard.</p>
<p>Ignoring the header is simple:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">(</span><span class="nb">New-Guid</span><span class="p">).</span><span class="n">Guid</span>
</code></pre></div><p>That&rsquo;ll result in just the below output.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">8c312165</span><span class="p">-</span><span class="n">113b</span><span class="p">-</span><span class="n">4c30</span><span class="p">-</span><span class="n">91e9-e4e6edebcf0b</span>
</code></pre></div><p>Removing the <code>-</code> characters is simple as well.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">(</span><span class="nb">New-Guid</span><span class="p">).</span><span class="n">Guid</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</code></pre></div><p>Which results in the below.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">8c312165113b4c3091e9e4e6edebcf0b</span>
</code></pre></div><p>Finally, to add it to our clipboard, we can pipe our output to the
<code>Set-Clipboard</code> cmdlet.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="p">(</span><span class="nb">New-Guid</span><span class="p">).</span><span class="n">Guid</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">Set-Clipboard</span>
</code></pre></div>]]></content></item><item><title>Use PowerShell to create a .zip file</title><link>https://stuartmccoll.github.io/posts/2022-05-28-use-powershell-to-create-a-zip-file/</link><pubDate>Sat, 28 May 2022 11:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-05-28-use-powershell-to-create-a-zip-file/</guid><description>A simple automation need that I stumbled across recently was the ability to quickly create a .zip file from a static set of files and directories. Rather than run a long command in PowerShell each time, I bundled everything up into a quick function that I can run using New-StaticZipFile.
The Compress-Archive cmdlet lets us create a compressed, or zipped, archive file. There are limitations (e.g. maximum file size is 2GB) to this cmdlet, as well as more advanced options, such as the level of compression needed, but we&amp;rsquo;ll be keeping it really simple here.</description><content type="html"><![CDATA[<p>A simple automation need that I stumbled across recently was the ability to
quickly create a <code>.zip</code> file from a static set of files and directories. Rather
than run a long command in PowerShell each time, I bundled everything up into a
quick function that I can run using <code>New-StaticZipFile</code>.</p>
<p>The <code>Compress-Archive</code> cmdlet lets us create a compressed, or zipped, archive
file. There are limitations (e.g. maximum file size is 2GB) to this cmdlet, as
well as more advanced options, such as the level of compression needed, but
we&rsquo;ll be keeping it <em>really</em> simple here.</p>
<pre><code>NAME
    Compress-Archive

SYNOPSIS
    Creates a compressed archive, or zipped file, from specified files and
    directories.

SYNTAX
    Compress-Archive [-Path] &lt;System.String[]&gt; [-DestinationPath] &lt;System.String&gt; [-CompressionLevel {Optimal | NoCompression |
    Fastest}] -Force [-PassThru] [-Confirm] [-WhatIf] [&lt;CommonParameters&gt;]
</code></pre><p>The <code>Path</code> argument we pass will be a list of the static files which we want
to add to our <code>.zip</code> file. So, to begin our function we&rsquo;ll create and populate
this list.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nv">$Files</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="s1">&#39;System.Collections.ArrayList&#39;</span>
<span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Document.docx&#39;</span><span class="p">)</span>
<span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Worksheet.xlsx&#39;</span><span class="p">)</span>
</code></pre></div><p>With our list of static files populated, we&rsquo;re ready for them to be compressed.
We&rsquo;ll also need to tell the <code>Compress-Archive</code> cmdlet where to put them, e.g.
the path to our newly-created archive, which we do using the <code>DestinationPath</code>
parameter.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="nb">Compress-Archive</span> <span class="n">-Path</span> <span class="p">$(</span><span class="n">Files</span><span class="p">)</span> <span class="n">-DestinationPath</span> <span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\MyArchive.zip&#39;</span>
</code></pre></div><p>Altogether, the function so far looks like:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="k">function</span> <span class="nb">New-StaticZipFile</span>
<span class="p">{</span>
  <span class="nv">$Files</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="s1">&#39;System.Collections.ArrayList&#39;</span>
  <span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Document.docx&#39;</span><span class="p">)</span>
  <span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Worksheet.xlsx&#39;</span><span class="p">)</span>
  <span class="nb">Compress-Archive</span> <span class="n">-Path</span> <span class="p">$(</span><span class="n">Files</span><span class="p">)</span> <span class="n">-DestinationPath</span> <span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\MyArchive.zip&#39;</span>
<span class="p">}</span>
</code></pre></div><p>This will work absolutely fine - on the first run. In your terminal, you&rsquo;ll see
the following output:</p>
<pre><code>0
1
</code></pre><p>These numbers are output when we add to our <code>$Files</code> list. If we then run a
<code>Get-Item .\*</code> command, the output will be:</p>
<pre><code>        Directory: C:\Users\StuartMcColl\Documents\


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
la---        28/05/2022     11:54           5475   MyArchive.zip
la---        28/05/2022     11:42              0   Document.docx
la---        28/05/2022     11:42           6191   Worksheet.xlsx
</code></pre><p>We can see that we&rsquo;ve successfully created <code>MyArchive.zip</code>. If we run the
<code>New-StaticZipFile</code> function again, we&rsquo;ll be met with the following error:</p>
<pre><code>The archive file C:\Users\StuartMcColl\OneDrive\Documents\MyArchive.zip already
exists. Use the -Update parameter to update the existing archive file or use
the -Force parameter to overwrite the existing archive file.
</code></pre><p>We <em>could</em> use the <code>Compress-Archive</code> cmdlet to update any existing
<code>MyArchive.zip</code> file if we find one, but for my use case I&rsquo;m happy to remove
any existing file and simply create a new one. Rather than simply <code>-Force</code> the
overwrite of the existing archive file, I also want to <em>know</em> that there was
already a <code>MyArchive.zip</code> file before I remove it.</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="k">If</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="n">-Path</span> <span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">StuartMcColl</span><span class="p">\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">MyArchive</span><span class="p">.</span><span class="n">zip</span> <span class="n">-PathType</span> <span class="n">Leaf</span><span class="p">)</span>
<span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Deleting existing MyArchive.zip file&#39;</span>
  <span class="nb">Remove-Item</span> <span class="n">-Path</span> <span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">StuartMcColl</span><span class="p">\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">MyArchive</span><span class="p">.</span><span class="n">zip</span>
<span class="p">}</span>
</code></pre></div><p>Altogether, with some additional output gives us:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="k">function</span> <span class="nb">New-StaticZipFile</span>
<span class="p">{</span>
  <span class="nb">Write-Host</span> <span class="s1">&#39;Creating new MyArchive.zip file&#39;</span>

  <span class="nv">$Files</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="s1">&#39;System.Collections.ArrayList&#39;</span>
  <span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Document.docx&#39;</span><span class="p">)</span>
  <span class="nv">$Files</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\Worksheet.xlsx&#39;</span><span class="p">)</span>

  <span class="k">If</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="n">-Path</span> <span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">StuartMcColl</span><span class="p">\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">MyArchive</span><span class="p">.</span><span class="n">zip</span> <span class="n">-PathType</span> <span class="n">Leaf</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="nb">Write-Host</span> <span class="s1">&#39;Deleting existing MyArchive.zip file&#39;</span>
    <span class="nb">Remove-Item</span> <span class="n">-Path</span> <span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">StuartMcColl</span><span class="p">\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">MyArchive</span><span class="p">.</span><span class="n">zip</span>
  <span class="p">}</span>

  <span class="nb">Compress-Archive</span> <span class="n">-Path</span> <span class="p">$(</span><span class="n">Files</span><span class="p">)</span> <span class="n">-DestinationPath</span> <span class="s1">&#39;C:\Users\StuartMcColl\OneDrive\Documents\MyArchive.zip&#39;</span>

  <span class="nb">Write-Host</span> <span class="s1">&#39;Finished creating new MyArchive.zip file&#39;</span>
<span class="p">}</span>
</code></pre></div>]]></content></item><item><title>How to lnstall local Powershell Modules</title><link>https://stuartmccoll.github.io/posts/2021-10-02-how-to-install-local-powershell-modules/</link><pubDate>Sat, 02 Oct 2021 14:16:33 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2021-10-02-how-to-install-local-powershell-modules/</guid><description>I keep some custom PowerShell modules stored locally on different machines, depending on the type of machine. For example, my work laptop has modules for setup and teardown of my development environment, which are modules that I don&amp;rsquo;t keep around on my personal desktop machine.
Rather than have all of this live in a PowerShell profile which I do share between different machines, I keep a tiny bit of code in my shared profile which will import any custom modules found locally.</description><content type="html"><![CDATA[<p>I keep some custom PowerShell modules stored locally on different machines,
depending on the type of machine. For example, my work laptop has modules
for setup and teardown of my development environment, which are modules that
I don&rsquo;t keep around on my personal desktop machine.</p>
<p>Rather than have all of this live in a PowerShell profile which I <em>do</em> share
between different machines, I keep a tiny bit of code in my shared profile
which will import any custom modules found locally.</p>
<p>For this, I create a <code>LocalModules</code> directory which sits alongside <code>Modules</code>
and <code>Scripts</code> inside my <code>PowerShell</code> directory. As the name suggests, this
is where I keep those custom modules.</p>
<p>Then, within my shared PowerShell profile, I do the following:</p>
<ul>
<li>Check for the presence of the <code>LocalModules</code> directory.</li>
<li>If found, get each module file within this directory.</li>
<li>For each module file found, run the <code>Import-Module</code> cmdlet.</li>
</ul>
<p>It&rsquo;s very basic, but this section of my profile looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="k">if</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="p">~\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">PowerShell</span><span class="p">\</span><span class="n">LocalModules</span><span class="p">)</span>
<span class="p">{</span>

  <span class="nv">$localModules</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="p">~\</span><span class="n">OneDrive</span><span class="p">\</span><span class="n">Documents</span><span class="p">\</span><span class="n">PowerShell</span><span class="p">\</span><span class="n">LocalModules</span><span class="p">\*</span>

  <span class="k">ForEach</span> <span class="p">(</span><span class="nv">$m</span> <span class="k">in</span> <span class="nv">$localModules</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="nb">Import-Module</span> <span class="nv">$m</span><span class="p">.</span><span class="n">FullName</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div><p>For something more robust, you might specifically look for files with a
<code>pmsl</code> extension, to ensure you don&rsquo;t accidentally try to run the
<code>Import-Module</code> cmdlet against something that isn&rsquo;t a PowerShell module.</p>
]]></content></item><item><title>How to install Windows Package Manager (WinGet) on Windows 10</title><link>https://stuartmccoll.github.io/posts/2021-07-11-how-to-install-winget/</link><pubDate>Sun, 11 Jul 2021 11:55:02 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2021-07-11-how-to-install-winget/</guid><description>The Windows Package Manager client (also known as WinGet) celebrated it&amp;rsquo;s v1.0 release in May of 2021, after announcing at Microsoft Build 2020.
At the time of writing, although the client is distributed within the App Installer package, it isn&amp;rsquo;t generally available unless you&amp;rsquo;re running a Windows 10 Insider build, or have signed up to the Preview flight ring.
However, it&amp;rsquo;s simple to download and install the package from the official GitHub repository.</description><content type="html"><![CDATA[<p>The Windows Package Manager client (also known as WinGet)
celebrated it&rsquo;s v1.0 release in May of 2021, after announcing at
<a href="https://channel9.msdn.com/Events/Build/2020">Microsoft Build 2020</a>.</p>
<p>At the time of writing, although the client is distributed within the
App Installer package, it isn&rsquo;t generally available unless you&rsquo;re running
a Windows 10 Insider build, or have signed up to the Preview flight ring.</p>
<p>However, it&rsquo;s simple to download and install the package from the
<a href="https://github.com/microsoft/winget-cli">official GitHub repository</a>.
The only downside to this is that it won&rsquo;t enable automatic updates from
the Microsoft Store.</p>
<p>Hit the <a href="https://github.com/microsoft/winget-cli/releases">releases page</a>
of the repository, and within the &lsquo;Assets&rsquo; section of the latest release
you should spot a <code>.misxbundle</code> file. Download and install this as
you would any other application.</p>
<p>To confirm that installation was successful, open a terminal and enter:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">winget</span> <span class="p">-</span><span class="n">-info</span>
</code></pre></div><p>If WinGet was installed successfully, you should see something like the
following returned:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Windows</span> <span class="n">Package</span> <span class="n">Manager</span> <span class="n">v1</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">11692</span>
<span class="n">Copyright</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">Microsoft</span> <span class="n">Corporation</span><span class="p">.</span> <span class="n">All</span> <span class="n">rights</span> <span class="n">reserved</span><span class="p">.</span>

<span class="n">Windows</span><span class="err">:</span> <span class="n">Windows</span><span class="p">.</span><span class="n">Desktop</span> <span class="n">v10</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">19043</span><span class="p">.</span><span class="n">1083</span>
<span class="n">Package</span><span class="err">:</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">DesktopAppInstaller</span> <span class="n">v1</span><span class="p">.</span><span class="n">12</span><span class="p">.</span><span class="n">11692</span><span class="p">.</span><span class="n">0</span>

<span class="n">Logs</span><span class="err">:</span> <span class="k">%</span><span class="n">LOCALAPPDATA</span><span class="p">%\</span><span class="n">Packages</span><span class="p">\</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">DesktopAppInstaller_8wekyb3d8bbwe</span><span class="p">\</span>
<span class="n">LocalState</span><span class="p">\</span><span class="n">DiagOutputDir</span>

<span class="n">Links</span>
<span class="p">--------------------------------------------------------</span>
<span class="n">Privacy</span> <span class="n">Statement</span>   <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">aka</span><span class="p">.</span><span class="n">ms</span><span class="p">/</span><span class="nb">winget-privacy</span>
<span class="n">Licence</span> <span class="n">Agreement</span>   <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">aka</span><span class="p">.</span><span class="n">ms</span><span class="p">/</span><span class="nb">winget-license</span>
<span class="n">Third</span> <span class="n">Party</span> <span class="n">Notices</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">aka</span><span class="p">.</span><span class="n">ms</span><span class="p">/</span><span class="n">winget</span><span class="p">-</span><span class="n">3rdPartyNotice</span>
<span class="n">Homepage</span>            <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">aka</span><span class="p">.</span><span class="n">ms</span><span class="p">/</span><span class="n">winget</span>
</code></pre></div><h2 id="using-winget">Using WinGet</h2>
<p>You can run <code>winget --help</code> to return all available commands. For example,
<code>winget list</code> will return a list of all installed applications and packages.</p>
<p>To install a new package, first we can search for it. For example, let&rsquo;s say
that we want to install the latest version of the Microsoft Azure CLI. We&rsquo;ll
search for &lsquo;Azure&rsquo; with the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">winget</span> <span class="n">search</span> <span class="n">azure</span>
</code></pre></div><p>Which returns the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Name</span>                             <span class="n">Id</span>                                <span class="n">Version</span>         <span class="n">Match</span>
<span class="p">---------------------------------------------------------------------------------------------</span>
<span class="n">Bicep</span> <span class="nb">CLI </span>                       <span class="n">Microsoft</span><span class="p">.</span><span class="n">Bicep</span>                   <span class="n">0</span><span class="p">.</span><span class="n">4</span><span class="p">.</span><span class="n">63</span><span class="p">.</span><span class="n">48766</span>    <span class="n">Tag</span><span class="err">:</span> <span class="n">azure</span>
<span class="n">Microsoft</span> <span class="n">Azure</span> <span class="n">Storage</span> <span class="n">Explorer</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureStorageExplorer</span>    <span class="n">1</span><span class="p">.</span><span class="n">20</span><span class="p">.</span><span class="n">0</span>          <span class="n">Tag</span><span class="err">:</span> <span class="n">Azure</span>
<span class="n">Microsoft</span> <span class="n">Azure</span> <span class="n">Storage</span> <span class="n">Emulator</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureStorageEmulator</span>    <span class="n">5</span><span class="p">.</span><span class="n">10</span><span class="p">.</span><span class="n">19227</span><span class="p">.</span><span class="n">2113</span> <span class="n">Tag</span><span class="err">:</span> <span class="n">Azure</span>
<span class="n">Azure</span> <span class="n">Functions</span> <span class="n">Core</span> <span class="n">Tools</span>       <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureFunctionsCoreTools</span> <span class="n">3</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">3477</span>        <span class="n">Tag</span><span class="err">:</span> <span class="n">Azure</span>
<span class="n">Azure</span> <span class="n">Data</span> <span class="n">Studio</span>                <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureDataStudio</span>         <span class="n">1</span><span class="p">.</span><span class="n">30</span><span class="p">.</span><span class="n">0</span>          <span class="n">Tag</span><span class="err">:</span> <span class="n">azure</span>
<span class="n">Azure</span> <span class="n">Cosmos</span> <span class="n">DB</span> <span class="n">Emulator</span>         <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureCosmosEmulator</span>     <span class="n">2</span><span class="p">.</span><span class="n">14</span><span class="p">.</span><span class="n">1</span>          <span class="n">Tag</span><span class="err">:</span> <span class="n">Azure</span>
<span class="n">Azure</span> <span class="n">IoT</span> <span class="n">Explorer</span> <span class="p">(</span><span class="n">preview</span><span class="p">)</span>     <span class="n">Microsoft</span><span class="p">.</span><span class="nb">azure-iot</span><span class="n">-explorer</span>      <span class="n">0</span><span class="p">.</span><span class="n">14</span><span class="p">.</span><span class="n">3</span><span class="p">.</span><span class="n">0</span>        <span class="n">Tag</span><span class="err">:</span> <span class="n">azure</span>
<span class="n">Microsoft</span> <span class="n">Azure</span> <span class="nb">CLI </span>             <span class="n">Microsoft</span><span class="p">.</span><span class="n">AzureCLI</span>                <span class="n">2</span><span class="p">.</span><span class="n">26</span><span class="p">.</span><span class="n">0</span>
<span class="n">Meazure</span>                          <span class="n">CThingSoftware</span><span class="p">.</span><span class="n">Meazure</span>            <span class="n">2</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">1</span>
<span class="n">Microsoft</span> <span class="n">Azure</span> <span class="n">Service</span> <span class="n">Fabric</span>   <span class="n">Microsoft</span><span class="p">.</span><span class="n">ServiceFabricRuntime</span>    <span class="n">8</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">521</span><span class="p">.</span><span class="n">9590</span>
</code></pre></div><p>We can then install our package using either the name or ID returned. In this
case, we&rsquo;ll use the name:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">winget</span> <span class="n">install</span> <span class="s2">&#34;Microsoft Azure CLI&#34;</span>
</code></pre></div><p>With our install complete, you should see something similar to the following
in your terminal:</p>
<div class="highlight"><pre class="chroma"><code class="language-powershell" data-lang="powershell"><span class="n">Found</span> <span class="n">Microsoft</span> <span class="n">Azure</span> <span class="nb">CLI </span><span class="no">[Microsoft.AzureCLI]</span>
<span class="n">This</span> <span class="n">application</span> <span class="n">is</span> <span class="n">licensed</span> <span class="n">to</span> <span class="n">you</span> <span class="n">by</span> <span class="n">its</span> <span class="n">owner</span><span class="p">.</span>
<span class="n">Microsoft</span> <span class="n">is</span> <span class="n">not</span> <span class="n">responsible</span> <span class="k">for</span><span class="p">,</span> <span class="n">nor</span> <span class="n">does</span> <span class="n">it</span> <span class="n">grant</span> <span class="n">any</span> <span class="n">licences</span> <span class="n">to</span><span class="p">,</span> <span class="nb">third-party</span> <span class="n">packages</span><span class="p">.</span>
<span class="n">Downloading</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">azcliprod</span><span class="p">.</span><span class="n">azureedge</span><span class="p">.</span><span class="n">net</span><span class="p">/</span><span class="n">msi</span><span class="p">/</span><span class="nb">azure-cli</span><span class="p">-</span><span class="n">2</span><span class="p">.</span><span class="n">26</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">msi</span>
  <span class="err">██████████████████████████████</span>  <span class="n">48</span><span class="p">.</span><span class="n">1</span> <span class="n">MB</span> <span class="p">/</span> <span class="n">48</span><span class="p">.</span><span class="n">1</span> <span class="n">MB</span>
<span class="n">Successfully</span> <span class="n">verified</span> <span class="n">installer</span> <span class="n">hash</span>
<span class="n">Starting</span> <span class="n">package</span> <span class="n">install</span><span class="p">...</span>
<span class="n">Successfully</span> <span class="n">installed</span>
</code></pre></div><p>You can find out more about Windows Package Manager over at the <a href="https://docs.microsoft.com/en-us/windows/package-manager/">official
Microsoft documentation</a>.</p>
]]></content></item><item><title>Set WSL as the default integrated terminal in Visual Studio Code</title><link>https://stuartmccoll.github.io/posts/2021-06-08-set-wsl-as-default-vscode-terminal/</link><pubDate>Tue, 08 Jun 2021 10:00:13 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2021-06-08-set-wsl-as-default-vscode-terminal/</guid><description>If you&amp;rsquo;re using Windows Subsystem for Linux (WSL) in tandem with Visual Studio Code, you might be wondering how to change your default integrated terminal from PowerShell to WSL.
Previously, you could set this in a single line in your settings.json file using terminal.integrated.shell.windows, but this has since been deprecated in a later version of Visual Studio Code.
Add the following snippet of JSON to your settings.json file in Visual Studio Code (you can access this file by clicking the gear icon in the bottom left hand corner of the screen, selecting the &amp;lsquo;Settings&amp;rsquo; menu option, and then clicking on the &amp;lsquo;Open settings (JSON)&amp;rsquo; icon in the top right hand corner of the subsequent screen - alternatively you can open the Command Palette with CTRL + Shift + P and then type in &amp;lsquo;Open settings (JSON)'):</description><content type="html"><![CDATA[<p>If you&rsquo;re using <a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux</a>
(WSL) in tandem with Visual Studio Code, you might be wondering how to change
your default integrated terminal from PowerShell to WSL.</p>
<p>Previously, you could set this in a single line in your <code>settings.json</code> file
using <code>terminal.integrated.shell.windows</code>, but this has since been deprecated
in a later version of Visual Studio Code.</p>
<p>Add the following snippet of JSON to your <code>settings.json</code> file in Visual Studio
Code (you can access this file by clicking the gear icon in the bottom left
hand corner of the screen, selecting the &lsquo;Settings&rsquo; menu option, and then
clicking on the &lsquo;Open settings (JSON)&rsquo; icon in the top right hand corner
of the subsequent screen - alternatively you can open the Command Palette
with CTRL + Shift + P and then type in &lsquo;Open settings (JSON)'):</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;terminal.integrated.defaultProfile.windows&#34;</span><span class="p">:</span> <span class="s2">&#34;WSL&#34;</span><span class="p">,</span>
  <span class="nt">&#34;terminal.integrated.profiles.windows&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;PowerShell&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;PowerShell&#34;</span><span class="p">,</span>
      <span class="nt">&#34;icon&#34;</span><span class="p">:</span> <span class="s2">&#34;terminal-powershell&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;Command Prompt&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;${env:windir}\\Sysnative\\cmd.exe&#34;</span><span class="p">,</span>
        <span class="s2">&#34;${env:windir}\\System32\\cmd.exe&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[],</span>
      <span class="nt">&#34;icon&#34;</span><span class="p">:</span> <span class="s2">&#34;terminal-cmd&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;Git Bash&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;Git Bash&#34;</span>
    <span class="p">},</span>
    <span class="nt">&#34;WSL&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;C:\\WINDOWS\\System32\\wsl.exe&#34;</span>
      <span class="p">],</span>
      <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[],</span>
      <span class="nt">&#34;icon&#34;</span><span class="p">:</span> <span class="s2">&#34;terminal-ubuntu-wsl&#34;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Close any integrated terminals you had open in Visual Studio Code, and then
open a new integrated terminal - WSL should now open by default, rather than
PowerShell.</p>
]]></content></item><item><title>Automate the shutdown of a Windows 10 PC</title><link>https://stuartmccoll.github.io/posts/2020-10-14-automate-windows-10-shutdown/</link><pubDate>Wed, 14 Oct 2020 10:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-10-14-automate-windows-10-shutdown/</guid><description>Using the shutdown command Setting a single, non-repeatable shutdown timer can be done using the shutdown command, which can be run in the Command Prompt or PowerShell. Let&amp;rsquo;s use PowerShell as an example.
Search for &amp;lsquo;PowerShell&amp;rsquo; in the start menu and open the app that is returned. Run the command shutdown -s -t TimeInSeconds where TimeInSeconds is replaced with the number of seconds after which you want the Windows 10 PC to shutdown.</description><content type="html"><![CDATA[<h2 id="using-the-shutdown-command">Using the <code>shutdown</code> command</h2>
<p>Setting a single, non-repeatable shutdown timer can be done using the <code>shutdown</code> command, which can be run in the Command Prompt or PowerShell. Let&rsquo;s use PowerShell as an example.</p>
<ol>
<li>Search for &lsquo;<em>PowerShell</em>&rsquo; in the start menu and open the app that is returned.</li>
<li>Run the command <code>shutdown -s -t TimeInSeconds</code> where <code>TimeInSeconds</code> is replaced with the number of seconds after which you want the Windows 10 PC to shutdown. For example, if you want it to shutdown after 30 minutes, then replace <code>TimeInSeconds</code> with <code>1800</code>. The <code>-s</code> flag is simply telling the command to shutdown, as opposed to logging out, or restarting, etc.</li>
</ol>
<p>That&rsquo;s it - you&rsquo;ve scheduled a one-time shutdown of your Windows 10 PC.</p>
<p>If you&rsquo;d like to cancel your scheduled one-time shutdown, you can run the <code>shutdown</code> command again, this time only passing the <code>-a</code> flag: <code>shutdown -a</code>.</p>
<p>What about if you want to automate your shutdown schedule? That&rsquo;s where the Windows Task Scheduler comes in.</p>
<h2 id="using-task-scheduler">Using Task Scheduler</h2>
<ol>
<li>Search for &lsquo;<em>Task Scheduler</em>&rsquo; in the start menu and open the app that is returned.</li>
<li>Once opened, select the &lsquo;<em>Create basic task</em>&rsquo; option. This will open a &lsquo;<em>Basic Task Creation Wizard</em>&rsquo;.</li>
<li>Within the wizard, enter a name for this task. The description field is optional. Let&rsquo;s call ours &lsquo;<strong>Shutdown</strong>&rsquo;, then click the &lsquo;<em>Next</em>&rsquo; button.</li>
<li>The wizard will present you with a list of radio button options for how often you want your task to run. You can choose options such as daily or weekly, as well as other more specific options such as &lsquo;<em>one time</em>&rsquo; or &lsquo;<em>when the computer starts</em>&rsquo;. Choose the option appropriate to your use case, here we&rsquo;ll go with &lsquo;<em>one time</em>&rsquo;.</li>
<li>The wizard will present you with the option of specifying a date and time for the task to run. Again, choose the option appropriate to your use case.</li>
<li>Finally, the wizard will present you with the option of a program or script to run, as well as aguments to pass when running. As we&rsquo;re creating a task to shutdown our Windows 10 PC, enter <code>shutdown.exe</code> in the <em>&lsquo;Program/script</em>&rsquo; field, and then enter <code>/s</code> in the &lsquo;<em>Add arguments (optional)</em>&rsquo; field. Click the &lsquo;<em>Next</em>&rsquo; button.</li>
<li>The wizard will present you with an overview of your task. Confirm that everything is okay by clicking the &lsquo;<em>Finish</em>&rsquo; button.</li>
</ol>
<p>That&rsquo;s all there is to it. If necessary you can test your created task by finding it in the Task Scheduler, right clicking it and then selecting &lsquo;<em>Run</em>&rsquo; from the menu that appears. Likewise, to disable your task, right click it and select &lsquo;<em>Disable</em>&rsquo; from the menu that appears.</p>
]]></content></item><item><title>The Push Declined Due to Email Privacy Restrictions error</title><link>https://stuartmccoll.github.io/posts/2020-10-10-push-declined-due-to-email-privacy-restrictions/</link><pubDate>Sat, 10 Oct 2020 11:41:22 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-10-10-push-declined-due-to-email-privacy-restrictions/</guid><description>This is a quick blog post detailing what to do if you receive the push declined due to email privacy restrictions error when attempting to push to a GitHub repository.
The error message tells us that your GitHub account has been configured to disallow the pushing of commits which might reveal a personal email address.
This means that in order to push commits to this remote repository, you&amp;rsquo;ll need to do one of two things:</description><content type="html"><![CDATA[<p>This is a quick blog post detailing what to do if you receive the <code>push declined due to email privacy restrictions</code> error when attempting to push to a GitHub repository.</p>
<p>The error message tells us that your GitHub account has been configured to disallow the pushing of commits which might reveal a personal email address.</p>
<p>This means that in order to push commits to this remote repository, you&rsquo;ll need to do one of two things:</p>
<ol>
<li>Enable command line pushes that will expose a personal email address.</li>
<li>Or, configure Git to use your GitHub noreply address.</li>
</ol>
<p>I&rsquo;m going to assume that you&rsquo;ve configured your GitHub account to block command line pushes that expose a personal email address - however, if you didn&rsquo;t mean to do this and are happy to disable this setting then you can do so within the <a href="https://github.com/settings/emails">emails settings</a> in GitHub. Find the &lsquo;<em>Block command line pushes that expose my email</em>&rsquo; setting and disable it by unchecking the checkbox.</p>
<p>If you&rsquo;d like to keep this setting enabled and push commits to your remote repository, then you&rsquo;ll need to configure Git to use your GitHub no reply address. Let&rsquo;s start by grabbing that.</p>
<p>Head to the <a href="https://github.com/settings/profile">Settings</a> section of GitHub, and then select the <a href="https://github.com/settings/emails">Emails</a> menu item. In here, you&rsquo;ll find a checkbox labeled &lsquo;<em>Keep my email addresses private</em>&rsquo;. Within the description for this label, you&rsquo;ll find your GitHub noreply address. It&rsquo;ll be in the format <code>&lt;number&gt;+&lt;your_github_username&gt;@users.noreply.github.com</code>. Copy this to your clipboard, as we&rsquo;ll need it in a second.</p>
<p>In a terminal run the following command to add your GitHub noreply address to your global Git configuration:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git config --global user.email &lt;number&gt;+&lt;your_github_username&gt;@users.noreply.github.com
</code></pre></div><p>With that in place, we&rsquo;re going to want to reset the author on your previous commit. If you only made <em>one</em> commit, then you&rsquo;ll want to run the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git commit --amend --reset-author
</code></pre></div><p>If you made multiple commits using your private email address, then you&rsquo;ll need to find the SHA for the commit <em>before</em> your first commit using your private email address. Once you have this, you&rsquo;ll want to run the following command (replacing <code>&lt;sha_of_previous_commit&gt;</code> with the SHA value found):</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git rebase -i &lt;sha_of_previous_commit&gt; -x <span class="s2">&#34;git commit --amend --reset-author -CHEAD&#34;</span>
</code></pre></div><p>The <code>-x</code> parameter allows us to append a shell command after each line creating a commit in the final history.</p>
<p>Assuming everything worked okay, you&rsquo;ll now be able to run <code>git push</code> to push your commits to GitHub.</p>
]]></content></item><item><title>Retrieving files from Microsoft Azure blob storage</title><link>https://stuartmccoll.github.io/posts/2020-09-21-azure-storage-api/</link><pubDate>Mon, 21 Sep 2020 18:08:50 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-09-21-azure-storage-api/</guid><description>Recently on the Digital Service Design Team at The National Lottery Heritage Fund we&amp;rsquo;ve been investigating Microsoft Azure blob storage as an option for storing files as part of a service we&amp;rsquo;re building.
Before writing any code, we tested some of our assumptions about things like access and structure by calling the Microsoft Azure Storage REST API from Postman. This post documents a few of those tests using a basic Azure blob storage setup, using a Shared Key authorisation scheme to list files in a container; list files using a prefix; and to retrieve a specific file.</description><content type="html"><![CDATA[<p>Recently on the Digital Service Design Team at <a href="https://www.heritagefund.org.uk/">The National Lottery Heritage Fund</a> we&rsquo;ve been investigating <a href="https://azure.microsoft.com/en-gb/services/storage/blobs/">Microsoft Azure blob storage</a> as an option for storing files as part of a service we&rsquo;re building.</p>
<p>Before writing any code, we tested some of our assumptions about things like access and structure by calling the <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/">Microsoft Azure Storage REST API</a> from <a href="https://www.postman.com">Postman</a>. This post documents a few of those tests using a basic Azure blob storage setup, using a Shared Key authorisation scheme to list files in a container; list files using a prefix; and to retrieve a specific file.</p>
<hr>
<p>To begin, let&rsquo;s make sure that we have the following in our Azure account:</p>
<ol>
<li>A Storage Account.</li>
<li>A container in our Storage Account.</li>
<li>A file in our container.</li>
</ol>
<p>In Azure, open the <strong>Storage accounts</strong> service.</p>
<p>Click on the <strong>Add</strong> button.</p>
<p>Within the <strong>Project details</strong> section, choose a <strong>Subscription</strong> to create the Storage Account within, and then either select an existing <strong>Resource group</strong> or click <strong>Create new</strong> to add a new <strong>Resource group</strong>.</p>
<p>If you run into any errors around naming Storage Accounts or containers whilst following along, don&rsquo;t worry - choose a name that works for you. Just remember to update any URIs or code from the rest of the tutorial to match the name(s) you&rsquo;ve chosen.</p>
<p>Under <strong>Instance details</strong>, let&rsquo;s go with <code>storage_account_name</code> as our <strong>Storage account name</strong>, we&rsquo;ll choose <strong>(Europe) UK South</strong> as the <strong>Location</strong>, select the <strong>Standard</strong> radio button for <strong>Performance</strong>, select <strong>BlobStorage</strong> within the <strong>Account kind</strong> dropdown and select <strong>Locally-redundant storage (LRS)</strong> within the <strong>Replication</strong> dropdown. For <strong>Blob access tier (default)</strong> we&rsquo;ll go with <strong>Hot</strong>.</p>
<p>Click the <strong>Advanced</strong> tab. Under the <strong>Security</strong> section, set <strong>Allow Blob public access</strong> to <strong>Disabled</strong>.</p>
<p>Click the <strong>Review + create</strong> button. We should see a <em>Validation passed</em> notification, and we can now go ahead and click the <strong>Create</strong> button. At this point Azure will start deploying our new Storage Account, which will take a few seconds. Once done, click the <strong>Go to resource</strong> button.</p>
<p>We&rsquo;ve now ticked off the first item in our list, so we&rsquo;re ready to move onto creating a container within our Storage Account.</p>
<p>From the navigation menu on the left, click the <strong>Containers</strong> menu item beneath the <strong>Blob service</strong> heading.</p>
<p>Click the <strong>+ Container</strong> button.</p>
<p>Let&rsquo;s go with <code>container_name</code> as our container <strong>Name</strong> - then click the <strong>Create</strong> button. It&rsquo;ll take Azure just a second to add our new container.</p>
<p>From the list of containers, select the one which we just added.</p>
<p>From this page, click the <strong>Upload</strong> button. An <strong>Upload blob</strong> pane should appear, where we can select and upload a file. Select your file - in my case I&rsquo;m uploading <code>test.txt</code>, and then click on the <strong>Upload</strong> button.</p>
<p>That&rsquo;s the end of our preparation. In our Azure account we now have a Storage Account, within which we have a single container, within which we have a single file.</p>
<hr>
<p>Our file in Azure will have a URI that looks something like:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://storage_account_name.blob.core.windows.net/container_name/test.txt
</span></code></pre></div><p>Because we&rsquo;ve restricted the access level to our Storage Account, we can&rsquo;t simply access this URI to retrieve our file - we&rsquo;ll need to authorise our request. To do this, we&rsquo;re going to use <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key">Shared Key authorisation</a> (authorisation with Azure Active Directory is also available).</p>
<p>Shared Key authorisation requires that we set two headers in our request; <code>x-ms-date</code> (or <code>Date</code>) and <code>Authorization</code>.</p>
<p>To start with, let&rsquo;s set Postman up so that it will send through the correct <code>x-ms-date</code> header.</p>
<p>In Postman, click the <strong>Eye</strong> (Environment quick look) icon in the top right-hand corner, then click <strong>Add</strong> in the top right-hand corner of the modal that appears. In the <strong>Environment Name</strong> field, let&rsquo;s enter <code>Microsoft Azure Storage REST API</code> and then let&rsquo;s add two empty environment variables; <code>dateHeader</code> and <code>authSig</code>. They&rsquo;re going to be initialised as empty, as we&rsquo;re going to set them programmatically when we make our API request. Click the <strong>Add</strong> button.</p>
<p>Now, let&rsquo;s create a new Postman request - choose <code>GET</code> as the HTTP method. For our URI, let&rsquo;s begin by listing the files within the container. To do so, the URI will have the following format:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://storage_account_name.blob.core.windows.net/container_name?restype=container&amp;comp=list
</span></code></pre></div><p>The arguments in this URI are telling Azure that we&rsquo;re providing a resource type of <code>container</code>, of which we want to <code>list</code> the contents.</p>
<p>In the <strong>Headers</strong> tab, add an <code>x-ms-date</code> header and set the value as <code>{{dateHeader}}</code>, and add an <code>Authorization</code> header with a value of <code>{{authSig}}</code>.</p>
<p>If you send the request at this point, you&rsquo;ll get back the following error:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;Error&gt;</span>
    <span class="nt">&lt;Code&gt;</span>InvalidAuthenticationInfo<span class="nt">&lt;/Code&gt;</span>
    <span class="nt">&lt;Message&gt;</span>Authentication information is not given in the correct format. Check the value of Authorization header.
RequestId:{{A_GUID}}
Time:{{TIMESTAMP}}<span class="nt">&lt;/Message&gt;</span>
<span class="nt">&lt;/Error&gt;</span>
</code></pre></div><p>That&rsquo;s because we haven&rsquo;t set our environment variables. In the <strong>Pre-request Script</strong> tab, add the following code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// Key value should contain an Access Key string taken from Microsoft Azure Storage Account
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="s2">&#34;YOUR_ACCESS_KEY&#34;</span><span class="p">;</span>

<span class="c1">// Add current timestamp to an environment variable
</span><span class="c1"></span><span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toUTCString</span><span class="p">());</span>

<span class="c1">// Create the string to sign (this needs to match exactly what the server is expecting)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">strToSign</span> <span class="o">=</span> <span class="s1">&#39;GET\n\n\n\nx-ms-date:&#39;</span> <span class="o">+</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n/storage_account_name/container_name?comp=list&#39;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Base64</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">HmacSHA256</span><span class="p">(</span><span class="nx">strToSign</span><span class="p">,</span> <span class="nx">secret</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">base64EncodedHash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Base64</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>

<span class="c1">// Add the string required for the Authorization header to an environment variable
</span><span class="c1"></span><span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;authSig&#34;</span><span class="p">,</span> <span class="s2">&#34;SharedKey storage_account_name:&#34;</span> <span class="o">+</span> <span class="nx">base64EncodedHash</span><span class="p">);</span>
</code></pre></div><p>Let&rsquo;s break this down:</p>
<ul>
<li>First, we&rsquo;re declaring a variable which contains an Access Key to our Storage Account</li>
<li>Then, we&rsquo;re adding the current timestamp to our <code>dateHeader</code> environment variable</li>
<li>Then, we construct the signature string, which will change based on the request you&rsquo;re making</li>
<li>Next, we encode this string by using the HMAC-SHA256 algorithm over the UTF-8-encoded signature string</li>
<li>Finally, we add this to our <code>authSig</code> environment variable.</li>
</ul>
<p>Back in Azure, open your Storage Account and open the <strong>Access keys</strong> section. Grab the <strong>Key</strong> value of <strong>key1</strong> and paste this back into Postman over the top of <code>YOUR_ACCESS_KEY</code> in the script from above.</p>
<p>Now, hit the <strong>Send</strong> button in Postman. You should receive back something similar to the following XML:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Blobs&gt;</span>
        <span class="nt">&lt;Blob&gt;</span>
            <span class="nt">&lt;Name&gt;</span>test.txt<span class="nt">&lt;/Name&gt;</span>
            <span class="nt">&lt;Properties&gt;</span>
                <span class="nt">&lt;Last-Modified&gt;</span>Fri, 18 Sep 2020 08:33:01 GMT<span class="nt">&lt;/Last-Modified&gt;</span>
                <span class="nt">&lt;Etag&gt;</span>0x8D85BAD74489912<span class="nt">&lt;/Etag&gt;</span>
                <span class="nt">&lt;Content-Length&gt;</span>28<span class="nt">&lt;/Content-Length&gt;</span>
                <span class="nt">&lt;Content-Type&gt;</span>text/plain<span class="nt">&lt;/Content-Type&gt;</span>
                <span class="nt">&lt;Content-Encoding</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Language</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-MD5&gt;</span>f10cU58khe1Nmi/4MQlCfw==<span class="nt">&lt;/Content-MD5&gt;</span>
                <span class="nt">&lt;Cache-Control</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Disposition</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;BlobType&gt;</span>BlockBlob<span class="nt">&lt;/BlobType&gt;</span>
                <span class="nt">&lt;LeaseStatus&gt;</span>unlocked<span class="nt">&lt;/LeaseStatus&gt;</span>
                <span class="nt">&lt;LeaseState&gt;</span>available<span class="nt">&lt;/LeaseState&gt;</span>
            <span class="nt">&lt;/Properties&gt;</span>
        <span class="nt">&lt;/Blob&gt;</span>
    <span class="nt">&lt;/Blobs&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Listing files using a prefix isn&rsquo;t too dissimilar. First, let&rsquo;s try with a prefix that won&rsquo;t match anything. Start with the same request as above, but this time let&rsquo;s set our request URI to:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://storage_account_name.blob.core.windows.net/container_name?restype=container&amp;comp=list&amp;prefix=nofileshere
</span></code></pre></div><p>We don&rsquo;t have a file in our container whose filename begins with <code>nofileshere</code>, so this won&rsquo;t bring back any matches. In this case, we don&rsquo;t need to amend the <code>strToSign</code> variable, it&rsquo;ll work as before. Hit the <strong>Send</strong> button and your response should look as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Prefix&gt;</span>nofileshere<span class="nt">&lt;/Prefix&gt;</span>
    <span class="nt">&lt;Blobs</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Change the <code>prefix</code> argument in our URI to <code>test</code> however (assuming you&rsquo;ve named your file <code>test.txt</code>) and your response should look as so:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Prefix&gt;</span>test<span class="nt">&lt;/Prefix&gt;</span>
    <span class="nt">&lt;Blobs&gt;</span>
        <span class="nt">&lt;Blob&gt;</span>
            <span class="nt">&lt;Name&gt;</span>test.txt<span class="nt">&lt;/Name&gt;</span>
            <span class="nt">&lt;Properties&gt;</span>
                <span class="nt">&lt;Last-Modified&gt;</span>Fri, 18 Sep 2020 08:33:01 GMT<span class="nt">&lt;/Last-Modified&gt;</span>
                <span class="nt">&lt;Etag&gt;</span>0x8D85BAD74489912<span class="nt">&lt;/Etag&gt;</span>
                <span class="nt">&lt;Content-Length&gt;</span>28<span class="nt">&lt;/Content-Length&gt;</span>
                <span class="nt">&lt;Content-Type&gt;</span>text/plain<span class="nt">&lt;/Content-Type&gt;</span>
                <span class="nt">&lt;Content-Encoding</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Language</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-MD5&gt;</span>f10cU58khe1Nmi/4MQlCfw==<span class="nt">&lt;/Content-MD5&gt;</span>
                <span class="nt">&lt;Cache-Control</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Disposition</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;BlobType&gt;</span>BlockBlob<span class="nt">&lt;/BlobType&gt;</span>
                <span class="nt">&lt;LeaseStatus&gt;</span>unlocked<span class="nt">&lt;/LeaseStatus&gt;</span>
                <span class="nt">&lt;LeaseState&gt;</span>available<span class="nt">&lt;/LeaseState&gt;</span>
            <span class="nt">&lt;/Properties&gt;</span>
        <span class="nt">&lt;/Blob&gt;</span>
    <span class="nt">&lt;/Blobs&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Finally, we want to retrieve the contents of our file. We know it&rsquo;s there, so how can we bring back what&rsquo;s inside it?</p>
<p>Change the URI in your Postman request to:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://storage_account_name.blob.core.windows.net/container_name/test.txt
</span></code></pre></div><p>If you try and <strong>Send</strong> this request now, it won&rsquo;t work - the hashed and encoded string we&rsquo;re sending in our <code>Authorization</code> header doesn&rsquo;t match what the server is expecting. Update the <code>strToSign</code> variable declaration in the <strong>Pre-request Script</strong> tab to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">strToSign</span> <span class="o">=</span> <span class="s1">&#39;GET\n\n\n\nx-ms-date:&#39;</span> <span class="o">+</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n/storage_account_name/container_name/test.txt&#39;</span><span class="p">;</span>
</code></pre></div><p>What you get in response will depend on the file you&rsquo;ve added - in my case, it&rsquo;s a <code>.txt</code> file containing <code>These are my file contents</code>, which is exactly what gets returned in Postman&rsquo;s response body output.</p>
]]></content></item><item><title>Enabling the GitHub Secret Profile README.md</title><link>https://stuartmccoll.github.io/posts/2020-07-16-github-secret-repository-readme/</link><pubDate>Thu, 16 Jul 2020 18:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-07-16-github-secret-repository-readme/</guid><description>People on Twitter have recently discovered a GitHub secret. If you create a new GitHub repository with the same name as your profile name, you can add a README.md to your GitHub profile 1.
How to create a GitHub profile README.md Create a new GitHub repository. You&amp;rsquo;ll see two mandatory options when creating your repository - the &amp;lsquo;Owner&amp;rsquo; dropdown field and the &amp;lsquo;Repository name&amp;rsquo; input field. Ensure that the &amp;lsquo;Repository name&amp;rsquo; value is the same as the value in the &amp;lsquo;Owner&amp;rsquo; dropdown field.</description><content type="html"><![CDATA[<p>People on Twitter have recently discovered a GitHub <em>secret</em>. If you create a new GitHub repository with the same name as your profile name, you can add a <code>README.md</code> to your GitHub profile <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="how-to-create-a-github-profile-readmemd">How to create a GitHub profile <code>README.md</code></h2>
<ol>
<li>
<p><a href="https://www.github.com/new">Create a new GitHub repository</a>. You&rsquo;ll see two mandatory options when creating your repository - the &lsquo;<strong>Owner</strong>&rsquo; dropdown field and the &lsquo;<strong>Repository name</strong>&rsquo; input field. Ensure that the &lsquo;<strong>Repository name</strong>&rsquo; value is the same as the value in the &lsquo;<strong>Owner</strong>&rsquo; dropdown field. At the time of writing this feature hasn&rsquo;t rolled out to all users - if it&rsquo;s been enabled for you, you&rsquo;ll see a message displayed beginning &lsquo;You found a secret&rsquo;.</p>
</li>
<li>
<p>Check the &lsquo;<strong>Initialise this repository with a README</strong>&rsquo; checkbox.</p>
</li>
<li>
<p>Click the &lsquo;<strong>Create repository</strong>&rsquo; button.</p>
</li>
<li>
<p>After GitHub creates your repository, you&rsquo;ll be dropped into a view of the default template <code>README.md</code>. Click to edit it and add your own information using markdown <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
</li>
<li>
<p>Commit your changes.</p>
</li>
<li>
<p>Navigate to your own profile page to check it out.</p>
</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>You can see my own <code>README.md</code> on <a href="https://github.com/stuartmccoll">my GitHub profile</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>For tips on writing markdown check out <a href="https://www.markdownguide.org">the Markdown Guide</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content></item><item><title>Attaching to list items with the Microsoft SharePoint REST API</title><link>https://stuartmccoll.github.io/posts/2020-06-22-attaching-to-list-items-with-sharepoint-rest-api/</link><pubDate>Mon, 22 Jun 2020 16:00:48 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-06-22-attaching-to-list-items-with-sharepoint-rest-api/</guid><description>In my last blog post I explained how to create list items with Microsoft&amp;rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to attach a file to an existing list item.
Assuming you&amp;rsquo;ve been following along, we have a SharePoint list with at least one item in it that we&amp;rsquo;ve created through a request sent from Postman to the Microsoft SharePoint REST API. The item we created will have been assigned an id within SharePoint.</description><content type="html"><![CDATA[<p>In my <a href="../2020-06-18-creating-list-items-with-sharepoint-rest-api">last blog post</a> I explained how to create list items with Microsoft&rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to attach a file to an existing list item.</p>
<hr>
<p>Assuming you&rsquo;ve been following along, we have a SharePoint list with at least one item in it that we&rsquo;ve created through a request sent from Postman to the Microsoft SharePoint REST API. The item we created will have been assigned an <code>id</code> within SharePoint. If you don&rsquo;t still have the response from our creation request to hand (which will have contained the ID in the response body), you can obtain it from SharePoint. Access the list item and then click the &lsquo;Copy Link&rsquo; shortcut. A URL will be copied to your clipboard which looks like the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://contoso.sharepoint.com/Lists/Test%20list/DispForm.aspx?ID=1&amp;e=...
</span></code></pre></div><p>The <code>id</code> we need is right there in the URL, within the <code>ID</code> parameter.</p>
<p>Let&rsquo;s add an attachment to this list item. Open a new Postman request, which we&rsquo;ll be sending as a <code>POST</code>. Use the following details, where <code>contoso</code> is replaced with your own tenant name, <code>Test list</code> is replaced with your own SharePoint list name, and <code>id</code> with your own list item identifier as discussed above:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">POST https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items(1)/AttachmentFiles/add(FileName=&#39;microsoft-logo.jpg&#39;)
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span></code></pre></div><p>We&rsquo;re going to do something different this time. Select the &lsquo;Body&rsquo; tab and then the &lsquo;binary&rsquo; radio button. You should see a &lsquo;Select File&rsquo; button. We&rsquo;re going to upload the following image as our attachment:</p>
<p><img src="/img/microsoft-logo.jpg" alt="Microsoft logo"></p>
<p>Click the &lsquo;Select File&rsquo; button and then select the <code>microsoft-logo.jpg</code> file. Now click &lsquo;Send&rsquo; to send our <code>POST</code> request to the SharePoint REST API. You should receive a <code>200</code> HTTP status code in response, with an XML response body. The XML will contain some details about the attachment, such as the server relative path, etc. If you now browse to your list item within SharePoint you should be able to see that we&rsquo;ve successfully attached our file.</p>
]]></content></item><item><title>Creating list items with the Microsoft SharePoint REST API</title><link>https://stuartmccoll.github.io/posts/2020-06-18-creating-list-items-with-sharepoint-rest-api/</link><pubDate>Thu, 18 Jun 2020 19:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-06-18-creating-list-items-with-sharepoint-rest-api/</guid><description>In my last blog post I explained how to authenticate requests to Microsoft&amp;rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to store our access token as a Postman environment variable and to then send POST requests to the SharePoint REST API to create new items within an existing SharePoint list.
If you were following along previously, the last thing we did was to request an access token to use in future requests.</description><content type="html"><![CDATA[<p>In my <a href="../2020-06-16-sharepoint-api-authentication-with-postman">last blog post</a> I explained how to authenticate requests to Microsoft&rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to store our access token as a Postman environment variable and to then send <code>POST</code> requests to the SharePoint REST API to create new items within an existing SharePoint list.</p>
<hr>
<p>If you were following along previously, the last thing we did was to request an access token to use in future requests. We&rsquo;re going to write a couple of lines of JavaScript code within Postman which will parse the API response containing the access token and add it to our previously-created Postman environment.</p>
<p>You should still have a Postman tab open ready to send a request to the following URL:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://accounts.accesscontrol.windows.net/{{realm}}/tokens/OAuth/2
</span></code></pre></div><p>Click on the &lsquo;Tests&rsquo; tab. In the empty window, add the following two lines of code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">json_response_body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">);</span>
<span class="nx">postman</span><span class="p">.</span><span class="nx">setEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;appReg_bearerToken&#34;</span><span class="p">,</span> <span class="nx">json_response_body</span><span class="p">.</span><span class="nx">access_token</span><span class="p">);</span>
</code></pre></div><p>Click &lsquo;Send&rsquo; to send our <code>POST</code> request. You should receive a response body containing an <code>access_token</code> key/value pair. The value of the <code>access_token</code> key will now have been added as the &lsquo;Current Value&rsquo; of our <code>appReg_bearerToken</code> Postman environment variable. You can confirm this by clicking the eye icon next to the environments dropdown and checking the environment variable values.</p>
<p>We&rsquo;re now ready to create a new item within an existing SharePoint list. To do so, we need to know the <code>ListItemEntityTypeFullName</code> of the list. Let&rsquo;s open a new request in Postman, which we&rsquo;re going to send to the following URL (replacing <code>contoso</code> with your tenant name, and &lsquo;Test list&rsquo; with your own list name):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">GET https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)?$select=ListItemEntityTypeFullName
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=nometadata
</span></code></pre></div><p>Before sending, let&rsquo;s add a test to this Postman request which will grab the <code>ListItemEntityTypeFullName</code> value and store it as a Postman environment variable. Click the &lsquo;Tests&rsquo; tab and in the empty window add the following two lines of code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">json_response_body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">);</span>
<span class="nx">postman</span><span class="p">.</span><span class="nx">setEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;ListItemEntityTypeFullName&#34;</span><span class="p">,</span> <span class="nx">json_response_body</span><span class="p">.</span><span class="nx">ListItemEntityTypeFullName</span><span class="p">);</span>
</code></pre></div><p>You should receive a response body which looks something like the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;ListItemEntityTypeFullName&#34;</span><span class="p">:</span> <span class="s2">&#34;SP.Data.Test_x0020_listListItem&#34;</span>
<span class="p">}</span>
</code></pre></div><p>The value of the <code>ListItemEntityTypeFullName</code> key will now have been added as the &lsquo;Current Value&rsquo; of our <code>ListItemEntityTypeFullName</code> Postman environment variable. You can confirm this by clicking the eye icon next to the environments dropdown and checking the environment variable values.</p>
<p>We&rsquo;re now ready to create our test item in our existing SharePoint list. Open a new Postman request, which we&rsquo;ll be sending as a <code>POST</code>. Use the following details, where <code>contoso</code> is replaced with your own tenant name and &lsquo;Test list&rsquo; is replaced with your own SharePoint list name (note the <strong>double</strong> underscore before <code>metadata</code>):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">POST https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=verbose
</span><span class="err">Content-Type: application/json;odata=verbose
</span><span class="err">
</span><span class="err">{
</span><span class="err">    &#34;__metadata&#34;: {
</span><span class="err">        &#34;type&#34;: &#34;{{ListItemEntityTypeFullName}}&#34;
</span><span class="err">    },
</span><span class="err">    &#34;Title&#34;: &#34;My test item&#34;
</span><span class="err">}
</span></code></pre></div><p>Send this request and you should receive a <code>201</code> status code in response, as well as a lengthy response body. Check your SharePoint list and you should see that the item has been successfully created.</p>
<p>We can also use the API to retrieve this item. Create a new Postman request and send the following (replacing <code>contoso</code> with your own tenant name, &lsquo;Test list&rsquo; with your own list name and <code>1</code> with the id you will have received in the previous response body after creating your item):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">GET https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items(1)
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=verbose
</span></code></pre></div><p>You should receive a <code>200</code> status code in response, as well as a response body containing your chosen SharePoint list item.</p>
<p>In my next blog post I&rsquo;ll look at how we can use the SharePoint REST API to add attachments to our list items.</p>
]]></content></item><item><title>Microsoft SharePoint API Access with Postman</title><link>https://stuartmccoll.github.io/posts/2020-06-16-sharepoint-api-authentication-with-postman/</link><pubDate>Tue, 16 Jun 2020 21:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-06-16-sharepoint-api-authentication-with-postman/</guid><description>Microsoft Graph API has largely superceded v1 of the SharePoint REST API for API-driven interaction with SharePoint online, but there are still a few things that you can&amp;rsquo;t do with it. For example, at the time of writing, it&amp;rsquo;s not possible to use Microsoft Graph API to add attachments to a list item, or retrieve attachments from an existing list item. The legacy SharePoint REST API does allow for this functionality.</description><content type="html"><![CDATA[<p><a href="https://developer.microsoft.com/en-us/graph/">Microsoft Graph API</a> has largely superceded <a href="https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/get-to-know-the-sharepoint-rest-service?tabs=csom">v1 of the SharePoint REST API</a> for API-driven interaction with SharePoint online, but there are still a few things that you can&rsquo;t do with it. For example, at the time of writing, it&rsquo;s not possible to use Microsoft Graph API to add attachments to a list item, or retrieve attachments from an existing list item. The legacy SharePoint REST API <em>does</em> allow for this functionality. Authentication with the Graph API and the legacy SharePoint REST API also differs - the following acts as a tutorial for configuring interaction with the legacy SharePoint REST API using <a href="https://www.postman.com">Postman</a>.</p>
<p>For my SharePoint setup, I&rsquo;ve used a developer subscription from the <a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">Microsoft 365 Developer Program</a>. This allows me to administrate my own free SharePoint configuration, add pre-configured users from a sample data pack, and more.</p>
<hr>
<p>Ultimately, what we&rsquo;re trying to do is get an access token which will allow Postman authorised access to SharePoint. There are some steps we need to carry out first.</p>
<h2 id="register-a-sharepoint-add-in">Register a SharePoint Add-In</h2>
<p>To authorise our external system - in this case Postman, but it could also be an external application - SharePoint needs to know about it.</p>
<p>To begin, login to your SharePoint site. Then, access the following URL (where <code>contoso</code> is your own tenant name):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://contoso.sharepoint.com/_layouts/15/appregnew.aspx
</span></code></pre></div><p>This page allows us to register our SharePoint Add-In. You should see five input fields - <code>Client Id</code>, <code>Client Secret</code>, <code>Title</code>, <code>App Domain</code>, <code>Redirect URI</code>. Click the &lsquo;Generate&rsquo; button next to both &lsquo;Client Id&rsquo; and &lsquo;Client Secret&rsquo;, then make a note of the values populated - we&rsquo;ll need these later. You can enter anything in &lsquo;Title&rsquo; - we&rsquo;ll go with &lsquo;Postman&rsquo; for now. &lsquo;App Domain&rsquo; should be <code>localhost</code> and &lsquo;Redirect URI&rsquo; should be <code>https://localhost</code>. Click the &lsquo;Create&rsquo; button. You should see a success message returned, with the information you added to the input fields.</p>
<h2 id="grant-permissions-to-a-sharepoint-add-in">Grant permissions to a SharePoint Add-In</h2>
<p>Assuming you&rsquo;re still logged into your SharePoint site, access the following URL (again, where <code>contoso</code> is your own tenant name):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://contoso.sharepoint.com/_layouts/15/appinv.aspx
</span></code></pre></div><p>We can use this page to grant different permissions to any registered SharePoint Add-Ins. Paste the &lsquo;Client Id&rsquo; that we generated when registering our Add-In into the &lsquo;App Id&rsquo; field, and then click the &lsquo;Lookup&rsquo; button. This should prepopulate the other fields on the page. However, it won&rsquo;t populate the &lsquo;Permission Request XML&rsquo; field. In this field, paste the following XML:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;AppPermissionRequests</span> <span class="na">AllowAppOnlyPolicy=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;AppPermissionRequest</span> <span class="na">Scope=</span><span class="s">&#34;http://sharepoint/content/sitecollection/web&#34;</span> <span class="na">Right=</span><span class="s">&#34;FullControl&#34;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/AppPermissionRequests&gt;</span>
</code></pre></div><p>This will grant our Add-In full permissions on our SharePoint site. Your use case may call for more granular permissions. If that&rsquo;s the case, see <a href="https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/add-in-permissions-in-sharepoint">this Microsoft documentation</a> for details on how to adapt this XML to be more granular.</p>
<p>Once you&rsquo;re happy with the XML that will grant permissions to our SharePoint Add-In, click the &lsquo;Create&rsquo; button. You&rsquo;ll see a screen asking if you trust the Add-In - click &lsquo;Trust it&rsquo;.</p>
<h2 id="creating-a-postman-environment">Creating a Postman environment</h2>
<p>Within Postman, you&rsquo;ll see a dropdown in the top right corner of the screen containing the words <code>No Environment</code>. Next to this is an eye icon - click this to bring up a list of variables local to the environment and a list of global environment variables. Depending on your prior usage, you might see different things here. Click &lsquo;Add&rsquo; in the top right corner.</p>
<p>Enter a descriptive environment name - such as <code>Microsoft SharePoint REST API</code>. In the table below, we&rsquo;re going to add five environment variables - enter the values in the &lsquo;Initial Value&rsquo; column.</p>
<p><code>appReg_clientId</code> should contain our &lsquo;Client Id&rsquo; for our SharePoint Add-In.</p>
<p><code>appReg_clientSecret</code> should contain our &lsquo;Client Secret&rsquo; for our SharePoint Add-In.</p>
<p><code>targetHost</code> should contain <code>contoso.sharepoint.com</code> where <code>contoso</code> is your own tenant name.</p>
<p><code>principal</code> should contain <code>00000003-0000-0ff1-ce00-000000000000</code>.</p>
<p><code>realm</code> should contain your tenant ID.</p>
<p>To find your tenant ID, you can send a <code>GET</code> request to (where <code>contoso</code> is your own tenant name):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://contoso.sharepoint.com/_vti_bin/client.svc/
</span></code></pre></div><p>You&rsquo;ll receive a <code>System.UnauthorizedAccessException</code> in the response body, but we&rsquo;re interested in the headers here. Inside the <code>WWW-Authenticate</code> header, you&rsquo;ll see <code>Bearer realm=&quot;&lt;GUID&gt;&quot;...</code>. The GUID value is your tenant ID, which you&rsquo;ll want to set as the value of <code>realm</code> in our environment variables.</p>
<p>Be careful here to check that the &lsquo;Current Value&rsquo; column for each environment variable doesn&rsquo;t contain a new line at the end of each value. If it does, it&rsquo;ll stop us from being able to use these environment variables correctly.</p>
<p>With that done, click &lsquo;Add&rsquo; to save our Postman environment.</p>
<h2 id="requesting-an-access-token">Requesting an access token</h2>
<p>Let&rsquo;s create a new Postman request, with an HTTP method of <code>POST</code>. Our URL should be:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">https://accounts.accesscontrol.windows.net/{{realm}}/tokens/OAuth/2
</span></code></pre></div><p>The <code>{{realm}}</code> in the middle of the URL will pull from our <code>realm</code> environment variable.</p>
<p>In the &lsquo;Body&rsquo; section, select <code>x-www-form-urlencoded</code>. We&rsquo;re going to create four key/value pairs.</p>
<p><code>grant_type</code> should have a value of <code>client_credentials</code>.</p>
<p><code>client_id</code> should have a value of <code>{{appReg_clientId}}@{{realm}}</code>.</p>
<p><code>client_secret</code> should have a value of <code>{{appReg_clientSecret}}</code>.</p>
<p>Finally, <code>resource</code>, should have a value of <code>{{principal}}/{{targetHost}}@{{realm}}</code>.</p>
<p>Now, click &lsquo;Send&rsquo; and the SharePoint REST API will respond with an access token that can be used in future requests to the API. We&rsquo;ll use this in a future tutorial to create new list items with attachments.</p>
]]></content></item><item><title>Fixing Azure Account Active Directory Association Error</title><link>https://stuartmccoll.github.io/posts/2020-05-15-azure-account-active-directory-error/</link><pubDate>Fri, 15 May 2020 20:01:32 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-05-15-azure-account-active-directory-error/</guid><description>If you&amp;rsquo;ve tried to create a Microsoft Azure subscription using an existing Microsoft 365 (formerly Office 365) or Microsoft Power BI account, depending on how the account is setup you might have been redirected to this static page which displays the following error message:
Your account belongs to a directory that cannot be associated with an Azure subscription. Please sign in with a different account.
It&amp;rsquo;s not immediately clear what this means.</description><content type="html"><![CDATA[<p>If you&rsquo;ve tried to create a Microsoft Azure subscription using an existing Microsoft 365 (formerly Office 365) or Microsoft Power BI account, depending on how the account is setup you might have been redirected to <a href="https://account.azure.com/Error/NoValidTenant/100">this static page</a> which displays the following error message:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Your account belongs to a directory that cannot be associated with an Azure subscription. Please sign in with a different account.</p>
</blockquote>
</blockquote>
</blockquote>
<p>It&rsquo;s not immediately clear what this means. After a bit of research, I was able to establish that the directory referred to is an Azure Active Directory. When signing up for a Microsoft 365 or Power BI account, an unmanaged Azure Active Directory is created in the background which your account is then assigned to. The problem here is that we can&rsquo;t create an Azure subscription unless this account has the <strong>Global Administrator</strong> role within the Azure Active Directory.</p>
<p>The resolution is mentioned in <a href="https://support.microsoft.com/en-us/help/4052156/account-to-a-directory-cannot-associated-with-an-azure-subscription">this Microsoft Support page</a>. A simplified version is as follows:</p>
<ol>
<li>Head to <a href="https://portal.office.com/admintakeover">the admin takeover page</a> within the Microsoft 365 portal.</li>
<li>If you&rsquo;re not already signed in, ensure that you&rsquo;re signed in using your Microsoft 365 account, which should have the same domain as the one which you&rsquo;re receiving the Azure subscription error on. If you have a Power BI account rather than a Microsoft 365 account, then sign in using those credentials instead.</li>
<li>You&rsquo;ll be presented with an option to verify that you&rsquo;re the owner of the domain. Add the <code>TXT</code> record within the settings of your DNS. This could take up to 72 hours to propogate, depending on your DNS provider.</li>
<li>Click to verify - Azure will check that the <code>TXT</code> record exists on the domain.</li>
</ol>
<p>You should now be able to create an Azure subscription using this account.</p>
]]></content></item><item><title>AppleScript for Connecting Bluetooth Devices</title><link>https://stuartmccoll.github.io/posts/2020-05-02-applescript-bluetooth-devices/</link><pubDate>Sat, 02 May 2020 10:50:44 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-05-02-applescript-bluetooth-devices/</guid><description>Last week I wrote another AppleScript for automating a manual task I have to carry out each time I switch between my personal MacBook Pro and my work device. This time, I needed to write a script which would connect to my Bluetooth devices - a Magic Mouse, Magic Keyboard and my AirPods.
Rather than accessing the System Preferences application, which I demonstrated in my last AppleScript, this script needed to directly access the Bluetooth icon in the menu bar.</description><content type="html"><![CDATA[<p>Last week I wrote another AppleScript for automating a manual task I have to carry out each time I switch between my personal MacBook Pro and my work device. This time, I needed
to write a script which would connect to my Bluetooth devices - a Magic Mouse, Magic Keyboard and my AirPods.</p>
<p>Rather than accessing the System Preferences application, which I demonstrated in <a href="/posts/2020-04-27-applescript-external-displays">my last AppleScript</a>, this script needed to directly access the Bluetooth icon in the
menu bar. If you&rsquo;re repurposing anything within this script, you&rsquo;ll need to make sure that you have the Bluetooth icon within your own menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="c">-- Subroutine to connect to Bluetooth devices</span>
<span class="c">-- @param bluetooth_devices : List(String) - the device names</span>
<span class="k">on</span> <span class="nv">connect_bluetooth_devices</span><span class="p">(</span><span class="nv">bluetooth_devices</span><span class="p">)</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="nv">connect_bluetooth_devices</span></code></pre></div>
<p>I&rsquo;ve written a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW3">handler</a>
(think &lsquo;function&rsquo;), which takes an array of Bluetooth device names. The idea here is that we&rsquo;ll pass all of the Bluetooth devices which we want
to connect to into the handler, loop through them and for each one connect to it using the Bluetooth icon in the menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nb">activate</span> <span class="nb">application</span> <span class="s2">&#34;SystemUIServer&#34;</span></code></pre></div>
<p>SystemUIServer is responsible for the system tray side of the menu bar - things like Bluetooth, Networking, Clock, etc.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;SystemUIServer&#34;</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span></code></pre></div>
<p>This is us enabling ourselves to be able to access items within the menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">set</span> <span class="nv">bluetooth_menu_bar_item</span> <span class="k">to</span> <span class="p">(</span><span class="na">menu</span> <span class="nv">bar</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="na">menu</span> <span class="nv">bar</span> <span class="mi">1</span> <span class="nb">whose</span> <span class="nv">description</span> <span class="ow">contains</span> <span class="s2">&#34;bluetooth&#34;</span><span class="p">)</span>
<span class="k">tell</span> <span class="nv">bluetooth_menu_bar_item</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span></code></pre></div>
<p>Here, we&rsquo;re getting the Bluetooth menu bar item and setting it to a variable.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">repeat</span> <span class="k">with</span> <span class="nv">bluetooth_device</span> <span class="k">in</span> <span class="nv">bluetooth_devices</span>

<span class="k">end</span> <span class="k">repeat</span></code></pre></div>
<p>This is the loop I mentioned earlier - we&rsquo;re looping through each item in the array, and assigning the item to the <code>bluetooth_device</code> variable.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nv">click</span>
<span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
    <span class="k">tell</span> <span class="p">(</span><span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nv">click</span>
        <span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
            <span class="nv">click</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span>
        <span class="k">else</span>
            <span class="c">-- Exit Bluetooth menu bar item</span>
            <span class="na">key code</span> <span class="mi">53</span>
        <span class="k">end</span> <span class="k">if</span>
    <span class="k">end</span> <span class="k">tell</span>
<span class="k">end</span> <span class="k">if</span></code></pre></div>
<p>This is really the bulk of the script. We <code>click</code> the Bluetooth menu bar icon. We then check whether our <code>bluetooth_device</code> is present in the list that is displayed. If it is,
then we click the device name. If the submenu that opens contains a <code>Connect</code> option, then we click it. Otherwise, we use <code>key code 53</code> (Escape), to exit the menu.</p>
<p>After exiting our loop we hit <code>key code 53</code> one last time to ensure that we&rsquo;ve closed the Bluetooth menu.</p>
<p>We can call our handler like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nv">connect_bluetooth_devices</span><span class="p">({</span><span class="s2">&#34;Stuart’s AirPods&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Keyboard&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Mouse&#34;</span><span class="p">})</span></code></pre></div>
<p>The important thing to note here is the difference between the <code>’</code> character used in the device name string and the <code>'</code> character on your keyboard.</p>
<p>Here&rsquo;s the script in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="c">-- Connect to Bluetooth devices</span>
<span class="nv">connect_bluetooth_devices</span><span class="p">({</span><span class="s2">&#34;Stuart’s AirPods&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Keyboard&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Mouse&#34;</span><span class="p">})</span>

<span class="c">-- Handler to connect to Bluetooth devices</span>
<span class="c">-- @param bluetooth_devices : List(String) - the device names</span>
<span class="k">on</span> <span class="nv">connect_bluetooth_devices</span><span class="p">(</span><span class="nv">bluetooth_devices</span><span class="p">)</span>
  <span class="nb">activate</span> <span class="nb">application</span> <span class="s2">&#34;SystemUIServer&#34;</span>
  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;SystemUIServer&#34;</span>
    <span class="k">set</span> <span class="nv">bluetooth_menu_bar_item</span> <span class="k">to</span> <span class="p">(</span><span class="na">menu</span> <span class="nv">bar</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="na">menu</span> <span class="nv">bar</span> <span class="mi">1</span> <span class="nb">whose</span> <span class="nv">description</span> <span class="ow">contains</span> <span class="s2">&#34;bluetooth&#34;</span><span class="p">)</span>
    <span class="k">tell</span> <span class="nv">bluetooth_menu_bar_item</span>
      <span class="k">repeat</span> <span class="k">with</span> <span class="nv">bluetooth_device</span> <span class="k">in</span> <span class="nv">bluetooth_devices</span>
        <span class="nv">click</span>
        <span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
          <span class="k">tell</span> <span class="p">(</span><span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span><span class="p">)</span>
            <span class="nv">click</span>
            <span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
              <span class="nv">click</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span>
            <span class="k">else</span>
              <span class="c">-- Exit Bluetooth menu bar item</span>
              <span class="na">key code</span> <span class="mi">53</span>
            <span class="k">end</span> <span class="k">if</span>
          <span class="k">end</span> <span class="k">tell</span>
        <span class="k">end</span> <span class="k">if</span>
      <span class="k">end</span> <span class="k">repeat</span>
      <span class="c">-- Exit Bluetooth menu bar item</span>
      <span class="na">key code</span> <span class="mi">53</span>
    <span class="k">end</span> <span class="k">tell</span>
  <span class="k">end</span> <span class="k">tell</span>
<span class="k">end</span> <span class="nv">connect_bluetooth_devices</span></code></pre></div>
]]></content></item><item><title>AppleScript for Configuring External Displays</title><link>https://stuartmccoll.github.io/posts/2020-04-27-applescript-external-displays/</link><pubDate>Mon, 27 Apr 2020 20:00:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/2020-04-27-applescript-external-displays/</guid><description>AppleScript is a scripting language bundled within all versions of macOS, which allows for scripting of elements of the operating system and compatible applications.
I&amp;rsquo;d never touched it before, but decided to try to use it to automate setting the resolutions of my external displays when switching between my personal and work MacBook Pros. Sometimes the resolutions stick when switching between the two, sometimes they don&amp;rsquo;t. Rather than have to go into System Preferences &amp;gt; Displays and set them whenever the settings don&amp;rsquo;t stick, I quite liked the idea of just running a script and having something else take care of it for me.</description><content type="html"><![CDATA[<p>AppleScript is a scripting language bundled within all versions of macOS, which allows for scripting of elements of the operating system and compatible applications.</p>
<p>I&rsquo;d never touched it before, but decided to try to use it to automate setting the resolutions of my external displays when switching between my personal and work MacBook Pros.
Sometimes the resolutions stick when switching between the two, sometimes they don&rsquo;t. Rather than have to go into <code>System Preferences &gt; Displays</code> and set them whenever the
settings don&rsquo;t stick, I quite liked the idea of just running a script and having something else take care of it for me. That&rsquo;s where AppleScript comes in.</p>
<p>There are different ways of running AppleScripts - I&rsquo;m not going to cover that here. Options include running from the command line, running as a bundled application, running
from <a href="https://www.alfredapp.com">Alfred</a>, etc.</p>
<p>I managed to cobble together a sloppy script to automate setting the resolution of my displays, which I&rsquo;ll detail below. Prior warning - I haven&rsquo;t done any cleanup; there&rsquo;s
plenty that could be refactored - for example, it could be one function which you pass parameters to and call for each display you want to set. Go with it for now.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Preferences&#34;</span>
  <span class="nv">reveal</span> <span class="nv">anchor</span> <span class="s2">&#34;displaysDisplayTab&#34;</span> <span class="k">of</span> <span class="nv">pane</span> <span class="na">id</span> <span class="s2">&#34;com.apple.preference.displays&#34;</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This opens <code>System Preferences &gt; Displays</code> and then ensures that the <code>Display</code> tab is open.</p>
<p><img src="/img/20200427-display.png" alt="System Preferences > Displays"></p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;System Preferences&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="na">window</span> <span class="s2">&#34;Built-in Retina Display&#34;</span>
  <span class="k">set</span> <span class="nv">is_scaled</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
  <span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
    <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
  <span class="k">else</span>
    <span class="k">set</span> <span class="nv">scale_value</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="nv">scale_value</span> <span class="ow">is not</span> <span class="ow">equal to</span> <span class="mi">5</span> <span class="k">then</span>
      <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="k">end</span> <span class="k">if</span>
  <span class="k">end</span> <span class="k">if</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This is the bulk of the script, which I essentially duplicate this for both external displays. Let&rsquo;s break down what&rsquo;s happening here.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;System Preferences&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="na">window</span> <span class="s2">&#34;Built-in Retina Display&#34;</span>
<span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This <code>tell</code> block ensures that I&rsquo;m targeting the &ldquo;Built-in Retina Display&rdquo; window. I also have two separate <code>tell</code> blocks for my external displays, where instead of using
<code>tell window &quot;Built-in Retina Display&quot;</code>, I use <code>tell window &quot;U28E590 (1)&quot;</code> and <code>tell window &quot;U28E590 (2)&quot;</code>. This is what I meant about my lack of refactoring; you could easily
make this a function and pass the display name as an argument.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">set</span> <span class="nv">is_scaled</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
</code></pre></div><p>This sets the value of the &ldquo;Scaled&rdquo; radio button to a variable, which we can then check.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
    <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
  <span class="k">else</span>
    <span class="p">...</span>
  <span class="k">end</span> <span class="k">if</span>
</code></pre></div><p>If the &ldquo;Scaled&rdquo; radio button has a value of <code>0</code>, then that means that it hasn&rsquo;t been clicked. We click the &ldquo;Scaled&rdquo; radio button and then select the appropriate resolution
size from within the &ldquo;Scaled&rdquo; submenu. In this code example, <code>radio button 5</code> is the &ldquo;More Space&rdquo; setting.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
    <span class="p">...</span>
  <span class="k">else</span>
    <span class="k">set</span> <span class="nv">scale_value</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="nv">scale_value</span> <span class="ow">is not</span> <span class="ow">equal to</span> <span class="mi">5</span> <span class="k">then</span>
      <span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
    <span class="k">end</span> <span class="k">if</span>
  <span class="k">end</span> <span class="k">if</span>
</code></pre></div><p>In the <code>else</code> block, &ldquo;Scaled&rdquo; was already selected. In this case, we want to make sure that the appropriate resolution size from within the &ldquo;Scaled&rdquo; submenu is selected. Here,
we set the currently selected resolution size to the <code>scale_value</code> variable. We then check whether it&rsquo;s equal to the value we want (in this case <code>5</code>). If it isn&rsquo;t, then we set it. If it&rsquo;s already set to <code>5</code>, then we don&rsquo;t need to click it again.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nb">quit</span> <span class="nb">application</span> <span class="s2">&#34;System Preferences&#34;</span>
</code></pre></div><p>This line is self-explanatory.</p>
<p>And that&rsquo;s it.</p>
]]></content></item><item><title>HTTP/S Redirects for AWS Route 53 Using S3</title><link>https://stuartmccoll.github.io/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</link><pubDate>Fri, 07 Feb 2020 20:45:35 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</guid><description>I moved hosting of my domains recently from tsoHost to Amazon Web Services, as uptime on tsoHost seems to have been slowly getting worse. Rather than using disparate providers for different services, I chose AWS to sit everything under one provider.
Shifting to AWS itself was relatively easy - I&amp;rsquo;m now using Amazon WorkMail for my email service and Amazon Route 53 for DNS. The documentation for switching to both from another provider was straight forward and I was up and running within a few days.</description><content type="html"><![CDATA[<p>I moved hosting of my domains recently from <a href="https://www.tsohost.com">tsoHost</a> to <a href="https://aws.amazon.com">Amazon Web Services</a>, as uptime on tsoHost seems to have been slowly getting worse. Rather than using disparate providers for different services, I chose AWS to sit everything under one provider.</p>
<p>Shifting to AWS itself was relatively easy - I&rsquo;m now using <a href="https://aws.amazon.com/workmail/">Amazon WorkMail</a> for my email service and <a href="https://aws.amazon.com/route53/">Amazon Route 53</a> for DNS. The documentation for switching to both from another provider was straight forward and I was up and running within a few days.</p>
<p>Out of the box, Route 53 doesn&rsquo;t provide the ability to redirect to sites hosted outside of AWS. It&rsquo;s achievable with the use of another Amazon service, S3 (Simple Storage Bucket).</p>
<h2 id="guide">Guide</h2>
<p>Create a new S3 bucket in the <a href="https://console.aws.amazon.com/s3/">Amazon S3 console</a>. Give it a name which matches your domain - <code>example.com</code>. Keep all of the default settings.</p>
<p>Once created, enter the &lsquo;Properties&rsquo; section of the bucket, and select &lsquo;Static Website Hosting&rsquo;. In here, select &lsquo;Redirect all request to another host name&rsquo;, which will provide you with two input fields to fill in. Add the domain to redirect to in the first, let&rsquo;s assume it&rsquo;s <code>https://www.example.net</code>, and enter one of <code>http</code> or <code>https</code> in the second, before saving.</p>
<p>In the <a href="https://console.aws.amazon.com/route53/">Route 53 console</a>, choose your matching hosted zone - in this case it&rsquo;d be <code>example.com</code>.</p>
<p>In here, create a new resource record (by clicking &lsquo;Create Record Set&rsquo;). Select a &lsquo;Record type&rsquo; of &lsquo;A - IPv4 address&rsquo;. Select the &lsquo;Alias&rsquo; option, and within &lsquo;Alias Target&rsquo;, you&rsquo;ll be provided with a list of your AWS resources which you can redirect to. Your S3 bucket will be listed under a heading of &lsquo;S3 Website Endpoints&rsquo;. Leave &lsquo;Routing Policy&rsquo; as &lsquo;Simple&rsquo; and &lsquo;Evaluate Health Target&rsquo; as &lsquo;No&rsquo;, then click &lsquo;Create&rsquo; to create the record.</p>
<p>The change might take a little bit of time to propogate. It was instant for me. You can test this by running <code>curl --head example.com</code>. This returned the following headers for my request <code>HTTP/1.1 301 Moved Permanently</code>, <code>Server: AmazonS3</code>, and <code>Location: https://www.example.net/</code>, confirming that the change had propogated.</p>
<p>To ensure redirects for both <code>example.com</code> and <code>www.example.com</code>, you&rsquo;ll want to follow the same process as above, this time creating an S3 bucket with a name of <code>www.example.com</code> and pointing another new record set for your domain at this second S3 bucket.</p>
]]></content></item><item><title>Microservice Design Patterns: Aggregator</title><link>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</link><pubDate>Mon, 17 Jun 2019 10:00:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</guid><description>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.
Let&amp;rsquo;s imagine that we&amp;rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&amp;rsquo;s architecture - some services call these individually, some call all three.</description><content type="html"><![CDATA[<p>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.</p>
<p>Let&rsquo;s imagine that we&rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&rsquo;s architecture - some services call these individually, some call all three.</p>
<p>The requirements for the API are that it should return simple details for a patient, a list of their allergies and a list of medication that they are currently taking.</p>
<p>Our three existing microservices are as follows:</p>
<ul>
<li><em>Existing Service #1</em> returns details about a patient - their name, age, etc.</li>
<li><em>Existing Service #2</em> returns a list of allergies that the patient has.</li>
<li><em>Existing Service #3</em> returns a list of medication that the patient is currently taking.</li>
</ul>
<p>Usually, we&rsquo;d expect an aggregator to make synchronous calls to relevant microservices, performing any necessary business logic on each result as it receives it and then packaging this up as an API endpoint for a consumer to use. This meets our requirements whilst opening up potential for re-use and decoupling.</p>
<p>Rather than increasing the number of services which call these microservices directly, we can make use of the aggregator pattern here.</p>
<p><img src="/img/aggregator-architecture.png" alt="Simple component diagram demonstrating an example of the aggregator design pattern"></p>
<p>Our new internal API will call our new aggregator microservice, which will call the three existing microservices before then pushing the necessary results back up to the internal API.</p>
<p>We can re-use our aggregator within other services which call <em>all three</em> existing services, decoupling these from direct interaction with the microservices, which will make it easier to replace one later down the line; if we want to suddenly commission a new allergies microservice, we only have to update the aggregator (and those services which don&rsquo;t call <em>all three</em> existing services).</p>
]]></content></item><item><title>Deploy a Serverless Flask Application with AWS Lambda</title><link>https://stuartmccoll.github.io/posts/deploy-a-serverless-flask-application-with-aws-lambda/</link><pubDate>Wed, 17 Oct 2018 22:00:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/deploy-a-serverless-flask-application-with-aws-lambda/</guid><description>AWS Lambda lets us run code without provisioning or managing servers, paying only for the compute time of the running code. There&amp;rsquo;s no permanent infrastructure, and the server only has a life cycle of 40 milliseconds. AWS provides automatic horizontal scaling for Lambda applications, spinning up and down as many instances as are necessary.
An open source Python library, Zappa gives us the ability to build and deploy serverless, event-driven Python applications on AWS Lambda.</description><content type="html"><![CDATA[<p><a href="https://aws.amazon.com/lambda/">AWS Lambda</a> lets us run code without provisioning or managing servers, paying only for the compute time of the running code. There&rsquo;s no permanent infrastructure, and the server only has a life cycle of 40 <em>milliseconds</em>. AWS provides automatic horizontal scaling for Lambda applications, spinning up and down as many instances as are necessary.</p>
<p>An open source Python library, <a href="https://github.com/Miserlou/Zappa">Zappa</a> gives us the ability to build and deploy serverless, event-driven Python applications on <a href="https://aws.amazon.com/lambda/">AWS Lambda</a>. Zappa works out of the box with WSGI web applications, such as Flask and Django.</p>
<p>It&rsquo;s quick and easy to deploy a Python WSGI application to AWS Lambda. The below guide assumes you have an AWS account and have created an IAM user with the relevant permissions.</p>
<h3 id="configuration">Configuration</h3>
<p>With <a href="https://pypi.org/project/pip/">pip</a> installed locally, we&rsquo;ll grab the <a href="https://pypi.org/project/awscli/">awscli</a> package.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pip install awscli
</code></pre></div><p>Once installed, the <code>aws configure</code> command will be the quickest way to configure our AWS credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">aws configure
</code></pre></div><p>This command will request four pieces of information.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This is the AWS Access Key ID of our IAM user with the relevant permissions.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This is the AWS Secret Access Key of our IAM user with the relevant permissions.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Default region name <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This can be left blank, which will default this value to <code>us-east-1</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Default output format <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This can also be left blank, which will default this value to <code>json</code>.</p>
<p>After running the command, the credentials will be stored in the AWS credentials file, located at <code>~/.aws/credentials</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>First, we&rsquo;ll create a <code>requirements.txt</code> file which will document the <a href="https://pypi.org/project/pip/">pip</a> libraries our application will be dependent upon. Run the command below.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">touch requirements.txt
</code></pre></div><p>And then add the following to this file:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">awscli
flask
zappa
</code></pre></div><p><a href="https://github.com/Miserlou/Zappa">Zappa</a> needs a virtual environment to run, which we can create like so (after running <code>pip install virtualenv</code>):</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">virtualenv venv
</code></pre></div><p>That command will create our virtual environment in a new directory named <code>venv</code>. We can activate our virtual environment with the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">source</span> venv/bin/activate
</code></pre></div><p>If we need to deactivate our virtual environment, we can do so by running the command <code>deactivate</code> or by exiting the terminal.</p>
<p>Once in the virtual environment, let&rsquo;s install the <a href="https://pypi.org/project/pip/">pip</a> libraries from our <code>requirements.txt</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pip install -r requirements.txt
</code></pre></div><p>Our Flask application will sit in a file named <code>app.py</code>, which will serve one route that will return a JSON key/value pair.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>


<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
  <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s2">&#34;response&#34;</span><span class="p">:</span> <span class="s2">&#34;Hello world&#34;</span><span class="p">})</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
  <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div><p>In order to deploy our application to AWS, we&rsquo;ll need to run a couple of Zappa commands. The following command begins an interactive process.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">zappa init
</code></pre></div><p>This will prompt us for a few different values, which we&rsquo;ll leave as their defaults.</p>
<p>The next command we&rsquo;ll run will tell Zappa to bundle and upload our application and it&rsquo;s dependencies. As part of this process, Zappa will create the necessary API gateways.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">zappa deploy dev
</code></pre></div><p>After running the above command, Zappa will return the URL where the application has been hosted. Hit this URL and we&rsquo;ll get back the following response:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;response&#34;</span><span class="p">:</span><span class="s2">&#34;Hello world&#34;</span><span class="p">}</span>
</code></pre></div><p>To remove the AWS Lambda function, and associated API gateway and Cloudwatch logs, we can run the <code>undeploy</code> command.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">zappa undeploy dev
</code></pre></div>]]></content></item><item><title>Designing Resilient APIs with Idempotency</title><link>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</link><pubDate>Sun, 02 Sep 2018 18:50:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</guid><description>How can we design APIs to be resilient when our networks necessarily aren&amp;rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&amp;rsquo;t alter the state of the system in a way that we weren&amp;rsquo;t expecting? This is where idempotence comes into play.</description><content type="html"><![CDATA[<p>How can we design APIs to be resilient when our networks necessarily aren&rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&rsquo;t alter the state of the system in a way that we weren&rsquo;t expecting? This is where <a href="https://en.wikipedia.org/wiki/Idempotence">idempotence</a> comes into play. An idempotent request is one which can be made any number of times with the guarantee that any resulting logic, or side effects, only happen once.</p>
<p>HTTP has two methods as idempotent by default, the <code>PUT</code> and <code>DELETE</code> verbs. A <code>PUT</code> request is utilised to replace an entire entity with the payload included in the request. Therefore, we can safely make a <code>PUT</code> request multiple times, safe in the knowledge that we&rsquo;ll simply overwrite an entity with the <em>same</em> contents. <code>DELETE</code> requests are similar in that if a first <code>DELETE</code> request failed, then a subsequent request would leave the system in the same intended state. Multiple successful <code>DELETE</code> requests might return different status codes in the response (<code>200</code> for the first request, <code>410</code> or <code>404</code> for the second), but again, the state of the system would remain the same. We should be careful not to interpret idempotency as <em>&ldquo;I should receive the same response from multiple identical requests&rdquo;</em> but as <em>&ldquo;The state of the system should be the same when multiple identical requests are made&rdquo;</em>.</p>
<h2 id="how-can-we-implement-idempotency-in-our-apis">How can we implement idempotency in our APIs?</h2>
<p>We&rsquo;ve identified the need to ensure that our API is capable of serving multiple identical requests under conditions of volatility, but how do we implement that in practice? One such way of dealing with such cases is through the use of <strong>idempotency keys</strong>.</p>
<p>An idempotency key is a unique token generated by the client and passed into the header of a request. When a server receives a request containing an idempotency key it stores it for potential later use. Once the server finishes handling the request, it will update the details stored against the idempotency key to mark this request as completed. If possible, the server could also store the result. If a client makes a further request containing the same idempotency key (perhaps they lost connection before the results were retrieved), the server identifies the key it stored previously and serves up the cached results, or, in scenarios where the server does not store a result, it could return a <code>409</code> status code response, detailing that a resource already exists against the idempotency key passed in the request header.</p>
<p>Let&rsquo;s take a look at these examples in more detail. Firstly, our client makes a request to create a new resource by calling our <code>POST</code> HTTP endpoint, passing an idempotency key in the header and a payload in the request body:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="nf">POST</span> <span class="nn">https://an-api/v1/resources</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="n">Idempotency-Key</span><span class="o">:</span> <span class="l">845c52a3-6b91-4358-9004-e2f94eec48fa</span>
<span class="err">{</span>
<span class="g">    &#34;first_name&#34;: &#34;Jean Luc&#34;,
</span><span class="g">    &#34;surname&#34;: &#34;Picard&#34;,
</span><span class="g">    &#34;rank&#34;: &#34;Captain&#34;
</span><span class="g">}
</span></code></pre></div><p>Server side, we create a new resource with the attributes specified in the request body and store the idempotency key and the status of the request, which is &lsquo;<code>complete</code>&rsquo;. However, the connection between the client and the server dropped, so we&rsquo;ve been unable to return a response to the client. In this case, the client retries their request, re-sending an identical idempotency key and payload. The server cross references the incoming idempotency key with those contained in storage, identifies that it is a duplicate key and returns the following response:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">409</span> <span class="ne">(Conflict)</span>
<span class="err">{</span>
<span class="g">    &#34;error&#34;: &#34;A resource has previously been created using this idempotency key&#34;
</span><span class="g">}
</span></code></pre></div><p>Let&rsquo;s re-use the above example, but consider this time that the server has stored the response it would have sent had the connection between client and server not dropped. Again, the client retries their request, re-sending the identical idempotency key and payload. The server again cross references the incoming idempotency key with those contained in storage, identifies that it is a duplicate key and returns the cached response:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">201</span> <span class="ne">(CREATED)</span>
<span class="err">{</span>
<span class="g">    &#34;message&#34;: &#34;Resource created successfully&#34;
</span><span class="g">}
</span></code></pre></div><p>In our final scenario, perhaps the server was unable to complete the request due to a failure part-way through processing. The logic and resultant behaviour here depends on how the idempotency is implemented on the server. In this situation, the server might have stored the state of the request against the idempotency key at certain points of operation, in which case upon a re-request from the client, the server can cross reference the incoming idempotency key in a re-request with those in storage and identify at which point the transaction was aborter. The server can then continue processing before sending back a response. Another implementation might be that the entire operation was rolled back via an ACID database, meaning that the server can re-process the request from scratch.</p>
<p>The server side storage of idempotency keys should be recycled periodically. We wouldn&rsquo;t expect a dropped connection re-request to happen 24 hours after the original request, so this isn&rsquo;t the kind of data which we need to store long term.</p>
<p>In a future blog post I&rsquo;ll look at a lightweight implementation of idempotency in both Flask and Django web applications.</p>
]]></content></item><item><title>Python 3.7 Data Classes</title><link>https://stuartmccoll.github.io/posts/python-3.7-data-classes/</link><pubDate>Sun, 08 Jul 2018 19:50:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/python-3.7-data-classes/</guid><description>PEP 557 in the recently-released Python 3.7 added data classes to the standard Python library. Data classes can be thought of as mutable data holders and are somewhat similar to named tuples, although named tuples are immutable.
Data classes provide a lot of boilerplate code, saving time and effort on the part of the Python programmer, although it could be argued that this layer of abstraction makes debugging more difficult.</description><content type="html"><![CDATA[<p><a href="https://www.python.org/dev/peps/pep-0557/">PEP 557</a> in the recently-released <a href="https://www.python.org/downloads/release/python-370/">Python 3.7</a> added data classes to the standard Python library. Data classes can be thought of as mutable data holders and are somewhat similar to <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple">named tuples</a>, although named tuples are immutable.</p>
<p>Data classes provide a lot of boilerplate code, saving time and effort on the part of the Python programmer, although it could be argued that this layer of abstraction makes debugging more difficult.</p>
<h2 id="comparing-regular-classes-and-data-classes">Comparing regular classes and data classes</h2>
<p>Consider the following class:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BankAccount</span><span class="p">():</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">balance</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">customer_id</span>
</code></pre></div><p>This provides us with the minimal ability to initialise a new BankAccount object, although we&rsquo;ve had to reference <code>id</code>, <code>balance</code>, and <code>customer_id</code> three times in this small piece of code.</p>
<p>Let&rsquo;s initialise two new objects using our <code>BankAccount</code> class - <code>my_account</code> and <code>your_account</code>. We&rsquo;ll initialise both with the same values, ignoring the fact that they should have different <code>id</code> and <code>customer_id</code> values, then try and compare them to each other.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>In order to be able to compare our <code>my_account</code> and <code>your_account</code> objects successfully, we&rsquo;d need to add an <code>__eq__</code> method to our class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BankAccount</span><span class="p">():</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">balance</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">customer_id</span>

  <span class="k">def</span> <span class="fm">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span> <span class="ow">is</span> <span class="n">other</span><span class="o">.</span><span class="vm">__class__</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">balance</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">balance</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">customer_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">NotImplemented</span>
</code></pre></div><p>If we initialise our two objects again and compare them now, we&rsquo;ll get the <code>True</code> response that we&rsquo;re expecting. If we were to initialise the <code>your_account</code> object with an <code>id</code> value of <code>2</code>, and a <code>customer_id</code> value of <code>2</code>, we&rsquo;d get the correct response of <code>False</code> when comparing the two objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>This all makes sense so far, but it&rsquo;s boilerplate code that we have to write each and every time that we write a new class. Let&rsquo;s take a look at how we&rsquo;d do the same thing with 3.7&rsquo;s data classes.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DataClassBankAccount</span><span class="p">():</span>
  <span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">balance</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>Data classes generate all of this boilerplate code for us, but they don&rsquo;t stop at just the <code>__init__</code> and <code>__eq__</code> methods - they can also generate <code>__repr__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> methods too, if the <code>order</code> parameter is specified as <code>True</code> (this is done at the <code>@dataclass</code> level, i.e. <code>@dataclass(order=True)</code>). Additional methods can be added to the data class as you would for a normal class. The <code>@dataclass</code> decorator inspects a class definition for fields with type annotations (added in <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>). These type annotations are <em>mandatory</em> when creating data classes as fields without type annotations will simply be ignored. We can now initialise and compare our two objects straight away:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>As mentioned in <a href="https://www.python.org/dev/peps/pep-0557/">PEP 557</a>, there isn&rsquo;t anything special about these classes. The decorator takes the class and adds generated methods to it, then returns the class it was given. This means adding your own methods to a data class is done in exactly the same way as you would for a regular class.</p>
<h2 id="comparing-named-tuples-and-data-classes">Comparing named tuples and data classes</h2>
<p>Let&rsquo;s compare for a moment our bank account data class and an implementation of the bank account using a named tuple.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">NamedTuple</span>

<span class="k">class</span> <span class="nc">NamedTupleBankAccount</span><span class="p">(</span><span class="n">NamedTuple</span><span class="p">):</span>
  <span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">balance</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>There&rsquo;s no great difference here, other than the fact that our data class was described using a decorator, whilst the named tuple subclasses <code>NamedTuple</code>. There are other similarities too. For instance, with our data class we can create a new object from an existing data class object.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">replace</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">replace</span><span class="p">(</span><span class="n">my_account</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">BankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>We&rsquo;d do this in a similar way with a named tuple, but the replace method here is proceded by an underscore, indicating that it is a private method of our named tuple bank account object.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span> <span class="o">=</span> <span class="n">NamedTupleBankAccount</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">NamedTupleBankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div><p>Data classes also provide methods for conversion to dictionaries and tuples.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">asdict</span><span class="p">,</span> <span class="n">astuple</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">asdict</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;balance&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;customer_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">astuple</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>And similarly, the <code>asdict</code> method exists as a private method of our named tuple object, with the key difference being that this returns an <code>OrderedDict</code> rather than a standard dict.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span><span class="o">.</span><span class="n">_asdict</span><span class="p">()</span>
<span class="n">OrderedDict</span><span class="p">([(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;balance&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;customer_id&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>
</code></pre></div><p>You can unpack a named tuple rather simply, but must first wrap a data class object in a call to <code>astuple</code> before it is possible to unpack - this is because data classes don&rsquo;t iterate by default.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account_id</span><span class="p">,</span> <span class="n">our_balance</span><span class="p">,</span> <span class="n">our_customer_id</span> <span class="o">=</span> <span class="n">our_account</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">our_account_id</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account_id</span><span class="p">,</span> <span class="n">my_balance</span><span class="p">,</span> <span class="n">my_customer_id</span> <span class="o">=</span> <span class="n">astuple</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account_id</span>
<span class="mi">1</span>
</code></pre></div><p>Data classes can&rsquo;t be hashed by default, whereas named tuples can - data classes actually set <code>__hash__</code> to <code>None</code> in order to avoid accidental hashability. Named tuples provide hashability and ordering out of the box, as they are inherited from tuples.</p>
<p>Equality methods between the two types are different as well. It&rsquo;s possible to compare two different named tuple objects instantiated from two different named tuple classes which happen to have the same field naming - this is because named tuples lack the <code>if self.__class__ is other.__class__:</code> conditional that data classes provide in their equality methods.</p>
<p>As of Python 3.7 it is slower to access fields of a named tuple than those of a data class, though <a href="https://twitter.com/raymondh">Raymond Hettinger</a> mentions in his PyCon 2018 talk &lsquo;<a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw">Dataclasses: The code generator to end all code generators</a>&rsquo; that this timing will be improved significantly in Python 3.8. You can find the slides for Raymond&rsquo;s PyCon talk <a href="https://twitter.com/raymondh/status/995693882812915712">here</a>.</p>
<p>You shouldn&rsquo;t think of data classes as an improvement upon a named tuple - if that&rsquo;s what fits the structure of your data, then that&rsquo;s what you should use.</p>
<h2 id="additional-data-class-usages">Additional data class usages</h2>
<h3 id="default-values">Default values</h3>
<p>We can set default values for our specified data class fields. Let&rsquo;s take a look at how we&rsquo;d do that with a normal class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="nb">type</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="n">legs</span>
</code></pre></div><p>When declaring our data class, we declare our default value(s) differently.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
  <span class="nb">type</span><span class="p">:</span> <span class="nb">str</span>
  <span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><p>The above data class will give the below output when initialising objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;dog&#34;</span><span class="p">)</span>
<span class="n">Animal</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;ostrich&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">Animal</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="s2">&#34;ostrich&#34;</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Building upon our original BankAccount class we can take a look at a more advanced default value. Let&rsquo;s say for each bank account object, we want to track who accessed the bank account and when. We&rsquo;ll create a more advanced BankAccount class that features this functionality.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclass</span> <span class="kn">import</span> <span class="n">field</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">AdvancedBankAccount</span><span class="p">():</span>
  <span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">balance</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;currency&#34;</span><span class="p">:</span> <span class="s2">&#34;GBP&#34;</span><span class="p">})</span>
  <span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
  <span class="n">accessed_by</span><span class="p">:</span> <span class="nb">list</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">access</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">accessor_id</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">accessed_by</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">accessor_id</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()))</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span> <span class="o">=</span> <span class="n">AdvancedBankAccount</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span><span class="o">.</span><span class="n">access</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span>
<span class="n">AdvancedBankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">accessed_by</span><span class="o">=</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">783467</span><span class="p">))])</span>
</code></pre></div><p>The <code>default_factory</code> is used to provide a mutable default value. Additionally, we&rsquo;ve also passed a metadata parameter which specifies some metadata about the field, in this case the currency of the <code>balance</code>. The dataclass itself won&rsquo;t do anything with this, but you can view it using the <code>fields</code> function.</p>
<h3 id="field-arguments">Field arguments</h3>
<p>We can pass some additional arguments when creating our data classes.</p>
<p>We can not include a specific field in the output of the class <code>__repr__</code> method.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
  <span class="nb">type</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="nb">repr</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><p>And we could also not include a specific field when comparing two objects from the same data class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
  <span class="nb">type</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">order</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><h3 id="immutable-data-classes">Immutable data classes</h3>
<p>Data classes are mutable by default, but there might be scenarios where we want to maintain the immutability that a named tuple offers us.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
  <span class="nb">type</span><span class="p">:</span> <span class="nb">str</span>
  <span class="n">legs</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>The <code>frozen=True</code> argument that we&rsquo;ve passed to the <code>@dataclass</code> decorator means that we won&rsquo;t be able to assign values to any objects created from this data class after their initialisation.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">cat</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">cat</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">dataclasses</span><span class="o">.</span><span class="n">FrozenInstanceError</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">assign</span> <span class="n">to</span> <span class="n">field</span> <span class="s1">&#39;legs&#39;</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0557/">PEP557</a></li>
<li><a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw">Dataclasses: The code generator to end all code generators</a></li>
</ul>
]]></content></item><item><title>GitLab Changelog Generator</title><link>https://stuartmccoll.github.io/posts/gitlab-changelog-generator/</link><pubDate>Sat, 23 Jun 2018 22:50:00 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/gitlab-changelog-generator/</guid><description>I&amp;rsquo;ve recently written a small command line utility using Python 3.6 which will produce a CHANGELOG.md file from the commit differences between two different GitLab project branches. I&amp;rsquo;ve released this as an open source Python package and it&amp;rsquo;s available from PyPi here. Not intended to be a direct replacement for writing a manual changelog, the utility should be used as a draft upon which to build.
This was a small project to trial a few things; Python&amp;rsquo;s type hinting, which was added in PEP484; Facebook Open Source&amp;rsquo;s type checker Pyre; and Black &amp;lsquo;the uncompromising Python code formatter&amp;rsquo;.</description><content type="html"><![CDATA[<p>I&rsquo;ve recently written a small command line utility using Python 3.6 which will produce a <code>CHANGELOG.md</code> file from the commit differences between two different GitLab project branches. I&rsquo;ve released this as an open source Python package and it&rsquo;s available from PyPi <a href="https://pypi.org/project/pip/">here</a>. Not intended to be a direct replacement for writing a manual changelog, the utility should be used as a draft upon which to build.</p>
<p>This was a small project to trial a few things; Python&rsquo;s type hinting, which was added in <a href="https://www.python.org/dev/peps/pep-0484/">PEP484</a>; <a href="https://opensource.fb.com/">Facebook Open Source&rsquo;s</a> type checker <a href="https://pyre-check.org/">Pyre</a>; and <a href="https://github.com/ambv/black">Black</a> &lsquo;the uncompromising Python code formatter&rsquo;.</p>
<p>If you&rsquo;re interested in using this utility, you can install it using <a href="https://pypi.org/project/pip/">pip</a> by running the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pip install gitlab-changelog-generator
</code></pre></div><p>An example command to generate a <code>CHANGELOG.md</code> file from the difference in commits between <code>master</code> and <code>release</code> branches for a locally hosted GitLab repository project named &lsquo;test-project&rsquo;, labelling the version as 1.1.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">changegen --ip localhost --group test-projects --project test-project --branches master release --version 1.1
</code></pre></div><p>I&rsquo;ve got some tidying up left to do such as better exception handling and cleaner logging, but the package works in it&rsquo;s current state. You can contribute features or towards existing issues by raising a <a href="https://help.github.com/articles/creating-a-pull-request/">pull request</a> at the project GitHub <a href="https://github.com/stuartmccoll/gitlab-changelog-generator">repository</a>.</p>
]]></content></item><item><title>Add a Flask Application to a Docker Container</title><link>https://stuartmccoll.github.io/posts/add-a-flask-application-to-a-docker-container/</link><pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/add-a-flask-application-to-a-docker-container/</guid><description>Flask is a microframework for Python, based on Werkzeug and Jinja2. The core Flask framework is extremely lightweight, albeit infinitely extensible, and it&amp;rsquo;s simple for an experienced developer to pick up. I had been using Laravel a lot at the beginning of the year and Flask has been a breeze to work with in comparison. With it&amp;rsquo;s extensibility I haven&amp;rsquo;t been locked into working with pre-defined components either; I&amp;rsquo;ve used different database abstraction layers across multiple projects, such as Redis and PostgreSQL.</description><content type="html"><![CDATA[<p><a href="http://flask.pocoo.org/">Flask</a> is a microframework for Python, based on <a href="http://werkzeug.pocoo.org/">Werkzeug</a> and <a href="http://jinja.pocoo.org/docs/2.9/">Jinja2</a>. The core Flask framework is extremely lightweight, albeit infinitely extensible, and it&rsquo;s simple for an experienced developer to pick up. I had been using Laravel a lot at the beginning of the year and Flask has been a breeze to work with in comparison. With it&rsquo;s extensibility I haven&rsquo;t been locked into working with pre-defined components either; I&rsquo;ve used different database abstraction layers across multiple projects, such as <a href="https://redis.io/">Redis</a> and <a href="https://www.postgresql.org/">PostgreSQL</a>.</p>
<p>We&rsquo;ll need a few things to begin, the first of which is a directory to house our Flask application, which we&rsquo;ll call <strong>flask_docker</strong>.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir flask_docker
</code></pre></div><p>Within this directory we&rsquo;re going to need to create two different files. Firstly, we&rsquo;ll create our Flask application. For this, I&rsquo;m going to create a simple Flask app that&rsquo;ll return a string of text when the root directory is hit within a web browser.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">simple</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;Flask running within Docker container&#39;</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">)</span>
</code></pre></div><p>With our basic Flask app written, we now want to be able to build our Docker image. We have a few options here, in that we could build from a base image of Ubuntu or something similar, but in this instance I&rsquo;m just going to use the base Python 2.7 Docker image.</p>
<div class="highlight"><pre class="chroma"><code class="language-docker" data-lang="docker"><span class="k">FROM</span><span class="s"> python:2.7</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> pip install flask<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ADD</span> . /app<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 5000</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;python&#34;</span><span class="p">,</span> <span class="s2">&#34;app.py&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>Once our base image has been established, our Dockerfile has a few more commands within it. Firstly, we&rsquo;re installing the Flask pip package (pip is included within the Python 2.7 Docker image that we our basing our own Docker image upon). After this, we copy the contents of the current directory to the &lsquo;/app&rsquo; directory within our Docker container, and then we set that as the current working directory. Following this, we expose port 5000 before lastly running the command that&rsquo;ll run our Flask application.</p>
<h2 id="building-the-docker-image">Building the Docker Image</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker build -t our-flask-app .
</code></pre></div><p>This command will build the Dockerfile within the current working directory, giving the image a name of &lsquo;our-flask-app&rsquo;.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d -p 5000:5000 our-flask-app
</code></pre></div><p>Lastly, this command builds our Docker container, which in turn runs our Flask application. The arguments we pass in here run the container in headless mode and map port 5000 on our local machine to port 5000 within our Docker container. Now, if we visit <a href="http://0.0.0.0:5000/">http://0.0.0.0:5000/</a> in a web browser we&rsquo;ll be served the string that our Flask application returns.</p>
]]></content></item><item><title>Quick and Dirty Kombu/RabbitMQ Application</title><link>https://stuartmccoll.github.io/posts/quick-and-dirty-kombu/rabbitmq-application/</link><pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate><guid>https://stuartmccoll.github.io/posts/quick-and-dirty-kombu/rabbitmq-application/</guid><description>Kombu is an open-source messaging library available for Python which aims to make messaging as simple as possible. Kombu provides a high-level interface for the Advanced Message Queuing Protocol (AMQP), an open standard protocol for message orientation, queuing, routing, reliability, and security. The most popular implementation of AMQP is the RabbitMQ open-source messaging server.
In the example application we&amp;rsquo;re going to create here, we&amp;rsquo;re going to use Kombu and RabbitMQ in combination to do the following:</description><content type="html"><![CDATA[<p><a href="https://github.com/celery/kombu">Kombu</a> is an open-source messaging library available for Python which aims to make messaging as simple as possible. Kombu provides a high-level interface for the <a href="http://amqp.org/">Advanced Message Queuing Protocol</a> (AMQP), an open standard protocol for message orientation, queuing, routing, reliability, and security. The most popular implementation of AMQP is the <a href="http://www.rabbitmq.com/">RabbitMQ</a> open-source messaging server.</p>
<p>In the example application we&rsquo;re going to create here, we&rsquo;re going to use Kombu and RabbitMQ in combination to do the following:</p>
<ul>
<li>Send a message from a Kombu application (in this case a simple Python script).</li>
<li>Receive the message at an exchange (our RabbitMQ server), which will then place the message on a queue.</li>
<li>Read from the queue within another Kombu application (in this case, another simple Python script).</li>
</ul>
<p>The application we&rsquo;re going to create will only feature one queue, one script which will fire a message at the exchange (our producer), and another script that will read from the queue as soon as it finds something on it (our consumer). It&rsquo;s a basic example, but we could build upon and utilise this for any number of uses.</p>
<h2 id="tutorial">Tutorial</h2>
<p>Let&rsquo;s begin with our script that&rsquo;ll consume messages - <code>consumer.py</code>.</p>
<p>In order to send and receive messages, we&rsquo;ll need to fulfil a few prerequisites. Firstly, we need to create a connection to our RabbitMQ server.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>
</code></pre></div><p>We&rsquo;ll use this connection in a moment when we instantiate the Consumer class. Next, we&rsquo;ll create our exchange.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>
</code></pre></div><p>The first parameter passed gives the name of our exchange and the second parameter dictates what type of exchange we&rsquo;re creating. Here, we can pass either direct (matches  if the routing_key attribute and the routing key property of the message are identical), fanout (always matches), and topic (matches the routing key property of the message by a pattern matching scheme). For this small example we&rsquo;re going to create a simple direct exchange.</p>
<p>With a connection and an exchange created, we&rsquo;re now going to create our queue. This is what we&rsquo;ll drop our messages onto before consuming them.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;queue&#34;</span><span class="p">,</span> <span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>
</code></pre></div><p>To configure our queue, we&rsquo;re simply giving it a name, passing an exchange to it, and a routing key. The routing key will be utilised based on the type of the exchange, as we&rsquo;ve set above.</p>
<p>Lastly, we need to set up our Consumer. A Consumer needs a connection (or channel) and a list of queues to consume from. We&rsquo;re also going to pass it a callback, which is a function which it&rsquo;ll call when it finds an event on our queue.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">Consumer</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">queues</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">process_message</span><span class="p">],</span> <span class="n">accept</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;text/plain&#34;</span><span class="p">]):</span>
    <span class="n">conn</span><span class="o">.</span><span class="n">drain_events</span><span class="p">()</span>
</code></pre></div><p>Our Consumer takes our connection variable, our queue, and a callback to a process_message function which we&rsquo;ll create in a moment. We&rsquo;re not passing any kind of timeout only because for this example we want it to consume messages indefinitely to give an idea of how Kombu and RabbitMQ work. I&rsquo;ll expand upon this further in future posts where I&rsquo;ll be looking at putting Kombu to a more functional use.</p>
<p>Here&rsquo;s our <code>consumer.py</code> file in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Connection</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Consumer</span><span class="p">,</span> <span class="n">Queue</span>
<span class="kn">from</span> <span class="nn">process_message</span> <span class="kn">import</span> <span class="n">process_message</span>

<span class="c1"># Create the connection</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>

<span class="c1"># Create the exchange</span>
<span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>

<span class="c1"># Create the queue</span>
<span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;queue&#34;</span><span class="p">,</span> <span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>

<span class="c1"># Create the consumer</span>
<span class="k">with</span> <span class="n">Consumer</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">queues</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">process_message</span><span class="p">],</span>
              <span class="n">accept</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;text/plain&#34;</span><span class="p">]):</span>
</code></pre></div><p>Now, to create our <code>process_message</code> function. This is going to live in it&rsquo;s own <code>process_message.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">process_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">print</span> <span class="s2">&#34;The following message has been received: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">body</span>

    <span class="c1"># Acknowledge the message</span>
    <span class="n">message</span><span class="o">.</span><span class="n">ack</span><span class="p">()</span>
</code></pre></div><p>This function receives the body and message of our event, prints a statement to the console detailing what has been received, then acknowledges the message. By acknowledging the message we remove it from the queue.</p>
<p>At this stage, we have our queue ready to put messages on, we&rsquo;ve got a consumer that&rsquo;s ready to grab messages off the queue, and we&rsquo;ve also got a function that&rsquo;s going to process the message once we&rsquo;ve taken it from the queue. The only thing left to do is to set up our producer, which is what will drop our messages onto the queue.</p>
<p>A lot of our <code>producer.py</code> file is going to look similar to our <code>consumer.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>
</code></pre></div><p>We need to set up our connection as before.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">channel</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</code></pre></div><p>Then we create and return a new channel.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>
</code></pre></div><p>We create our exchange in the same way that we did within our <code>consumer.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">producer</span> <span class="o">=</span> <span class="n">Producer</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>
</code></pre></div><p>Our instantiation of the Producer class looks similar to the way we instantiated our Consumer class. We pass in our exchange and our channel, and then we also pass in the same routing_key that we gave to our consumer. As we&rsquo;re using a direct exchange, we need to make sure that our messages are going to the same place, which is why we ensure that we pass in the same routing_key to both the producer and the consumer.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">producer</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">)</span>
</code></pre></div><p>Lastly, we call the publish method and pass through a string as our message. Whenever we run the <code>producer.py</code> script this will send our message to the exchange.</p>
<p>Here&rsquo;s our <code>producer.py</code> in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Connection</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Producer</span>

<span class="c1"># Create the connection</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>

<span class="c1"># Create a new channel</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="c1"># Create the exchange</span>
<span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>

<span class="c1"># Create the producer</span>
<span class="n">producer</span> <span class="o">=</span> <span class="n">Producer</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span>
                    <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>

<span class="c1"># Publish a message</span>
<span class="n">producer</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">)</span>
</code></pre></div><p>If we run our <code>consumer.py</code> script now, it&rsquo;ll run indefinitely and wait until it finds something on the queue we&rsquo;ve created. Now, if we run <code>producer.py</code> it&rsquo;ll fire a message at the exchange which will route it onto the queue. The already-running <code>consumer.py</code> will find it on the queue and process it, which removes it from the queue.</p>
<p>A simple example that doesn&rsquo;t do anything of use, but I hope it&rsquo;s given you an insight into the way Kombu and RabbitMQ work together.</p>
]]></content></item></channel></rss>