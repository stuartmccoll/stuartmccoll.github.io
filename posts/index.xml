<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Stuart McColl</title>
        <link>https://stuartmccoll.github.io/posts/</link>
        <description>Recent content in Posts on Stuart McColl</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 21 Sep 2020 18:08:50 +0100</lastBuildDate>
        <atom:link href="https://stuartmccoll.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Retrieving files from Microsoft Azure blob storage</title>
            <link>https://stuartmccoll.github.io/posts/2020-09-21-azure-storage-api/</link>
            <pubDate>Mon, 21 Sep 2020 18:08:50 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-09-21-azure-storage-api/</guid>
            <description>Recently on the Digital Service Design Team at The National Lottery Heritage Fund we&amp;rsquo;ve been investigating Microsoft Azure blob storage as an option for storing files as part of a service we&amp;rsquo;re building.
Before writing any code, we tested some of our assumptions about things like access and structure by calling the Microsoft Azure Storage REST API from Postman. This post documents a few of those tests using a basic Azure blob storage setup, using a Shared Key authorisation scheme to list files in a container; list files using a prefix; and to retrieve a specific file.</description>
            <content type="html"><![CDATA[<p>Recently on the Digital Service Design Team at <a href="https://www.heritagefund.org.uk/">The National Lottery Heritage Fund</a> we&rsquo;ve been investigating <a href="https://azure.microsoft.com/en-gb/services/storage/blobs/">Microsoft Azure blob storage</a> as an option for storing files as part of a service we&rsquo;re building.</p>
<p>Before writing any code, we tested some of our assumptions about things like access and structure by calling the <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/">Microsoft Azure Storage REST API</a> from <a href="https://www.postman.com">Postman</a>. This post documents a few of those tests using a basic Azure blob storage setup, using a Shared Key authorisation scheme to list files in a container; list files using a prefix; and to retrieve a specific file.</p>
<hr>
<p>To begin, let&rsquo;s make sure that we have the following in our Azure account:</p>
<ol>
<li>A Storage Account.</li>
<li>A container in our Storage Account.</li>
<li>A file in our container.</li>
</ol>
<p>In Azure, open the <strong>Storage accounts</strong> service.</p>
<p>Click on the <strong>Add</strong> button.</p>
<p>Within the <strong>Project details</strong> section, choose a <strong>Subscription</strong> to create the Storage Account within, and then either select an existing <strong>Resource group</strong> or click <strong>Create new</strong> to add a new <strong>Resource group</strong>.</p>
<p>If you run into any errors around naming Storage Accounts or containers whilst following along, don&rsquo;t worry - choose a name that works for you. Just remember to update any URIs or code from the rest of the tutorial to match the name(s) you&rsquo;ve chosen.</p>
<p>Under <strong>Instance details</strong>, let&rsquo;s go with <code>storage_account_name</code> as our <strong>Storage account name</strong>, we&rsquo;ll choose <strong>(Europe) UK South</strong> as the <strong>Location</strong>, select the <strong>Standard</strong> radio button for <strong>Performance</strong>, select <strong>BlobStorage</strong> within the <strong>Account kind</strong> dropdown and select <strong>Locally-redundant storage (LRS)</strong> within the <strong>Replication</strong> dropdown. For <strong>Blob access tier (default)</strong> we&rsquo;ll go with <strong>Hot</strong>.</p>
<p>Click the <strong>Advanced</strong> tab. Under the <strong>Security</strong> section, set <strong>Allow Blob public access</strong> to <strong>Disabled</strong>.</p>
<p>Click the <strong>Review + create</strong> button. We should see a <em>Validation passed</em> notification, and we can now go ahead and click the <strong>Create</strong> button. At this point Azure will start deploying our new Storage Account, which will take a few seconds. Once done, click the <strong>Go to resource</strong> button.</p>
<p>We&rsquo;ve now ticked off the first item in our list, so we&rsquo;re ready to move onto creating a container within our Storage Account.</p>
<p>From the navigation menu on the left, click the <strong>Containers</strong> menu item beneath the <strong>Blob service</strong> heading.</p>
<p>Click the <strong>+ Container</strong> button.</p>
<p>Let&rsquo;s go with <code>container_name</code> as our container <strong>Name</strong> - then click the <strong>Create</strong> button. It&rsquo;ll take Azure just a second to add our new container.</p>
<p>From the list of containers, select the one which we just added.</p>
<p>From this page, click the <strong>Upload</strong> button. An <strong>Upload blob</strong> pane should appear, where we can select and upload a file. Select your file - in my case I&rsquo;m uploading <code>test.txt</code>, and then click on the <strong>Upload</strong> button.</p>
<p>That&rsquo;s the end of our preparation. In our Azure account we now have a Storage Account, within which we have a single container, within which we have a single file.</p>
<hr>
<p>Our file in Azure will have a URI that looks something like:</p>
<pre><code>https://storage_account_name.blob.core.windows.net/container_name/test.txt
</code></pre><p>Because we&rsquo;ve restricted the access level to our Storage Account, we can&rsquo;t simply access this URI to retrieve our file - we&rsquo;ll need to authorise our request. To do this, we&rsquo;re going to use <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key">Shared Key authorisation</a> (authorisation with Azure Active Directory is also available).</p>
<p>Shared Key authorisation requires that we set two headers in our request; <code>x-ms-date</code> (or <code>Date</code>) and <code>Authorization</code>.</p>
<p>To start with, let&rsquo;s set Postman up so that it will send through the correct <code>x-ms-date</code> header.</p>
<p>In Postman, click the <strong>Eye</strong> (Environment quick look) icon in the top right-hand corner, then click <strong>Add</strong> in the top right-hand corner of the modal that appears. In the <strong>Environment Name</strong> field, let&rsquo;s enter <code>Microsoft Azure Storage REST API</code> and then let&rsquo;s add two empty environment variables; <code>dateHeader</code> and <code>authSig</code>. They&rsquo;re going to be initialised as empty, as we&rsquo;re going to set them programmatically when we make our API request. Click the <strong>Add</strong> button.</p>
<p>Now, let&rsquo;s create a new Postman request - choose <code>GET</code> as the HTTP method. For our URI, let&rsquo;s begin by listing the files within the container. To do so, the URI will have the following format:</p>
<pre><code>https://storage_account_name.blob.core.windows.net/container_name?restype=container&amp;comp=list
</code></pre><p>The arguments in this URI are telling Azure that we&rsquo;re providing a resource type of <code>container</code>, of which we want to <code>list</code> the contents.</p>
<p>In the <strong>Headers</strong> tab, add an <code>x-ms-date</code> header and set the value as <code>{{dateHeader}}</code>, and add an <code>Authorization</code> header with a value of <code>{{authSig}}</code>.</p>
<p>If you send the request at this point, you&rsquo;ll get back the following error:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;Error&gt;</span>
    <span class="nt">&lt;Code&gt;</span>InvalidAuthenticationInfo<span class="nt">&lt;/Code&gt;</span>
    <span class="nt">&lt;Message&gt;</span>Authentication information is not given in the correct format. Check the value of Authorization header.
RequestId:{{A_GUID}}
Time:{{TIMESTAMP}}<span class="nt">&lt;/Message&gt;</span>
<span class="nt">&lt;/Error&gt;</span>
</code></pre></div><p>That&rsquo;s because we haven&rsquo;t set our environment variables. In the <strong>Pre-request Script</strong> tab, add the following code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// Key value should contain an Access Key string taken from Microsoft Azure Storage Account
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="s2">&#34;YOUR_ACCESS_KEY&#34;</span><span class="p">;</span>

<span class="c1">// Add current timestamp to an environment variable
</span><span class="c1"></span><span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toUTCString</span><span class="p">());</span>

<span class="c1">// Create the string to sign (this needs to match exactly what the server is expecting)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">strToSign</span> <span class="o">=</span> <span class="s1">&#39;GET\n\n\n\nx-ms-date:&#39;</span> <span class="o">+</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n/storage_account_name/container_name?comp=list&#39;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Base64</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">HmacSHA256</span><span class="p">(</span><span class="nx">strToSign</span><span class="p">,</span> <span class="nx">secret</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">base64EncodedHash</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">enc</span><span class="p">.</span><span class="nx">Base64</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>

<span class="c1">// Add the string required for the Authorization header to an environment variable
</span><span class="c1"></span><span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;authSig&#34;</span><span class="p">,</span> <span class="s2">&#34;SharedKey storage_account_name:&#34;</span> <span class="o">+</span> <span class="nx">base64EncodedHash</span><span class="p">);</span>
</code></pre></div><p>Let&rsquo;s break this down:</p>
<ul>
<li>First, we&rsquo;re declaring a variable which contains an Access Key to our Storage Account</li>
<li>Then, we&rsquo;re adding the current timestamp to our <code>dateHeader</code> environment variable</li>
<li>Then, we construct the signature string, which will change based on the request you&rsquo;re making</li>
<li>Next, we encode this string by using the HMAC-SHA256 algorithm over the UTF-8-encoded signature string</li>
<li>Finally, we add this to our <code>authSig</code> environment variable.</li>
</ul>
<p>Back in Azure, open your Storage Account and open the <strong>Access keys</strong> section. Grab the <strong>Key</strong> value of <strong>key1</strong> and paste this back into Postman over the top of <code>YOUR_ACCESS_KEY</code> in the script from above.</p>
<p>Now, hit the <strong>Send</strong> button in Postman. You should receive back something similar to the following XML:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Blobs&gt;</span>
        <span class="nt">&lt;Blob&gt;</span>
            <span class="nt">&lt;Name&gt;</span>test.txt<span class="nt">&lt;/Name&gt;</span>
            <span class="nt">&lt;Properties&gt;</span>
                <span class="nt">&lt;Last-Modified&gt;</span>Fri, 18 Sep 2020 08:33:01 GMT<span class="nt">&lt;/Last-Modified&gt;</span>
                <span class="nt">&lt;Etag&gt;</span>0x8D85BAD74489912<span class="nt">&lt;/Etag&gt;</span>
                <span class="nt">&lt;Content-Length&gt;</span>28<span class="nt">&lt;/Content-Length&gt;</span>
                <span class="nt">&lt;Content-Type&gt;</span>text/plain<span class="nt">&lt;/Content-Type&gt;</span>
                <span class="nt">&lt;Content-Encoding</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Language</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-MD5&gt;</span>f10cU58khe1Nmi/4MQlCfw==<span class="nt">&lt;/Content-MD5&gt;</span>
                <span class="nt">&lt;Cache-Control</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Disposition</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;BlobType&gt;</span>BlockBlob<span class="nt">&lt;/BlobType&gt;</span>
                <span class="nt">&lt;LeaseStatus&gt;</span>unlocked<span class="nt">&lt;/LeaseStatus&gt;</span>
                <span class="nt">&lt;LeaseState&gt;</span>available<span class="nt">&lt;/LeaseState&gt;</span>
            <span class="nt">&lt;/Properties&gt;</span>
        <span class="nt">&lt;/Blob&gt;</span>
    <span class="nt">&lt;/Blobs&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Listing files using a prefix isn&rsquo;t too dissimilar. First, let&rsquo;s try with a prefix that won&rsquo;t match anything. Start with the same request as above, but this time let&rsquo;s set our request URI to:</p>
<pre><code>https://storage_account_name.blob.core.windows.net/container_name?restype=container&amp;comp=list&amp;prefix=nofileshere
</code></pre><p>We don&rsquo;t have a file in our container whose filename begins with <code>nofileshere</code>, so this won&rsquo;t bring back any matches. In this case, we don&rsquo;t need to amend the <code>strToSign</code> variable, it&rsquo;ll work as before. Hit the <strong>Send</strong> button and your response should look as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Prefix&gt;</span>nofileshere<span class="nt">&lt;/Prefix&gt;</span>
    <span class="nt">&lt;Blobs</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Change the <code>prefix</code> argument in our URI to <code>test</code> however (assuming you&rsquo;ve named your file <code>test.txt</code>) and your response should look as so:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span class="nt">&lt;EnumerationResults</span> <span class="na">ServiceEndpoint=</span><span class="s">&#34;https://storage_account_name.blob.core.windows.net/&#34;</span> <span class="na">ContainerName=</span><span class="s">&#34;container_name&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Prefix&gt;</span>test<span class="nt">&lt;/Prefix&gt;</span>
    <span class="nt">&lt;Blobs&gt;</span>
        <span class="nt">&lt;Blob&gt;</span>
            <span class="nt">&lt;Name&gt;</span>test.txt<span class="nt">&lt;/Name&gt;</span>
            <span class="nt">&lt;Properties&gt;</span>
                <span class="nt">&lt;Last-Modified&gt;</span>Fri, 18 Sep 2020 08:33:01 GMT<span class="nt">&lt;/Last-Modified&gt;</span>
                <span class="nt">&lt;Etag&gt;</span>0x8D85BAD74489912<span class="nt">&lt;/Etag&gt;</span>
                <span class="nt">&lt;Content-Length&gt;</span>28<span class="nt">&lt;/Content-Length&gt;</span>
                <span class="nt">&lt;Content-Type&gt;</span>text/plain<span class="nt">&lt;/Content-Type&gt;</span>
                <span class="nt">&lt;Content-Encoding</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Language</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-MD5&gt;</span>f10cU58khe1Nmi/4MQlCfw==<span class="nt">&lt;/Content-MD5&gt;</span>
                <span class="nt">&lt;Cache-Control</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;Content-Disposition</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;BlobType&gt;</span>BlockBlob<span class="nt">&lt;/BlobType&gt;</span>
                <span class="nt">&lt;LeaseStatus&gt;</span>unlocked<span class="nt">&lt;/LeaseStatus&gt;</span>
                <span class="nt">&lt;LeaseState&gt;</span>available<span class="nt">&lt;/LeaseState&gt;</span>
            <span class="nt">&lt;/Properties&gt;</span>
        <span class="nt">&lt;/Blob&gt;</span>
    <span class="nt">&lt;/Blobs&gt;</span>
    <span class="nt">&lt;NextMarker</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/EnumerationResults&gt;</span>
</code></pre></div><p>Finally, we want to retrieve the contents of our file. We know it&rsquo;s there, so how can we bring back what&rsquo;s inside it?</p>
<p>Change the URI in your Postman request to:</p>
<pre><code>https://storage_account_name.blob.core.windows.net/container_name/test.txt
</code></pre><p>If you try and <strong>Send</strong> this request now, it won&rsquo;t work - the hashed and encoded string we&rsquo;re sending in our <code>Authorization</code> header doesn&rsquo;t match what the server is expecting. Update the <code>strToSign</code> variable declaration in the <strong>Pre-request Script</strong> tab to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">strToSign</span> <span class="o">=</span> <span class="s1">&#39;GET\n\n\n\nx-ms-date:&#39;</span> <span class="o">+</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;dateHeader&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n/storage_account_name/container_name/test.txt&#39;</span><span class="p">;</span>
</code></pre></div><p>What you get in response will depend on the file you&rsquo;ve added - in my case, it&rsquo;s a <code>.txt</code> file containing <code>These are my file contents</code>, which is exactly what gets returned in Postman&rsquo;s response body output.</p>
]]></content>
        </item>
        
        <item>
            <title>Enabling the GitHub Secret Profile README.md</title>
            <link>https://stuartmccoll.github.io/posts/2020-07-16-github-secret-repository-readme/</link>
            <pubDate>Thu, 16 Jul 2020 18:00:00 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-07-16-github-secret-repository-readme/</guid>
            <description>People on Twitter have recently discovered a GitHub secret. If you create a new GitHub repository with the same name as your profile name, you can add a README.md to your GitHub profile 1.
How to create a GitHub profile README.md   Create a new GitHub repository. You&amp;rsquo;ll see two mandatory options when creating your repository - the &amp;lsquo;Owner&amp;rsquo; dropdown field and the &amp;lsquo;Repository name&amp;rsquo; input field. Ensure that the &amp;lsquo;Repository name&amp;rsquo; value is the same as the value in the &amp;lsquo;Owner&amp;rsquo; dropdown field.</description>
            <content type="html"><![CDATA[<p>People on Twitter have recently discovered a GitHub <em>secret</em>. If you create a new GitHub repository with the same name as your profile name, you can add a <code>README.md</code> to your GitHub profile <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="how-to-create-a-github-profile-readmemd">How to create a GitHub profile <code>README.md</code></h2>
<ol>
<li>
<p><a href="https://www.github.com/new">Create a new GitHub repository</a>. You&rsquo;ll see two mandatory options when creating your repository - the &lsquo;<strong>Owner</strong>&rsquo; dropdown field and the &lsquo;<strong>Repository name</strong>&rsquo; input field. Ensure that the &lsquo;<strong>Repository name</strong>&rsquo; value is the same as the value in the &lsquo;<strong>Owner</strong>&rsquo; dropdown field. At the time of writing this feature hasn&rsquo;t rolled out to all users - if it&rsquo;s been enabled for you, you&rsquo;ll see a message displayed beginning &lsquo;You found a secret&rsquo;.</p>
</li>
<li>
<p>Check the &lsquo;<strong>Initialise this repository with a README</strong>&rsquo; checkbox.</p>
</li>
<li>
<p>Click the &lsquo;<strong>Create repository</strong>&rsquo; button.</p>
</li>
<li>
<p>After GitHub creates your repository, you&rsquo;ll be dropped into a view of the default template <code>README.md</code>. Click to edit it and add your own information using markdown <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
</li>
<li>
<p>Commit your changes.</p>
</li>
<li>
<p>Navigate to your own profile page to check it out.</p>
</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>You can see my own <code>README.md</code> on <a href="https://github.com/stuartmccoll">my GitHub profile</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>For tips on writing markdown check out <a href="https://www.markdownguide.org">the Markdown Guide</a>. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Attaching to list items with the Microsoft SharePoint REST API</title>
            <link>https://stuartmccoll.github.io/posts/2020-06-22-attaching-to-list-items-with-sharepoint-rest-api/</link>
            <pubDate>Mon, 22 Jun 2020 16:00:48 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-06-22-attaching-to-list-items-with-sharepoint-rest-api/</guid>
            <description>In my last blog post I explained how to create list items with Microsoft&amp;rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to attach a file to an existing list item.
 Assuming you&amp;rsquo;ve been following along, we have a SharePoint list with at least one item in it that we&amp;rsquo;ve created through a request sent from Postman to the Microsoft SharePoint REST API. The item we created will have been assigned an id within SharePoint.</description>
            <content type="html"><![CDATA[<p>In my <a href="../2020-06-18-creating-list-items-with-sharepoint-rest-api">last blog post</a> I explained how to create list items with Microsoft&rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to attach a file to an existing list item.</p>
<hr>
<p>Assuming you&rsquo;ve been following along, we have a SharePoint list with at least one item in it that we&rsquo;ve created through a request sent from Postman to the Microsoft SharePoint REST API. The item we created will have been assigned an <code>id</code> within SharePoint. If you don&rsquo;t still have the response from our creation request to hand (which will have contained the ID in the response body), you can obtain it from SharePoint. Access the list item and then click the &lsquo;Copy Link&rsquo; shortcut. A URL will be copied to your clipboard which looks like the following:</p>
<pre><code>https://contoso.sharepoint.com/Lists/Test%20list/DispForm.aspx?ID=1&amp;e=...
</code></pre><p>The <code>id</code> we need is right there in the URL, within the <code>ID</code> parameter.</p>
<p>Let&rsquo;s add an attachment to this list item. Open a new Postman request, which we&rsquo;ll be sending as a <code>POST</code>. Use the following details, where <code>contoso</code> is replaced with your own tenant name, <code>Test list</code> is replaced with your own SharePoint list name, and <code>id</code> with your own list item identifier as discussed above:</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">POST https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items(1)/AttachmentFiles/add(FileName=&#39;microsoft-logo.jpg&#39;)
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span></code></pre></div><p>We&rsquo;re going to do something different this time. Select the &lsquo;Body&rsquo; tab and then the &lsquo;binary&rsquo; radio button. You should see a &lsquo;Select File&rsquo; button. We&rsquo;re going to upload the following image as our attachment:</p>
<p><img src="/img/microsoft-logo.jpg" alt="Microsoft logo"></p>
<p>Click the &lsquo;Select File&rsquo; button and then select the <code>microsoft-logo.jpg</code> file. Now click &lsquo;Send&rsquo; to send our <code>POST</code> request to the SharePoint REST API. You should receive a <code>200</code> HTTP status code in response, with an XML response body. The XML will contain some details about the attachment, such as the server relative path, etc. If you now browse to your list item within SharePoint you should be able to see that we&rsquo;ve successfully attached our file.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating list items with the Microsoft SharePoint REST API</title>
            <link>https://stuartmccoll.github.io/posts/2020-06-18-creating-list-items-with-sharepoint-rest-api/</link>
            <pubDate>Thu, 18 Jun 2020 19:30:00 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-06-18-creating-list-items-with-sharepoint-rest-api/</guid>
            <description>In my last blog post I explained how to authenticate requests to Microsoft&amp;rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to store our access token as a Postman environment variable and to then send POST requests to the SharePoint REST API to create new items within an existing SharePoint list.
 If you were following along previously, the last thing we did was to request an access token to use in future requests.</description>
            <content type="html"><![CDATA[<p>In my <a href="../2020-06-16-sharepoint-api-authentication-with-postman">last blog post</a> I explained how to authenticate requests to Microsoft&rsquo;s legacy SharePoint REST API using Postman. This post builds on that work to store our access token as a Postman environment variable and to then send <code>POST</code> requests to the SharePoint REST API to create new items within an existing SharePoint list.</p>
<hr>
<p>If you were following along previously, the last thing we did was to request an access token to use in future requests. We&rsquo;re going to write a couple of lines of JavaScript code within Postman which will parse the API response containing the access token and add it to our previously-created Postman environment.</p>
<p>You should still have a Postman tab open ready to send a request to the following URL:</p>
<pre><code>https://accounts.accesscontrol.windows.net/{{realm}}/tokens/OAuth/2
</code></pre><p>Click on the &lsquo;Tests&rsquo; tab. In the empty window, add the following two lines of code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">json_response_body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">);</span>
<span class="nx">postman</span><span class="p">.</span><span class="nx">setEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;appReg_bearerToken&#34;</span><span class="p">,</span> <span class="nx">json_response_body</span><span class="p">.</span><span class="nx">access_token</span><span class="p">);</span>
</code></pre></div><p>Click &lsquo;Send&rsquo; to send our <code>POST</code> request. You should receive a response body containing an <code>access_token</code> key/value pair. The value of the <code>access_token</code> key will now have been added as the &lsquo;Current Value&rsquo; of our <code>appReg_bearerToken</code> Postman environment variable. You can confirm this by clicking the eye icon next to the environments dropdown and checking the environment variable values.</p>
<p>We&rsquo;re now ready to create a new item within an existing SharePoint list. To do so, we need to know the <code>ListItemEntityTypeFullName</code> of the list. Let&rsquo;s open a new request in Postman, which we&rsquo;re going to send to the following URL (replacing <code>contoso</code> with your tenant name, and &lsquo;Test list&rsquo; with your own list name):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">GET https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)?$select=ListItemEntityTypeFullName
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=nometadata
</span></code></pre></div><p>Before sending, let&rsquo;s add a test to this Postman request which will grab the <code>ListItemEntityTypeFullName</code> value and store it as a Postman environment variable. Click the &lsquo;Tests&rsquo; tab and in the empty window add the following two lines of code:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">json_response_body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">);</span>
<span class="nx">postman</span><span class="p">.</span><span class="nx">setEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;ListItemEntityTypeFullName&#34;</span><span class="p">,</span> <span class="nx">json_response_body</span><span class="p">.</span><span class="nx">ListItemEntityTypeFullName</span><span class="p">);</span>
</code></pre></div><p>You should receive a response body which looks something like the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;ListItemEntityTypeFullName&#34;</span><span class="p">:</span> <span class="s2">&#34;SP.Data.Test_x0020_listListItem&#34;</span>
<span class="p">}</span>
</code></pre></div><p>The value of the <code>ListItemEntityTypeFullName</code> key will now have been added as the &lsquo;Current Value&rsquo; of our <code>ListItemEntityTypeFullName</code> Postman environment variable. You can confirm this by clicking the eye icon next to the environments dropdown and checking the environment variable values.</p>
<p>We&rsquo;re now ready to create our test item in our existing SharePoint list. Open a new Postman request, which we&rsquo;ll be sending as a <code>POST</code>. Use the following details, where <code>contoso</code> is replaced with your own tenant name and &lsquo;Test list&rsquo; is replaced with your own SharePoint list name (note the <strong>double</strong> underscore before <code>metadata</code>):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">POST https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=verbose
</span><span class="err">Content-Type: application/json;odata=verbose
</span><span class="err">
</span><span class="err">{
</span><span class="err">    &#34;__metadata&#34;: {
</span><span class="err">        &#34;type&#34;: &#34;{{ListItemEntityTypeFullName}}&#34;
</span><span class="err">    },
</span><span class="err">    &#34;Title&#34;: &#34;My test item&#34;
</span><span class="err">}
</span></code></pre></div><p>Send this request and you should receive a <code>201</code> status code in response, as well as a lengthy response body. Check your SharePoint list and you should see that the item has been successfully created.</p>
<p>We can also use the API to retrieve this item. Create a new Postman request and send the following (replacing <code>contoso</code> with your own tenant name, &lsquo;Test list&rsquo; with your own list name and <code>1</code> with the id you will have received in the previous response body after creating your item):</p>
<div class="highlight"><pre class="chroma"><code class="language-http" data-lang="http"><span class="err">GET https://contoso.sharepoint.com/_api/web/lists/GetByTitle(&#39;Test list&#39;)/items(1)
</span><span class="err">Authorization: Bearer {{appReg_bearerToken}}
</span><span class="err">Accept: application/json;odata=verbose
</span></code></pre></div><p>You should receive a <code>200</code> status code in response, as well as a response body containing your chosen SharePoint list item.</p>
<p>In my next blog post I&rsquo;ll look at how we can use the SharePoint REST API to add attachments to our list items.</p>
]]></content>
        </item>
        
        <item>
            <title>Microsoft SharePoint API Access with Postman</title>
            <link>https://stuartmccoll.github.io/posts/2020-06-16-sharepoint-api-authentication-with-postman/</link>
            <pubDate>Tue, 16 Jun 2020 21:30:00 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-06-16-sharepoint-api-authentication-with-postman/</guid>
            <description>Microsoft Graph API has largely superceded v1 of the SharePoint REST API for API-driven interaction with SharePoint online, but there are still a few things that you can&amp;rsquo;t do with it. For example, at the time of writing, it&amp;rsquo;s not possible to use Microsoft Graph API to add attachments to a list item, or retrieve attachments from an existing list item. The legacy SharePoint REST API does allow for this functionality.</description>
            <content type="html"><![CDATA[<p><a href="https://developer.microsoft.com/en-us/graph/">Microsoft Graph API</a> has largely superceded <a href="https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/get-to-know-the-sharepoint-rest-service?tabs=csom">v1 of the SharePoint REST API</a> for API-driven interaction with SharePoint online, but there are still a few things that you can&rsquo;t do with it. For example, at the time of writing, it&rsquo;s not possible to use Microsoft Graph API to add attachments to a list item, or retrieve attachments from an existing list item. The legacy SharePoint REST API <em>does</em> allow for this functionality. Authentication with the Graph API and the legacy SharePoint REST API also differs - the following acts as a tutorial for configuring interaction with the legacy SharePoint REST API using <a href="https://www.postman.com">Postman</a>.</p>
<p>For my SharePoint setup, I&rsquo;ve used a developer subscription from the <a href="https://developer.microsoft.com/en-us/microsoft-365/dev-program">Microsoft 365 Developer Program</a>. This allows me to administrate my own free SharePoint configuration, add pre-configured users from a sample data pack, and more.</p>
<hr>
<p>Ultimately, what we&rsquo;re trying to do is get an access token which will allow Postman authorised access to SharePoint. There are some steps we need to carry out first.</p>
<h2 id="register-a-sharepoint-add-in">Register a SharePoint Add-In</h2>
<p>To authorise our external system - in this case Postman, but it could also be an external application - SharePoint needs to know about it.</p>
<p>To begin, login to your SharePoint site. Then, access the following URL (where <code>contoso</code> is your own tenant name):</p>
<pre><code>https://contoso.sharepoint.com/_layouts/15/appregnew.aspx
</code></pre><p>This page allows us to register our SharePoint Add-In. You should see five input fields - <code>Client Id</code>, <code>Client Secret</code>, <code>Title</code>, <code>App Domain</code>, <code>Redirect URI</code>. Click the &lsquo;Generate&rsquo; button next to both &lsquo;Client Id&rsquo; and &lsquo;Client Secret&rsquo;, then make a note of the values populated - we&rsquo;ll need these later. You can enter anything in &lsquo;Title&rsquo; - we&rsquo;ll go with &lsquo;Postman&rsquo; for now. &lsquo;App Domain&rsquo; should be <code>localhost</code> and &lsquo;Redirect URI&rsquo; should be <code>https://localhost</code>. Click the &lsquo;Create&rsquo; button. You should see a success message returned, with the information you added to the input fields.</p>
<h2 id="grant-permissions-to-a-sharepoint-add-in">Grant permissions to a SharePoint Add-In</h2>
<p>Assuming you&rsquo;re still logged into your SharePoint site, access the following URL (again, where <code>contoso</code> is your own tenant name):</p>
<pre><code>https://contoso.sharepoint.com/_layouts/15/appinv.aspx
</code></pre><p>We can use this page to grant different permissions to any registered SharePoint Add-Ins. Paste the &lsquo;Client Id&rsquo; that we generated when registering our Add-In into the &lsquo;App Id&rsquo; field, and then click the &lsquo;Lookup&rsquo; button. This should prepopulate the other fields on the page. However, it won&rsquo;t populate the &lsquo;Permission Request XML&rsquo; field. In this field, paste the following XML:</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;AppPermissionRequests</span> <span class="na">AllowAppOnlyPolicy=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;AppPermissionRequest</span> <span class="na">Scope=</span><span class="s">&#34;http://sharepoint/content/sitecollection/web&#34;</span> <span class="na">Right=</span><span class="s">&#34;FullControl&#34;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/AppPermissionRequests&gt;</span>
</code></pre></div><p>This will grant our Add-In full permissions on our SharePoint site. Your use case may call for more granular permissions. If that&rsquo;s the case, see <a href="https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/add-in-permissions-in-sharepoint">this Microsoft documentation</a> for details on how to adapt this XML to be more granular.</p>
<p>Once you&rsquo;re happy with the XML that will grant permissions to our SharePoint Add-In, click the &lsquo;Create&rsquo; button. You&rsquo;ll see a screen asking if you trust the Add-In - click &lsquo;Trust it&rsquo;.</p>
<h2 id="creating-a-postman-environment">Creating a Postman environment</h2>
<p>Within Postman, you&rsquo;ll see a dropdown in the top right corner of the screen containing the words <code>No Environment</code>. Next to this is an eye icon - click this to bring up a list of variables local to the environment and a list of global environment variables. Depending on your prior usage, you might see different things here. Click &lsquo;Add&rsquo; in the top right corner.</p>
<p>Enter a descriptive environment name - such as <code>Microsoft SharePoint REST API</code>. In the table below, we&rsquo;re going to add five environment variables - enter the values in the &lsquo;Initial Value&rsquo; column.</p>
<p><code>appReg_clientId</code> should contain our &lsquo;Client Id&rsquo; for our SharePoint Add-In.</p>
<p><code>appReg_clientSecret</code> should contain our &lsquo;Client Secret&rsquo; for our SharePoint Add-In.</p>
<p><code>targetHost</code> should contain <code>contoso.sharepoint.com</code> where <code>contoso</code> is your own tenant name.</p>
<p><code>principal</code> should contain <code>00000003-0000-0ff1-ce00-000000000000</code>.</p>
<p><code>realm</code> should contain your tenant ID.</p>
<p>To find your tenant ID, you can send a <code>GET</code> request to (where <code>contoso</code> is your own tenant name):</p>
<pre><code>https://contoso.sharepoint.com/_vti_bin/client.svc/
</code></pre><p>You&rsquo;ll receive a <code>System.UnauthorizedAccessException</code> in the response body, but we&rsquo;re interested in the headers here. Inside the <code>WWW-Authenticate</code> header, you&rsquo;ll see <code>Bearer realm=&quot;&lt;GUID&gt;&quot;...</code>. The GUID value is your tenant ID, which you&rsquo;ll want to set as the value of <code>realm</code> in our environment variables.</p>
<p>Be careful here to check that the &lsquo;Current Value&rsquo; column for each environment variable doesn&rsquo;t contain a new line at the end of each value. If it does, it&rsquo;ll stop us from being able to use these environment variables correctly.</p>
<p>With that done, click &lsquo;Add&rsquo; to save our Postman environment.</p>
<h2 id="requesting-an-access-token">Requesting an access token</h2>
<p>Let&rsquo;s create a new Postman request, with an HTTP method of <code>POST</code>. Our URL should be:</p>
<pre><code>https://accounts.accesscontrol.windows.net/{{realm}}/tokens/OAuth/2
</code></pre><p>The <code>{{realm}}</code> in the middle of the URL will pull from our <code>realm</code> environment variable.</p>
<p>In the &lsquo;Body&rsquo; section, select <code>x-www-form-urlencoded</code>. We&rsquo;re going to create four key/value pairs.</p>
<p><code>grant_type</code> should have a value of <code>client_credentials</code>.</p>
<p><code>client_id</code> should have a value of <code>{{appReg_clientId}}@{{realm}}</code>.</p>
<p><code>client_secret</code> should have a value of <code>{{appReg_clientSecret}}</code>.</p>
<p>Finally, <code>resource</code>, should have a value of <code>{{principal}}/{{targetHost}}@{{realm}}</code>.</p>
<p>Now, click &lsquo;Send&rsquo; and the SharePoint REST API will respond with an access token that can be used in future requests to the API. We&rsquo;ll use this in a future tutorial to create new list items with attachments.</p>
]]></content>
        </item>
        
        <item>
            <title>Fixing Azure Account Active Directory Association Error</title>
            <link>https://stuartmccoll.github.io/posts/2020-05-15-azure-account-active-directory-error/</link>
            <pubDate>Fri, 15 May 2020 20:01:32 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-05-15-azure-account-active-directory-error/</guid>
            <description>If you&amp;rsquo;ve tried to create a Microsoft Azure subscription using an existing Microsoft 365 (formerly Office 365) or Microsoft Power BI account, depending on how the account is setup you might have been redirected to this static page which displays the following error message:
   Your account belongs to a directory that cannot be associated with an Azure subscription. Please sign in with a different account.
   It&amp;rsquo;s not immediately clear what this means.</description>
            <content type="html"><![CDATA[<p>If you&rsquo;ve tried to create a Microsoft Azure subscription using an existing Microsoft 365 (formerly Office 365) or Microsoft Power BI account, depending on how the account is setup you might have been redirected to <a href="https://account.azure.com/Error/NoValidTenant/100">this static page</a> which displays the following error message:</p>
<blockquote>
<blockquote>
<blockquote>
<p>Your account belongs to a directory that cannot be associated with an Azure subscription. Please sign in with a different account.</p>
</blockquote>
</blockquote>
</blockquote>
<p>It&rsquo;s not immediately clear what this means. After a bit of research, I was able to establish that the directory referred to is an Azure Active Directory. When signing up for a Microsoft 365 or Power BI account, an unmanaged Azure Active Directory is created in the background which your account is then assigned to. The problem here is that we can&rsquo;t create an Azure subscription unless this account has the <strong>Global Administrator</strong> role within the Azure Active Directory.</p>
<p>The resolution is mentioned in <a href="https://support.microsoft.com/en-us/help/4052156/account-to-a-directory-cannot-associated-with-an-azure-subscription">this Microsoft Support page</a>. A simplified version is as follows:</p>
<ol>
<li>Head to <a href="https://portal.office.com/admintakeover">the admin takeover page</a> within the Microsoft 365 portal.</li>
<li>If you&rsquo;re not already signed in, ensure that you&rsquo;re signed in using your Microsoft 365 account, which should have the same domain as the one which you&rsquo;re receiving the Azure subscription error on. If you have a Power BI account rather than a Microsoft 365 account, then sign in using those credentials instead.</li>
<li>You&rsquo;ll be presented with an option to verify that you&rsquo;re the owner of the domain. Add the <code>TXT</code> record within the settings of your DNS. This could take up to 72 hours to propogate, depending on your DNS provider.</li>
<li>Click to verify - Azure will check that the <code>TXT</code> record exists on the domain.</li>
</ol>
<p>You should now be able to create an Azure subscription using this account.</p>
]]></content>
        </item>
        
        <item>
            <title>AppleScript for Connecting Bluetooth Devices</title>
            <link>https://stuartmccoll.github.io/posts/2020-05-02-applescript-bluetooth-devices/</link>
            <pubDate>Sat, 02 May 2020 10:50:44 +0100</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-05-02-applescript-bluetooth-devices/</guid>
            <description>Last week I wrote another AppleScript for automating a manual task I have to carry out each time I switch between my personal MacBook Pro and my work device. This time, I needed to write a script which would connect to my Bluetooth devices - a Magic Mouse, Magic Keyboard and my AirPods.
Rather than accessing the System Preferences application, which I demonstrated in my last AppleScript, this script needed to directly access the Bluetooth icon in the menu bar.</description>
            <content type="html"><![CDATA[<p>Last week I wrote another AppleScript for automating a manual task I have to carry out each time I switch between my personal MacBook Pro and my work device. This time, I needed
to write a script which would connect to my Bluetooth devices - a Magic Mouse, Magic Keyboard and my AirPods.</p>
<p>Rather than accessing the System Preferences application, which I demonstrated in <a href="/posts/2020-04-27-applescript-external-displays">my last AppleScript</a>, this script needed to directly access the Bluetooth icon in the
menu bar. If you&rsquo;re repurposing anything within this script, you&rsquo;ll need to make sure that you have the Bluetooth icon within your own menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="c">-- Subroutine to connect to Bluetooth devices</span>
<span class="c">-- @param bluetooth_devices : List(String) - the device names</span>
<span class="k">on</span> <span class="nv">connect_bluetooth_devices</span><span class="p">(</span><span class="nv">bluetooth_devices</span><span class="p">)</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="nv">connect_bluetooth_devices</span></code></pre></div>
<p>I&rsquo;ve written a <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW3">handler</a> (think &lsquo;function&rsquo;), which takes an array of Bluetooth device names. The idea here is that we&rsquo;ll pass all of the Bluetooth devices which we want
to connect to into the handler, loop through them and for each one connect to it using the Bluetooth icon in the menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nb">activate</span> <span class="nb">application</span> <span class="s2">&#34;SystemUIServer&#34;</span></code></pre></div>
<p>SystemUIServer is responsible for the system tray side of the menu bar - things like Bluetooth, Networking, Clock, etc.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;SystemUIServer&#34;</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span></code></pre></div>
<p>This is us enabling ourselves to be able to access items within the menu bar.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">set</span> <span class="nv">bluetooth_menu_bar_item</span> <span class="k">to</span> <span class="p">(</span><span class="na">menu</span> <span class="nv">bar</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="na">menu</span> <span class="nv">bar</span> <span class="mi">1</span> <span class="nb">whose</span> <span class="nv">description</span> <span class="ow">contains</span> <span class="s2">&#34;bluetooth&#34;</span><span class="p">)</span>
<span class="k">tell</span> <span class="nv">bluetooth_menu_bar_item</span>
    <span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span></code></pre></div>
<p>Here, we&rsquo;re getting the Bluetooth menu bar item and setting it to a variable.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">repeat</span> <span class="k">with</span> <span class="nv">bluetooth_device</span> <span class="k">in</span> <span class="nv">bluetooth_devices</span>

<span class="k">end</span> <span class="k">repeat</span></code></pre></div>
<p>This is the loop I mentioned earlier - we&rsquo;re looping through each item in the array, and assigning the item to the <code>bluetooth_device</code> variable.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nv">click</span>
<span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
    <span class="k">tell</span> <span class="p">(</span><span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span><span class="p">)</span>
        <span class="nv">click</span>
        <span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
            <span class="nv">click</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span>
        <span class="k">else</span>
            <span class="c">-- Exit Bluetooth menu bar item</span>
            <span class="na">key code</span> <span class="mi">53</span>
        <span class="k">end</span> <span class="k">if</span>
    <span class="k">end</span> <span class="k">tell</span>
<span class="k">end</span> <span class="k">if</span></code></pre></div>
<p>This is really the bulk of the script. We <code>click</code> the Bluetooth menu bar icon. We then check whether our <code>bluetooth_device</code> is present in the list that is displayed. If it is,
then we click the device name. If the submenu that opens contains a <code>Connect</code> option, then we click it. Otherwise, we use <code>key code 53</code> (Escape), to exit the menu.</p>
<p>After exiting our loop we hit <code>key code 53</code> one last time to ensure that we&rsquo;ve closed the Bluetooth menu.</p>
<p>We can call our handler like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nv">connect_bluetooth_devices</span><span class="p">({</span><span class="s2">&#34;Stuart’s AirPods&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Keyboard&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Mouse&#34;</span><span class="p">})</span></code></pre></div>
<p>The important thing to note here is the difference between the <code>’</code> character used in the device name string and the <code>'</code> character on your keyboard.</p>
<p>Here&rsquo;s the script in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="c">-- Connect to Bluetooth devices</span>
<span class="nv">connect_bluetooth_devices</span><span class="p">({</span><span class="s2">&#34;Stuart’s AirPods&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Keyboard&#34;</span><span class="p">,</span> <span class="s2">&#34;Stuart’s Mouse&#34;</span><span class="p">})</span>

<span class="c">-- Handler to connect to Bluetooth devices</span>
<span class="c">-- @param bluetooth_devices : List(String) - the device names</span>
<span class="k">on</span> <span class="nv">connect_bluetooth_devices</span><span class="p">(</span><span class="nv">bluetooth_devices</span><span class="p">)</span>
	<span class="nb">activate</span> <span class="nb">application</span> <span class="s2">&#34;SystemUIServer&#34;</span>
	<span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;SystemUIServer&#34;</span>
		<span class="k">set</span> <span class="nv">bluetooth_menu_bar_item</span> <span class="k">to</span> <span class="p">(</span><span class="na">menu</span> <span class="nv">bar</span> <span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="na">menu</span> <span class="nv">bar</span> <span class="mi">1</span> <span class="nb">whose</span> <span class="nv">description</span> <span class="ow">contains</span> <span class="s2">&#34;bluetooth&#34;</span><span class="p">)</span>
		<span class="k">tell</span> <span class="nv">bluetooth_menu_bar_item</span>
			<span class="k">repeat</span> <span class="k">with</span> <span class="nv">bluetooth_device</span> <span class="k">in</span> <span class="nv">bluetooth_devices</span>
				<span class="nv">click</span>
				<span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
					<span class="k">tell</span> <span class="p">(</span><span class="na">menu</span> <span class="nb">item</span> <span class="nv">bluetooth_device</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span><span class="p">)</span>
						<span class="nv">click</span>
						<span class="k">if</span> <span class="nb">exists</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span> <span class="k">then</span>
							<span class="nv">click</span> <span class="na">menu</span> <span class="nb">item</span> <span class="s2">&#34;Connect&#34;</span> <span class="k">of</span> <span class="na">menu</span> <span class="mi">1</span>
						<span class="k">else</span>
							<span class="c">-- Exit Bluetooth menu bar item</span>
							<span class="na">key code</span> <span class="mi">53</span>
						<span class="k">end</span> <span class="k">if</span>
					<span class="k">end</span> <span class="k">tell</span>
				<span class="k">end</span> <span class="k">if</span>
			<span class="k">end</span> <span class="k">repeat</span>
			<span class="c">-- Exit Bluetooth menu bar item</span>
			<span class="na">key code</span> <span class="mi">53</span>
		<span class="k">end</span> <span class="k">tell</span>
	<span class="k">end</span> <span class="k">tell</span>
<span class="k">end</span> <span class="nv">connect_bluetooth_devices</span></code></pre></div>
]]></content>
        </item>
        
        <item>
            <title>AppleScript for Configuring External Displays</title>
            <link>https://stuartmccoll.github.io/posts/2020-04-27-applescript-external-displays/</link>
            <pubDate>Mon, 27 Apr 2020 20:00:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-04-27-applescript-external-displays/</guid>
            <description>AppleScript is a scripting language bundled within all versions of macOS, which allows for scripting of elements of the operating system and compatible applications.
I&amp;rsquo;d never touched it before, but decided to try to use it to automate setting the resolutions of my external displays when switching between my personal and work MacBook Pros. Sometimes the resolutions stick when switching between the two, sometimes they don&amp;rsquo;t. Rather than have to go into System Preferences &amp;gt; Displays and set them whenever the settings don&amp;rsquo;t stick, I quite liked the idea of just running a script and having something else take care of it for me.</description>
            <content type="html"><![CDATA[<p>AppleScript is a scripting language bundled within all versions of macOS, which allows for scripting of elements of the operating system and compatible applications.</p>
<p>I&rsquo;d never touched it before, but decided to try to use it to automate setting the resolutions of my external displays when switching between my personal and work MacBook Pros.
Sometimes the resolutions stick when switching between the two, sometimes they don&rsquo;t. Rather than have to go into <code>System Preferences &gt; Displays</code> and set them whenever the
settings don&rsquo;t stick, I quite liked the idea of just running a script and having something else take care of it for me. That&rsquo;s where AppleScript comes in.</p>
<p>There are different ways of running AppleScripts - I&rsquo;m not going to cover that here. Options include running from the command line, running as a bundled application, running
from <a href="https://www.alfredapp.com">Alfred</a>, etc.</p>
<p>I managed to cobble together a sloppy script to automate setting the resolution of my displays, which I&rsquo;ll detail below. Prior warning - I haven&rsquo;t done any cleanup; there&rsquo;s
plenty that could be refactored - for example, it could be one function which you pass parameters to and call for each display you want to set. Go with it for now.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Preferences&#34;</span>
	<span class="nv">reveal</span> <span class="nv">anchor</span> <span class="s2">&#34;displaysDisplayTab&#34;</span> <span class="k">of</span> <span class="nv">pane</span> <span class="na">id</span> <span class="s2">&#34;com.apple.preference.displays&#34;</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This opens <code>System Preferences &gt; Displays</code> and then ensures that the <code>Display</code> tab is open.</p>
<p><img src="/img/20200427-display.png" alt="System Preferences > Displays"></p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;System Preferences&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="na">window</span> <span class="s2">&#34;Built-in Retina Display&#34;</span>
	<span class="k">set</span> <span class="nv">is_scaled</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
	<span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
		<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
	<span class="k">else</span>
		<span class="k">set</span> <span class="nv">scale_value</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="k">if</span> <span class="nv">scale_value</span> <span class="ow">is not</span> <span class="ow">equal to</span> <span class="mi">5</span> <span class="k">then</span>
			<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="k">end</span> <span class="k">if</span>
	<span class="k">end</span> <span class="k">if</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This is the bulk of the script, which I essentially duplicate this for both external displays. Let&rsquo;s break down what&rsquo;s happening here.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&#34;System Events&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="nv">process</span> <span class="s2">&#34;System Preferences&#34;</span> <span class="k">to</span> <span class="k">tell</span> <span class="na">window</span> <span class="s2">&#34;Built-in Retina Display&#34;</span>
<span class="p">...</span>
<span class="k">end</span> <span class="k">tell</span>
</code></pre></div><p>This <code>tell</code> block ensures that I&rsquo;m targeting the &ldquo;Built-in Retina Display&rdquo; window. I also have two separate <code>tell</code> blocks for my external displays, where instead of using
<code>tell window &quot;Built-in Retina Display&quot;</code>, I use <code>tell window &quot;U28E590 (1)&quot;</code> and <code>tell window &quot;U28E590 (2)&quot;</code>. This is what I meant about my lack of refactoring; you could easily
make this a function and pass the display name as an argument.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">set</span> <span class="nv">is_scaled</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
</code></pre></div><p>This sets the value of the &ldquo;Scaled&rdquo; radio button to a variable, which we can then check.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
		<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="s2">&#34;Scaled&#34;</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
	<span class="k">else</span>
		<span class="p">...</span>
	<span class="k">end</span> <span class="k">if</span>
</code></pre></div><p>If the &ldquo;Scaled&rdquo; radio button has a value of <code>0</code>, then that means that it hasn&rsquo;t been clicked. We click the &ldquo;Scaled&rdquo; radio button and then select the appropriate resolution
size from within the &ldquo;Scaled&rdquo; submenu. In this code example, <code>radio button 5</code> is the &ldquo;More Space&rdquo; setting.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="k">if</span> <span class="nv">is_scaled</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
		<span class="p">...</span>
	<span class="k">else</span>
		<span class="k">set</span> <span class="nv">scale_value</span> <span class="k">to</span> <span class="nv">value</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="k">if</span> <span class="nv">scale_value</span> <span class="ow">is not</span> <span class="ow">equal to</span> <span class="mi">5</span> <span class="k">then</span>
			<span class="nv">click</span> <span class="nv">radio</span> <span class="nb">button</span> <span class="mi">5</span> <span class="k">of</span> <span class="nv">radio</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">group</span> <span class="mi">1</span> <span class="k">of</span> <span class="no">tab</span> <span class="nv">group</span> <span class="mi">1</span>
		<span class="k">end</span> <span class="k">if</span>
	<span class="k">end</span> <span class="k">if</span>
</code></pre></div><p>In the <code>else</code> block, &ldquo;Scaled&rdquo; was already selected. In this case, we want to make sure that the appropriate resolution size from within the &ldquo;Scaled&rdquo; submenu is selected. Here,
we set the currently selected resolution size to the <code>scale_value</code> variable. We then check whether it&rsquo;s equal to the value we want (in this case <code>5</code>). If it isn&rsquo;t, then we set it. If it&rsquo;s already set to <code>5</code>, then we don&rsquo;t need to click it again.</p>
<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="nb">quit</span> <span class="nb">application</span> <span class="s2">&#34;System Preferences&#34;</span>
</code></pre></div><p>This line is self-explanatory.</p>
<p>And that&rsquo;s it.</p>
]]></content>
        </item>
        
        <item>
            <title>HTTP/S Redirects for AWS Route 53 Using S3</title>
            <link>https://stuartmccoll.github.io/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</link>
            <pubDate>Fri, 07 Feb 2020 20:45:35 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</guid>
            <description>I moved hosting of my domains recently from tsoHost to Amazon Web Services, as uptime on tsoHost seems to have been slowly getting worse. Rather than using disparate providers for different services, I chose AWS to sit everything under one provider.
Shifting to AWS itself was relatively easy - I&amp;rsquo;m now using Amazon WorkMail for my email service and Amazon Route 53 for DNS. The documentation for switching to both from another provider was straight forward and I was up and running within a few days.</description>
            <content type="html"><![CDATA[<p>I moved hosting of my domains recently from <a href="https://www.tsohost.com">tsoHost</a> to <a href="https://aws.amazon.com">Amazon Web Services</a>, as uptime on tsoHost seems to have been slowly getting worse. Rather than using disparate providers for different services, I chose AWS to sit everything under one provider.</p>
<p>Shifting to AWS itself was relatively easy - I&rsquo;m now using <a href="https://aws.amazon.com/workmail/">Amazon WorkMail</a> for my email service and <a href="https://aws.amazon.com/route53/">Amazon Route 53</a> for DNS. The documentation for switching to both from another provider was straight forward and I was up and running within a few days.</p>
<p>Out of the box, Route 53 doesn&rsquo;t provide the ability to redirect to sites hosted outside of AWS. It&rsquo;s achievable with the use of another Amazon service, S3 (Simple Storage Bucket).</p>
<h2 id="guide">Guide</h2>
<p>Create a new S3 bucket in the <a href="https://console.aws.amazon.com/s3/">Amazon S3 console</a>. Give it a name which matches your domain - <code>example.com</code>. Keep all of the default settings.</p>
<p>Once created, enter the &lsquo;Properties&rsquo; section of the bucket, and select &lsquo;Static Website Hosting&rsquo;. In here, select &lsquo;Redirect all request to another host name&rsquo;, which will provide you with two input fields to fill in. Add the domain to redirect to in the first, let&rsquo;s assume it&rsquo;s <code>https://www.example.net</code>, and enter one of <code>http</code> or <code>https</code> in the second, before saving.</p>
<p>In the <a href="https://console.aws.amazon.com/route53/">Route 53 console</a>, choose your matching hosted zone - in this case it&rsquo;d be <code>example.com</code>.</p>
<p>In here, create a new resource record (by clicking &lsquo;Create Record Set&rsquo;). Select a &lsquo;Record type&rsquo; of &lsquo;A - IPv4 address&rsquo;. Select the &lsquo;Alias&rsquo; option, and within &lsquo;Alias Target&rsquo;, you&rsquo;ll be provided with a list of your AWS resources which you can redirect to. Your S3 bucket will be listed under a heading of &lsquo;S3 Website Endpoints&rsquo;. Leave &lsquo;Routing Policy&rsquo; as &lsquo;Simple&rsquo; and &lsquo;Evaluate Health Target&rsquo; as &lsquo;No&rsquo;, then click &lsquo;Create&rsquo; to create the record.</p>
<p>The change might take a little bit of time to propogate. It was instant for me. You can test this by running <code>curl --head example.com</code>. This returned the following headers for my request <code>HTTP/1.1 301 Moved Permanently</code>, <code>Server: AmazonS3</code>, and <code>Location: https://www.example.net/</code>, confirming that the change had propogated.</p>
<p>To ensure redirects for both <code>example.com</code> and <code>www.example.com</code>, you&rsquo;ll want to follow the same process as above, this time creating an S3 bucket with a name of <code>www.example.com</code> and pointing another new record set for your domain at this second S3 bucket.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Design Patterns: Aggregator</title>
            <link>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</link>
            <pubDate>Mon, 17 Jun 2019 10:00:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</guid>
            <description>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.
Let&amp;rsquo;s imagine that we&amp;rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&amp;rsquo;s architecture - some services call these individually, some call all three.</description>
            <content type="html"><![CDATA[<p>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.</p>
<p>Let&rsquo;s imagine that we&rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&rsquo;s architecture - some services call these individually, some call all three.</p>
<p>The requirements for the API are that it should return simple details for a patient, a list of their allergies and a list of medication that they are currently taking.</p>
<p>Our three existing microservices are as follows:</p>
<ul>
<li><em>Existing Service #1</em> returns details about a patient - their name, age, etc.</li>
<li><em>Existing Service #2</em> returns a list of allergies that the patient has.</li>
<li><em>Existing Service #3</em> returns a list of medication that the patient is currently taking.</li>
</ul>
<p>Usually, we&rsquo;d expect an aggregator to make synchronous calls to relevant microservices, performing any necessary business logic on each result as it receives it and then packaging this up as an API endpoint for a consumer to use. This meets our requirements whilst opening up potential for re-use and decoupling.</p>
<p>Rather than increasing the number of services which call these microservices directly, we can make use of the aggregator pattern here.</p>
<p><img src="/img/aggregator-architecture.png" alt="Simple component diagram demonstrating an example of the aggregator design pattern"></p>
<p>Our new internal API will call our new aggregator microservice, which will call the three existing microservices before then pushing the necessary results back up to the internal API.</p>
<p>We can re-use our aggregator within other services which call <em>all three</em> existing services, decoupling these from direct interaction with the microservices, which will make it easier to replace one later down the line; if we want to suddenly commission a new allergies microservice, we only have to update the aggregator (and those services which don&rsquo;t call <em>all three</em> existing services).</p>
]]></content>
        </item>
        
        <item>
            <title>Deploy a Serverless Flask Application with AWS Lambda</title>
            <link>https://stuartmccoll.github.io/posts/deploy-a-serverless-flask-application-with-aws-lambda/</link>
            <pubDate>Wed, 17 Oct 2018 22:00:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/deploy-a-serverless-flask-application-with-aws-lambda/</guid>
            <description>AWS Lambda lets us run code without provisioning or managing servers, paying only for the compute time of the running code. There&amp;rsquo;s no permanent infrastructure, and the server only has a life cycle of 40 milliseconds. AWS provides automatic horizontal scaling for Lambda applications, spinning up and down as many instances as are necessary.
An open source Python library, Zappa gives us the ability to build and deploy serverless, event-driven Python applications on AWS Lambda.</description>
            <content type="html"><![CDATA[<p><a href="https://aws.amazon.com/lambda/">AWS Lambda</a> lets us run code without provisioning or managing servers, paying only for the compute time of the running code. There&rsquo;s no permanent infrastructure, and the server only has a life cycle of 40 <em>milliseconds</em>. AWS provides automatic horizontal scaling for Lambda applications, spinning up and down as many instances as are necessary.</p>
<p>An open source Python library, <a href="https://github.com/Miserlou/Zappa">Zappa</a> gives us the ability to build and deploy serverless, event-driven Python applications on <a href="https://aws.amazon.com/lambda/">AWS Lambda</a>. Zappa works out of the box with WSGI web applications, such as Flask and Django.</p>
<p>It&rsquo;s quick and easy to deploy a Python WSGI application to AWS Lambda. The below guide assumes you have an AWS account and have created an IAM user with the relevant permissions.</p>
<h3 id="configuration">Configuration</h3>
<p>With <a href="https://pypi.org/project/pip/">pip</a> installed locally, we&rsquo;ll grab the <a href="https://pypi.org/project/awscli/">awscli</a> package.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ pip install awscli
</code></pre></div><p>Once installed, the <code>aws configure</code> command will be the quickest way to configure our AWS credentials.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ aws configure
</code></pre></div><p>This command will request four pieces of information.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">AWS Access Key ID <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This is the AWS Access Key ID of our IAM user with the relevant permissions.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">AWS Secret Access Key <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This is the AWS Secret Access Key of our IAM user with the relevant permissions.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Default region name <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This can be left blank, which will default this value to <code>us-east-1</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Default output format <span class="o">[</span>None<span class="o">]</span>:
</code></pre></div><p>This can also be left blank, which will default this value to <code>json</code>.</p>
<p>After running the command, the credentials will be stored in the AWS credentials file, located at <code>~/.aws/credentials</code>.</p>
<h3 id="deployment">Deployment</h3>
<p>First, we&rsquo;ll create a <code>requirements.txt</code> file which will document the <a href="https://pypi.org/project/pip/">pip</a> libraries our application will be dependent upon. Run the command below.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ touch requirements.txt
</code></pre></div><p>And then add the following to this file:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">awscli
flask
zappa
</code></pre></div><p><a href="https://github.com/Miserlou/Zappa">Zappa</a> needs a virtual environment to run, which we can create like so (after running <code>pip install virtualenv</code>):</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ virtualenv venv
</code></pre></div><p>That command will create our virtual environment in a new directory named <code>venv</code>. We can activate our virtual environment with the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">source</span> venv/bin/activate
</code></pre></div><p>If we need to deactivate our virtual environment, we can do so by running the command <code>deactivate</code> or by exiting the terminal.</p>
<p>Once in the virtual environment, let&rsquo;s install the <a href="https://pypi.org/project/pip/">pip</a> libraries from our <code>requirements.txt</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ pip install -r requirements.txt
</code></pre></div><p>Our Flask application will sit in a file named <code>app.py</code>, which will serve one route that will return a JSON key/value pair.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>


<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
	<span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s2">&#34;response&#34;</span><span class="p">:</span> <span class="s2">&#34;Hello world&#34;</span><span class="p">})</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
	<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div><p>In order to deploy our application to AWS, we&rsquo;ll need to run a couple of Zappa commands. The following command begins an interactive process.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ zappa init
</code></pre></div><p>This will prompt us for a few different values, which we&rsquo;ll leave as their defaults.</p>
<p>The next command we&rsquo;ll run will tell Zappa to bundle and upload our application and it&rsquo;s dependencies. As part of this process, Zappa will create the necessary API gateways.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ zappa deploy dev
</code></pre></div><p>After running the above command, Zappa will return the URL where the application has been hosted. Hit this URL and we&rsquo;ll get back the following response:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;response&#34;</span><span class="p">:</span><span class="s2">&#34;Hello world&#34;</span><span class="p">}</span>
</code></pre></div><p>To remove the AWS Lambda function, and associated API gateway and Cloudwatch logs, we can run the <code>undeploy</code> command.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ zappa undeploy dev
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Designing Resilient APIs with Idempotency</title>
            <link>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</link>
            <pubDate>Sun, 02 Sep 2018 18:50:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</guid>
            <description>How can we design APIs to be resilient when our networks necessarily aren&amp;rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&amp;rsquo;t alter the state of the system in a way that we weren&amp;rsquo;t expecting? This is where idempotence comes into play.</description>
            <content type="html"><![CDATA[<p>How can we design APIs to be resilient when our networks necessarily aren&rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&rsquo;t alter the state of the system in a way that we weren&rsquo;t expecting? This is where <a href="https://en.wikipedia.org/wiki/Idempotence">idempotence</a> comes into play. An idempotent request is one which can be made any number of times with the guarantee that any resulting logic, or side effects, only happen once.</p>
<p>HTTP has two methods as idempotent by default, the <code>PUT</code> and <code>DELETE</code> verbs. A <code>PUT</code> request is utilised to replace an entire entity with the payload included in the request. Therefore, we can safely make a <code>PUT</code> request multiple times, safe in the knowledge that we&rsquo;ll simply overwrite an entity with the <em>same</em> contents. <code>DELETE</code> requests are similar in that if a first <code>DELETE</code> request failed, then a subsequent request would leave the system in the same intended state. Multiple successful <code>DELETE</code> requests might return different status codes in the response (<code>200</code> for the first request, <code>410</code> or <code>404</code> for the second), but again, the state of the system would remain the same. We should be careful not to interpret idempotency as <em>&ldquo;I should receive the same response from multiple identical requests&rdquo;</em> but as <em>&ldquo;The state of the system should be the same when multiple identical requests are made&rdquo;</em>.</p>
<h2 id="how-can-we-implement-idempotency-in-our-apis">How can we implement idempotency in our APIs?</h2>
<p>We&rsquo;ve identified the need to ensure that our API is capable of serving multiple identical requests under conditions of volatility, but how do we implement that in practice? One such way of dealing with such cases is through the use of <strong>idempotency keys</strong>.</p>
<p>An idempotency key is a unique token generated by the client and passed into the header of a request. When a server receives a request containing an idempotency key it stores it for potential later use. Once the server finishes handling the request, it will update the details stored against the idempotency key to mark this request as completed. If possible, the server could also store the result. If a client makes a further request containing the same idempotency key (perhaps they lost connection before the results were retrieved), the server identifies the key it stored previously and serves up the cached results, or, in scenarios where the server does not store a result, it could return a <code>409</code> status code response, detailing that a resource already exists against the idempotency key passed in the request header.</p>
<p>Let&rsquo;s take a look at these examples in more detail. Firstly, our client makes a request to create a new resource by calling our <code>POST</code> HTTP endpoint, passing an idempotency key in the header and a payload in the request body:</p>
<pre><code>POST https://an-api/v1/resources HTTP/1.1
Idempotency-Key: 845c52a3-6b91-4358-9004-e2f94eec48fa
{
    &quot;first_name&quot;: &quot;Jean Luc&quot;,
    &quot;surname&quot;: &quot;Picard&quot;,
    &quot;rank&quot;: &quot;Captain&quot;
}
</code></pre><p>Server side, we create a new resource with the attributes specified in the request body and store the idempotency key and the status of the request, which is &lsquo;<code>complete</code>&rsquo;. However, the connection between the client and the server dropped, so we&rsquo;ve been unable to return a response to the client. In this case, the client retries their request, re-sending an identical idempotency key and payload. The server cross references the incoming idempotency key with those contained in storage, identifies that it is a duplicate key and returns the following response:</p>
<pre><code>HTTP/1.1 409 (Conflict)
{
    &quot;error&quot;: &quot;A resource has previously been created using this idempotency key&quot;
}
</code></pre><p>Let&rsquo;s re-use the above example, but consider this time that the server has stored the response it would have sent had the connection between client and server not dropped. Again, the client retries their request, re-sending the identical idempotency key and payload. The server again cross references the incoming idempotency key with those contained in storage, identifies that it is a duplicate key and returns the cached response:</p>
<pre><code>HTTP/1.1 201 (CREATED)
{
    &quot;message&quot;: &quot;Resource created successfully&quot;
}
</code></pre><p>In our final scenario, perhaps the server was unable to complete the request due to a failure part-way through processing. The logic and resultant behaviour here depends on how the idempotency is implemented on the server. In this situation, the server might have stored the state of the request against the idempotency key at certain points of operation, in which case upon a re-request from the client, the server can cross reference the incoming idempotency key in a re-request with those in storage and identify at which point the transaction was aborter. The server can then continue processing before sending back a response. Another implementation might be that the entire operation was rolled back via an ACID database, meaning that the server can re-process the request from scratch.</p>
<p>The server side storage of idempotency keys should be recycled periodically. We wouldn&rsquo;t expect a dropped connection re-request to happen 24 hours after the original request, so this isn&rsquo;t the kind of data which we need to store long term.</p>
<p>In a future blog post I&rsquo;ll look at a lightweight implementation of idempotency in both Flask and Django web applications.</p>
]]></content>
        </item>
        
        <item>
            <title>Python 3.7 Data Classes</title>
            <link>https://stuartmccoll.github.io/posts/python-3.7-data-classes/</link>
            <pubDate>Sun, 08 Jul 2018 19:50:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/python-3.7-data-classes/</guid>
            <description>PEP 557 in the recently-released Python 3.7 added data classes to the standard Python library. Data classes can be thought of as mutable data holders and are somewhat similar to named tuples, although named tuples are immutable.
Data classes provide a lot of boilerplate code, saving time and effort on the part of the Python programmer, although it could be argued that this layer of abstraction makes debugging more difficult.</description>
            <content type="html"><![CDATA[<p><a href="https://www.python.org/dev/peps/pep-0557/">PEP 557</a> in the recently-released <a href="">Python 3.7</a> added data classes to the standard Python library. Data classes can be thought of as mutable data holders and are somewhat similar to <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple">named tuples</a>, although named tuples are immutable.</p>
<p>Data classes provide a lot of boilerplate code, saving time and effort on the part of the Python programmer, although it could be argued that this layer of abstraction makes debugging more difficult.</p>
<h2 id="comparing-regular-classes-and-data-classes">Comparing regular classes and data classes</h2>
<p>Consider the following class:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BankAccount</span><span class="p">():</span>
	<span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">balance</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">customer_id</span>
</code></pre></div><p>This provides us with the minimal ability to initialise a new BankAccount object, although we&rsquo;ve had to reference <code>id</code>, <code>balance</code>, and <code>customer_id</code> three times in this small piece of code.</p>
<p>Let&rsquo;s initialise two new objects using our <code>BankAccount</code> class - <code>my_account</code> and <code>your_account</code>. We&rsquo;ll initialise both with the same values, ignoring the fact that they should have different <code>id</code> and <code>customer_id</code> values, then try and compare them to each other.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>In order to be able to compare our <code>my_account</code> and <code>your_account</code> objects successfully, we&rsquo;d need to add an <code>__eq__</code> method to our class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BankAccount</span><span class="p">():</span>
	<span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">balance</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="nb">id</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span> <span class="o">=</span> <span class="n">customer_id</span>

	<span class="k">def</span> <span class="fm">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
		<span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span> <span class="ow">is</span> <span class="n">other</span><span class="o">.</span><span class="vm">__class__</span><span class="p">:</span>
			<span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">balance</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">customer_id</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">balance</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">customer_id</span><span class="p">)</span>
		<span class="k">return</span> <span class="bp">NotImplemented</span>
</code></pre></div><p>If we initialise our two objects again and compare them now, we&rsquo;ll get the <code>True</code> response that we&rsquo;re expecting. If we were to initialise the <code>your_account</code> object with an <code>id</code> value of <code>2</code>, and a <code>customer_id</code> value of <code>2</code>, we&rsquo;d get the correct response of <code>False</code> when comparing the two objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>This all makes sense so far, but it&rsquo;s boilerplate code that we have to write each and every time that we write a new class. Let&rsquo;s take a look at how we&rsquo;d do the same thing with 3.7&rsquo;s data classes.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DataClassBankAccount</span><span class="p">():</span>
	<span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">balance</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>Data classes generate all of this boilerplate code for us, but they don&rsquo;t stop at just the <code>__init__</code> and <code>__eq__</code> methods - they can also generate <code>__repr__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code> methods too, if the <code>order</code> parameter is specified as <code>True</code> (this is done at the <code>@dataclass</code> level, i.e. <code>@dataclass(order=True)</code>). Additional methods can be added to the data class as you would for a normal class. The <code>@dataclass</code> decorator inspects a class definition for fields with type annotations (added in <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>). These type annotations are <em>mandatory</em> when creating data classes as fields without type annotations will simply be ignored. We can now initialise and compare our two objects straight away:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">your_account</span> <span class="o">=</span> <span class="n">DataClassBankAccount</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account</span> <span class="o">==</span> <span class="n">your_account</span>
<span class="bp">False</span>
</code></pre></div><p>As mentioned in <a href="https://www.python.org/dev/peps/pep-0557/">PEP 557</a>, there isn&rsquo;t anything special about these classes. The decorator takes the class and adds generated methods to it, then returns the class it was given. This means adding your own methods to a data class is done in exactly the same way as you would for a regular class.</p>
<h2 id="comparing-named-tuples-and-data-classes">Comparing named tuples and data classes</h2>
<p>Let&rsquo;s compare for a moment our bank account data class and an implementation of the bank account using a named tuple.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">NamedTuple</span>

<span class="k">class</span> <span class="nc">NamedTupleBankAccount</span><span class="p">(</span><span class="n">NamedTuple</span><span class="p">):</span>
	<span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">balance</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>There&rsquo;s no great difference here, other than the fact that our data class was described using a decorator, whilst the named tuple subclasses <code>NamedTuple</code>. There are other similarities too. For instance, with our data class we can create a new object from an existing data class object.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">replace</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">replace</span><span class="p">(</span><span class="n">my_account</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">BankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>We&rsquo;d do this in a similar way with a named tuple, but the replace method here is proceded by an underscore, indicating that it is a private method of our named tuple bank account object.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span> <span class="o">=</span> <span class="n">NamedTupleBankAccount</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="n">NamedTupleBankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div><p>Data classes also provide methods for conversion to dictionaries and tuples.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">asdict</span><span class="p">,</span> <span class="n">astuple</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">asdict</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;balance&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;customer_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">astuple</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>And similarly, the <code>asdict</code> method exists as a private method of our named tuple object, with the key difference being that this returns an <code>OrderedDict</code> rather than a standard dict.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account</span><span class="o">.</span><span class="n">_asdict</span><span class="p">()</span>
<span class="n">OrderedDict</span><span class="p">([(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;balance&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;customer_id&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)])</span>
</code></pre></div><p>You can unpack a named tuple rather simply, but must first wrap a data class object in a call to <code>astuple</code> before it is possible to unpack - this is because data classes don&rsquo;t iterate by default.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">our_account_id</span><span class="p">,</span> <span class="n">our_balance</span><span class="p">,</span> <span class="n">our_customer_id</span> <span class="o">=</span> <span class="n">our_account</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">our_account_id</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account_id</span><span class="p">,</span> <span class="n">my_balance</span><span class="p">,</span> <span class="n">my_customer_id</span> <span class="o">=</span> <span class="n">astuple</span><span class="p">(</span><span class="n">my_account</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">my_account_id</span>
<span class="mi">1</span>
</code></pre></div><p>Data classes can&rsquo;t be hashed by default, whereas named tuples can - data classes actually set <code>__hash__</code> to <code>None</code> in order to avoid accidental hashability. Named tuples provide hashability and ordering out of the box, as they are inherited from tuples.</p>
<p>Equality methods between the two types are different as well. It&rsquo;s possible to compare two different named tuple objects instantiated from two different named tuple classes which happen to have the same field naming - this is because named tuples lack the <code>if self.__class__ is other.__class__:</code> conditional that data classes provide in their equality methods.</p>
<p>As of Python 3.7 it is slower to access fields of a named tuple than those of a data class, though <a href="https://twitter.com/raymondh">Raymond Hettinger</a> mentions in his PyCon 2018 talk &lsquo;<a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw">Dataclasses: The code generator to end all code generators</a>&rsquo; that this timing will be improved significantly in Python 3.8. You can find the slides for Raymond&rsquo;s PyCon talk <a href="https://twitter.com/raymondh/status/995693882812915712">here</a>.</p>
<p>You shouldn&rsquo;t think of data classes as an improvement upon a named tuple - if that&rsquo;s what fits the structure of your data, then that&rsquo;s what you should use.</p>
<h2 id="additional-data-class-usages">Additional data class usages</h2>
<h3 id="default-values">Default values</h3>
<p>We can set default values for our specified data class fields. Let&rsquo;s take a look at how we&rsquo;d do that with a normal class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
	<span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="nb">type</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="n">legs</span>
</code></pre></div><p>When declaring our data class, we declare our default value(s) differently.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>
	<span class="nb">type</span><span class="p">:</span> <span class="nb">str</span>
	<span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><p>The above data class will give the below output when initialising objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;dog&#34;</span><span class="p">)</span>
<span class="n">Animal</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="s2">&#34;dog&#34;</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;ostrich&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">Animal</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="s2">&#34;ostrich&#34;</span><span class="p">,</span> <span class="n">legs</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div><p>Building upon our original BankAccount class we can take a look at a more advanced default value. Let&rsquo;s say for each bank account object, we want to track who accessed the bank account and when. We&rsquo;ll create a more advanced BankAccount class that features this functionality.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclass</span> <span class="kn">import</span> <span class="n">field</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">AdvancedBankAccount</span><span class="p">():</span>
	<span class="nb">id</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">balance</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;currency&#34;</span><span class="p">:</span> <span class="s2">&#34;GBP&#34;</span><span class="p">})</span>
	<span class="n">customer_id</span><span class="p">:</span> <span class="nb">int</span>
	<span class="n">accessed_by</span><span class="p">:</span> <span class="nb">list</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

	<span class="k">def</span> <span class="nf">access</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">accessor_id</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">accessed_by</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">accessor_id</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()))</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span> <span class="o">=</span> <span class="n">AdvancedBankAccount</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span><span class="o">.</span><span class="n">access</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">advanced_account</span>
<span class="n">AdvancedBankAccount</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">customer_id</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">accessed_by</span><span class="o">=</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">783467</span><span class="p">))])</span>
</code></pre></div><p>The <code>default_factory</code> is used to provide a mutable default value. Additionally, we&rsquo;ve also passed a metadata parameter which specifies some metadata about the field, in this case the currency of the <code>balance</code>. The dataclass itself won&rsquo;t do anything with this, but you can view it using the <code>fields</code> function.</p>
<h3 id="field-arguments">Field arguments</h3>
<p>We can pass some additional arguments when creating our data classes.</p>
<p>We can not include a specific field in the output of the class <code>__repr__</code> method.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
	<span class="nb">type</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="nb">repr</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
	<span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><p>And we could also not include a specific field when comparing two objects from the same data class.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
	<span class="nb">type</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">field</span><span class="p">(</span><span class="n">order</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
	<span class="n">legs</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><h3 id="immutable-data-classes">Immutable data classes</h3>
<p>Data classes are mutable by default, but there might be scenarios where we want to maintain the immutability that a named tuple offers us.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">field</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Animal</span><span class="p">():</span>
	<span class="nb">type</span><span class="p">:</span> <span class="nb">str</span>
	<span class="n">legs</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div><p>The <code>frozen=True</code> argument that we&rsquo;ve passed to the <code>@dataclass</code> decorator means that we won&rsquo;t be able to assign values to any objects created from this data class after their initialisation.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">cat</span> <span class="o">=</span> <span class="n">Animal</span><span class="p">(</span><span class="s2">&#34;cat&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">cat</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">dataclasses</span><span class="o">.</span><span class="n">FrozenInstanceError</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">assign</span> <span class="n">to</span> <span class="n">field</span> <span class="s1">&#39;legs&#39;</span>
</code></pre></div><h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0557/">PEP557</a></li>
<li><a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw">Dataclasses: The code generator to end all code generators</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>GitLab Changelog Generator</title>
            <link>https://stuartmccoll.github.io/posts/gitlab-changelog-generator/</link>
            <pubDate>Sat, 23 Jun 2018 22:50:00 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/gitlab-changelog-generator/</guid>
            <description>I&amp;rsquo;ve recently written a small command line utility using Python 3.6 which will produce a CHANGELOG.md file from the commit differences between two different GitLab project branches. I&amp;rsquo;ve released this as an open source Python package and it&amp;rsquo;s available from PyPi here. Not intended to be a direct replacement for writing a manual changelog, the utility should be used as a draft upon which to build.
This was a small project to trial a few things; Python&amp;rsquo;s type hinting, which was added in PEP484; Facebook Open Source&amp;rsquo;s type checker Pyre; and Black &amp;lsquo;the uncompromising Python code formatter&amp;rsquo;.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve recently written a small command line utility using Python 3.6 which will produce a <code>CHANGELOG.md</code> file from the commit differences between two different GitLab project branches. I&rsquo;ve released this as an open source Python package and it&rsquo;s available from PyPi <a href="https://pypi.org/project/pip/">here</a>. Not intended to be a direct replacement for writing a manual changelog, the utility should be used as a draft upon which to build.</p>
<p>This was a small project to trial a few things; Python&rsquo;s type hinting, which was added in <a href="https://www.python.org/dev/peps/pep-0484/">PEP484</a>; <a href="https://opensource.fb.com/">Facebook Open Source&rsquo;s</a> type checker <a href="https://pyre-check.org/">Pyre</a>; and <a href="https://github.com/ambv/black">Black</a> &lsquo;the uncompromising Python code formatter&rsquo;.</p>
<p>If you&rsquo;re interested in using this utility, you can install it using <a href="https://pypi.org/project/pip/">pip</a> by running the following command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ pip install gitlab-changelog-generator
</code></pre></div><p>An example command to generate a <code>CHANGELOG.md</code> file from the difference in commits between <code>master</code> and <code>release</code> branches for a locally hosted GitLab repository project named &lsquo;test-project&rsquo;, labelling the version as 1.1.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ changegen --ip localhost --group test-projects --project test-project --branches master release --version 1.1
</code></pre></div><p>I&rsquo;ve got some tidying up left to do such as better exception handling and cleaner logging, but the package works in it&rsquo;s current state. You can contribute features or towards existing issues by raising a <a href="https://help.github.com/articles/creating-a-pull-request/">pull request</a> at the project GitHub <a href="https://github.com/stuartmccoll/gitlab-changelog-generator">repository</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Add a Flask Application to a Docker Container</title>
            <link>https://stuartmccoll.github.io/posts/add-a-flask-application-to-a-docker-container/</link>
            <pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/add-a-flask-application-to-a-docker-container/</guid>
            <description>Flask is a microframework for Python, based on Werkzeug and Jinja2. The core Flask framework is extremely lightweight, albeit infinitely extensible, and it&amp;rsquo;s simple for an experienced developer to pick up. I had been using Laravel a lot at the beginning of the year and Flask has been a breeze to work with in comparison. With it&amp;rsquo;s extensibility I haven&amp;rsquo;t been locked into working with pre-defined components either; I&amp;rsquo;ve used different database abstraction layers across multiple projects, such as Redis and PostgreSQL.</description>
            <content type="html"><![CDATA[<p><a href="http://flask.pocoo.org/">Flask</a> is a microframework for Python, based on <a href="http://werkzeug.pocoo.org/">Werkzeug</a> and <a href="http://jinja.pocoo.org/docs/2.9/">Jinja2</a>. The core Flask framework is extremely lightweight, albeit infinitely extensible, and it&rsquo;s simple for an experienced developer to pick up. I had been using Laravel a lot at the beginning of the year and Flask has been a breeze to work with in comparison. With it&rsquo;s extensibility I haven&rsquo;t been locked into working with pre-defined components either; I&rsquo;ve used different database abstraction layers across multiple projects, such as <a href="https://redis.io/">Redis</a> and <a href="https://www.postgresql.org/">PostgreSQL</a>.</p>
<p>We&rsquo;ll need a few things to begin, the first of which is a directory to house our Flask application, which we&rsquo;ll call <strong>flask_docker</strong>.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir flask_docker
</code></pre></div><p>Within this directory we&rsquo;re going to need to create two different files. Firstly, we&rsquo;ll create our Flask application. For this, I&rsquo;m going to create a simple Flask app that&rsquo;ll return a string of text when the root directory is hit within a web browser.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">simple</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;Flask running within Docker container&#39;</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">)</span>
</code></pre></div><p>With our basic Flask app written, we now want to be able to build our Docker image. We have a few options here, in that we could build from a base image of Ubuntu or something similar, but in this instance I&rsquo;m just going to use the base Python 2.7 Docker image.</p>
<div class="highlight"><pre class="chroma"><code class="language-docker" data-lang="docker"><span class="k">FROM</span><span class="s"> python:2.7</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> pip install flask<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">ADD</span> . /app<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 5000</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;python&#34;</span><span class="p">,</span> <span class="s2">&#34;app.py&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>Once our base image has been established, our Dockerfile has a few more commands within it. Firstly, we&rsquo;re installing the Flask pip package (pip is included within the Python 2.7 Docker image that we our basing our own Docker image upon). After this, we copy the contents of the current directory to the &lsquo;/app&rsquo; directory within our Docker container, and then we set that as the current working directory. Following this, we expose port 5000 before lastly running the command that&rsquo;ll run our Flask application.</p>
<h2 id="building-the-docker-image">Building the Docker Image</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ docker build -t our-flask-app .
</code></pre></div><p>This command will build the Dockerfile within the current working directory, giving the image a name of &lsquo;our-flask-app&rsquo;.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ docker run -d -p 5000:5000 our-flask-app
</code></pre></div><p>Lastly, this command builds our Docker container, which in turn runs our Flask application. The arguments we pass in here run the container in headless mode and map port 5000 on our local machine to port 5000 within our Docker container. Now, if we visit <a href="http://0.0.0.0:5000/">http://0.0.0.0:5000/</a> in a web browser we&rsquo;ll be served the string that our Flask application returns.</p>
]]></content>
        </item>
        
        <item>
            <title>Quick and Dirty Kombu/RabbitMQ Application</title>
            <link>https://stuartmccoll.github.io/posts/quick-and-dirty-kombu/rabbitmq-application/</link>
            <pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate>
            
            <guid>https://stuartmccoll.github.io/posts/quick-and-dirty-kombu/rabbitmq-application/</guid>
            <description>Kombu is an open-source messaging library available for Python which aims to make messaging as simple as possible. Kombu provides a high-level interface for the Advanced Message Queuing Protocol (AMQP), an open standard protocol for message orientation, queuing, routing, reliability, and security. The most popular implementation of AMQP is the RabbitMQ open-source messaging server.
In the example application we&amp;rsquo;re going to create here, we&amp;rsquo;re going to use Kombu and RabbitMQ in combination to do the following:</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/celery/kombu">Kombu</a> is an open-source messaging library available for Python which aims to make messaging as simple as possible. Kombu provides a high-level interface for the <a href="http://amqp.org/">Advanced Message Queuing Protocol</a> (AMQP), an open standard protocol for message orientation, queuing, routing, reliability, and security. The most popular implementation of AMQP is the <a href="http://www.rabbitmq.com/">RabbitMQ</a> open-source messaging server.</p>
<p>In the example application we&rsquo;re going to create here, we&rsquo;re going to use Kombu and RabbitMQ in combination to do the following:</p>
<ul>
<li>Send a message from a Kombu application (in this case a simple Python script).</li>
<li>Receive the message at an exchange (our RabbitMQ server), which will then place the message on a queue.</li>
<li>Read from the queue within another Kombu application (in this case, another simple Python script).</li>
</ul>
<p>The application we&rsquo;re going to create will only feature one queue, one script which will fire a message at the exchange (our producer), and another script that will read from the queue as soon as it finds something on it (our consumer). It&rsquo;s a basic example, but we could build upon and utilise this for any number of uses.</p>
<h2 id="tutorial">Tutorial</h2>
<p>Let&rsquo;s begin with our script that&rsquo;ll consume messages - <code>consumer.py</code>.</p>
<p>In order to send and receive messages, we&rsquo;ll need to fulfil a few prerequisites. Firstly, we need to create a connection to our RabbitMQ server.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>
</code></pre></div><p>We&rsquo;ll use this connection in a moment when we instantiate the Consumer class. Next, we&rsquo;ll create our exchange.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>
</code></pre></div><p>The first parameter passed gives the name of our exchange and the second parameter dictates what type of exchange we&rsquo;re creating. Here, we can pass either direct (matches  if the routing_key attribute and the routing key property of the message are identical), fanout (always matches), and topic (matches the routing key property of the message by a pattern matching scheme). For this small example we&rsquo;re going to create a simple direct exchange.</p>
<p>With a connection and an exchange created, we&rsquo;re now going to create our queue. This is what we&rsquo;ll drop our messages onto before consuming them.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;queue&#34;</span><span class="p">,</span> <span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>
</code></pre></div><p>To configure our queue, we&rsquo;re simply giving it a name, passing an exchange to it, and a routing key. The routing key will be utilised based on the type of the exchange, as we&rsquo;ve set above.</p>
<p>Lastly, we need to set up our Consumer. A Consumer needs a connection (or channel) and a list of queues to consume from. We&rsquo;re also going to pass it a callback, which is a function which it&rsquo;ll call when it finds an event on our queue.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">with</span> <span class="n">Consumer</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">queues</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">process_message</span><span class="p">],</span> <span class="n">accept</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;text/plain&#34;</span><span class="p">]):</span>
    <span class="n">conn</span><span class="o">.</span><span class="n">drain_events</span><span class="p">()</span>
</code></pre></div><p>Our Consumer takes our connection variable, our queue, and a callback to a process_message function which we&rsquo;ll create in a moment. We&rsquo;re not passing any kind of timeout only because for this example we want it to consume messages indefinitely to give an idea of how Kombu and RabbitMQ work. I&rsquo;ll expand upon this further in future posts where I&rsquo;ll be looking at putting Kombu to a more functional use.</p>
<p>Here&rsquo;s our <code>consumer.py</code> file in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Connection</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Consumer</span><span class="p">,</span> <span class="n">Queue</span>
<span class="kn">from</span> <span class="nn">process_message</span> <span class="kn">import</span> <span class="n">process_message</span>

<span class="c1"># Create the connection</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>

<span class="c1"># Create the exchange</span>
<span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>

<span class="c1"># Create the queue</span>
<span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;queue&#34;</span><span class="p">,</span> <span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>

<span class="c1"># Create the consumer</span>
<span class="k">with</span> <span class="n">Consumer</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">queues</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">process_message</span><span class="p">],</span>
              <span class="n">accept</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;text/plain&#34;</span><span class="p">]):</span>
</code></pre></div><p>Now, to create our <code>process_message</code> function. This is going to live in it&rsquo;s own <code>process_message.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">process_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">print</span> <span class="s2">&#34;The following message has been received: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">body</span>

    <span class="c1"># Acknowledge the message</span>
    <span class="n">message</span><span class="o">.</span><span class="n">ack</span><span class="p">()</span>
</code></pre></div><p>This function receives the body and message of our event, prints a statement to the console detailing what has been received, then acknowledges the message. By acknowledging the message we remove it from the queue.</p>
<p>At this stage, we have our queue ready to put messages on, we&rsquo;ve got a consumer that&rsquo;s ready to grab messages off the queue, and we&rsquo;ve also got a function that&rsquo;s going to process the message once we&rsquo;ve taken it from the queue. The only thing left to do is to set up our producer, which is what will drop our messages onto the queue.</p>
<p>A lot of our <code>producer.py</code> file is going to look similar to our <code>consumer.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>
</code></pre></div><p>We need to set up our connection as before.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">channel</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</code></pre></div><p>Then we create and return a new channel.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>
</code></pre></div><p>We create our exchange in the same way that we did within our <code>consumer.py</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">producer</span> <span class="o">=</span> <span class="n">Producer</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>
</code></pre></div><p>Our instantiation of the Producer class looks similar to the way we instantiated our Consumer class. We pass in our exchange and our channel, and then we also pass in the same routing_key that we gave to our consumer. As we&rsquo;re using a direct exchange, we need to make sure that our messages are going to the same place, which is why we ensure that we pass in the same routing_key to both the producer and the consumer.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">producer</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">)</span>
</code></pre></div><p>Lastly, we call the publish method and pass through a string as our message. Whenever we run the <code>producer.py</code> script this will send our message to the exchange.</p>
<p>Here&rsquo;s our <code>producer.py</code> in full:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Connection</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Producer</span>

<span class="c1"># Create the connection</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">Connection</span><span class="p">(</span><span class="s2">&#34;amqp://localhost:5672/&#34;</span><span class="p">)</span>

<span class="c1"># Create a new channel</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>

<span class="c1"># Create the exchange</span>
<span class="n">test_exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="s2">&#34;test_exchange&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&#34;direct&#34;</span><span class="p">)</span>

<span class="c1"># Create the producer</span>
<span class="n">producer</span> <span class="o">=</span> <span class="n">Producer</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="n">test_exchange</span><span class="p">,</span> <span class="n">channel</span><span class="o">=</span><span class="n">channel</span><span class="p">,</span>
                    <span class="n">routing_key</span><span class="o">=</span><span class="s2">&#34;test&#34;</span><span class="p">)</span>

<span class="c1"># Publish a message</span>
<span class="n">producer</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&#34;Hello World!&#34;</span><span class="p">)</span>
</code></pre></div><p>If we run our <code>consumer.py</code> script now, it&rsquo;ll run indefinitely and wait until it finds something on the queue we&rsquo;ve created. Now, if we run <code>producer.py</code> it&rsquo;ll fire a message at the exchange which will route it onto the queue. The already-running <code>consumer.py</code> will find it on the queue and process it, which removes it from the queue.</p>
<p>A simple example that doesn&rsquo;t do anything of use, but I hope it&rsquo;s given you an insight into the way Kombu and RabbitMQ work together.</p>
]]></content>
        </item>
        
    </channel>
</rss>
