<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stuart McColl</title>
    <link>/</link>
    <description>Recent content on Stuart McColl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 May 2020 10:50:44 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AppleScript for Connecting Bluetooth Devices</title>
      <link>/posts/2020-05-02-applescript-bluetooth-devices/</link>
      <pubDate>Sat, 02 May 2020 10:50:44 +0100</pubDate>
      
      <guid>/posts/2020-05-02-applescript-bluetooth-devices/</guid>
      <description>Last week I wrote another AppleScript for automating a manual task I have to carry out each time I switch between my personal MacBook Pro and my work device. This time, I needed to write a script which would connect to my Bluetooth devices - a Magic Mouse, Magic Keyboard and my AirPods.
Rather than accessing the System Preferences application, which I demonstrated in my last AppleScript, this script needed to directly access the Bluetooth icon in the menu bar.</description>
    </item>
    
    <item>
      <title>AppleScript for Configuring External Displays</title>
      <link>/posts/2020-04-27-applescript-external-displays/</link>
      <pubDate>Mon, 27 Apr 2020 20:00:00 +0000</pubDate>
      
      <guid>/posts/2020-04-27-applescript-external-displays/</guid>
      <description>AppleScript is a scripting language bundled within all versions of macOS, which allows for scripting of elements of the operating system and compatible applications.
I&amp;rsquo;d never touched it before, but decided to try to use it to automate setting the resolutions of my external displays when switching between my personal and work MacBook Pros. Sometimes the resolutions stick when switching between the two, sometimes they don&amp;rsquo;t. Rather than have to go into System Preferences &amp;gt; Displays and set them whenever the settings don&amp;rsquo;t stick, I quite liked the idea of just running a script and having something else take care of it for me.</description>
    </item>
    
    <item>
      <title>HTTP/S Redirects for AWS Route 53 Using S3</title>
      <link>/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</link>
      <pubDate>Fri, 07 Feb 2020 20:45:35 +0000</pubDate>
      
      <guid>/posts/2020-02-07-http-redirects-for-aws-route-53-using-s3/</guid>
      <description>I moved hosting of my domains recently from tsoHost to Amazon Web Services, as uptime on tsoHost seems to have been slowly getting worse. Rather than using disparate providers for different services, I chose AWS to sit everything under one provider.
Shifting to AWS itself was relatively easy - I&amp;rsquo;m now using Amazon WorkMail for my email service and Amazon Route 53 for DNS. The documentation for switching to both from another provider was straight forward and I was up and running within a few days.</description>
    </item>
    
    <item>
      <title>Weeknotes (05/07/19)</title>
      <link>/posts/weeknotes-05/07/19/</link>
      <pubDate>Sun, 14 Jul 2019 10:00:00 +0000</pubDate>
      
      <guid>/posts/weeknotes-05/07/19/</guid>
      <description>The weeknotes for this week are incredibly late, but as I&amp;rsquo;d half-written them, I think it&amp;rsquo;s probably worthwhile to finish them. For best results, pretend you&amp;rsquo;re reading these a week ago.
I feel like I&amp;rsquo;m already falling behind a little bit on my &amp;lsquo;start the week with a list of things to achieve&amp;rsquo; plan. I&amp;rsquo;ve been particularly busy at work to the point that I&amp;rsquo;ve barely looked at my list since writing it over the weekend.</description>
    </item>
    
    <item>
      <title>Weeknotes (12/07/19)</title>
      <link>/posts/weeknotes-12/07/19/</link>
      <pubDate>Sun, 14 Jul 2019 10:00:00 +0000</pubDate>
      
      <guid>/posts/weeknotes-12/07/19/</guid>
      <description>Weeknotes are harder than I anticipated. Not actually writing them, but finding the time to write them. I&amp;rsquo;m actually writing these before I&amp;rsquo;ve written the previous weeks&amp;rsquo;, which probably isn&amp;rsquo;t the approach you&amp;rsquo;re supposed to take. I&amp;rsquo;m going to try and write up a section each day next time, rather than try to do it all in one go at the end of the week.
No weeknotes next week, as I&amp;rsquo;m on annual leave ðŸŽ‰.</description>
    </item>
    
    <item>
      <title>Weeknotes (28/06/19)</title>
      <link>/posts/weeknotes-28/06/19/</link>
      <pubDate>Thu, 04 Jul 2019 10:00:00 +0000</pubDate>
      
      <guid>/posts/weeknotes-28/06/19/</guid>
      <description>Iâ€™m writing these later than Iâ€™d like to already (the Thursday of â€˜next weekâ€™, as opposed to the intended Friday of â€˜thisâ€™ week) and itâ€™s only the second week of this commitment, which goes some way to explain how busy Iâ€™ve been this week.
I started the week by writing a lighter version of my list of â€˜things to achieve this weekâ€™ â€“ three days this week were to be taken up with an off-site project kickoff session, which went really well.</description>
    </item>
    
    <item>
      <title>Weeknotes (21/06/19)</title>
      <link>/posts/weeknotes-21/06/19/</link>
      <pubDate>Wed, 26 Jun 2019 10:00:00 +0000</pubDate>
      
      <guid>/posts/weeknotes-21/06/19/</guid>
      <description>I moved into a new role semi-recently which also involved moving into a new team, which was coming to the end of the alpha phase of a project. In theory, the role shouldnâ€™t be hugely different to the one I was already fulfilling (itâ€™s an upgrade in seniority) and the differences that are there were things that I knew up front.
Software development during the alpha phase of an agile project is very different to software development during the beta phase.</description>
    </item>
    
    <item>
      <title>Microservice Design Patterns: Aggregator</title>
      <link>/posts/microservice-design-patterns-aggregator/</link>
      <pubDate>Mon, 17 Jun 2019 10:00:00 +0000</pubDate>
      
      <guid>/posts/microservice-design-patterns-aggregator/</guid>
      <description>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.
Let&amp;rsquo;s imagine that we&amp;rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&amp;rsquo;s architecture - some services call these individually, some call all three.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 06 May 2019 17:58:41 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>I&amp;rsquo;m a Senior Software Developer for the National Lottery Heritage Fund building user-centered digital services to give a rewarding, usable experience to applicants and grantees, from their first tentative look at the Fund all the way through to them being awarded funding, and becoming a grantee.
Away from the office I&amp;rsquo;m in the last year of my undergraduate degree in Computer Science with the Open University.</description>
    </item>
    
    <item>
      <title>HackTheBox Lernaen Write-Up</title>
      <link>/posts/hackthebox-lernaen-write-up/</link>
      <pubDate>Sun, 03 Feb 2019 10:10:32 +0000</pubDate>
      
      <guid>/posts/hackthebox-lernaen-write-up/</guid>
      <description>HackTheBox is an online platform for testing and advancing skills in penetration testing and cyber security. The site provides vulnerable machines as well as dedicated challenges in areas such as forensics, cryptography and web applications. The following is a write-up after completion of HackTheBox&amp;rsquo;s Lernaen web challenge.
Our instance of the challenge will be contained in a Docker container - after starting the instance you&amp;rsquo;ll be given an address, such as docker.</description>
    </item>
    
    <item>
      <title>Deploy a Serverless Flask Application with AWS Lambda</title>
      <link>/posts/deploy-a-serverless-flask-application-with-aws-lambda/</link>
      <pubDate>Wed, 17 Oct 2018 22:00:00 +0000</pubDate>
      
      <guid>/posts/deploy-a-serverless-flask-application-with-aws-lambda/</guid>
      <description>AWS Lambda lets us run code without provisioning or managing servers, paying only for the compute time of the running code. There&amp;rsquo;s no permanent infrastructure, and the server only has a life cycle of 40 milliseconds. AWS provides automatic horizontal scaling for Lambda applications, spinning up and down as many instances as are necessary.
An open source Python library, Zappa gives us the ability to build and deploy serverless, event-driven Python applications on AWS Lambda.</description>
    </item>
    
    <item>
      <title>Designing Resilient APIs with Idempotency</title>
      <link>/posts/designing-resilient-apis-with-idempotency/</link>
      <pubDate>Sun, 02 Sep 2018 18:50:00 +0000</pubDate>
      
      <guid>/posts/designing-resilient-apis-with-idempotency/</guid>
      <description>How can we design APIs to be resilient when our networks necessarily aren&amp;rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&amp;rsquo;t alter the state of the system in a way that we weren&amp;rsquo;t expecting?</description>
    </item>
    
    <item>
      <title>Python 3.7 Data Classes</title>
      <link>/posts/python-3.7-data-classes/</link>
      <pubDate>Sun, 08 Jul 2018 19:50:00 +0000</pubDate>
      
      <guid>/posts/python-3.7-data-classes/</guid>
      <description>PEP 557 in the recently-released [Python 3.7]() added data classes to the standard Python library. Data classes can be thought of as mutable data holders and are somewhat similar to named tuples, although named tuples are immutable.
Data classes provide a lot of boilerplate code, saving time and effort on the part of the Python programmer, although it could be argued that this layer of abstraction makes debugging more difficult.</description>
    </item>
    
    <item>
      <title>GitLab Changelog Generator</title>
      <link>/posts/gitlab-changelog-generator/</link>
      <pubDate>Sat, 23 Jun 2018 22:50:00 +0000</pubDate>
      
      <guid>/posts/gitlab-changelog-generator/</guid>
      <description>I&amp;rsquo;ve recently written a small command line utility using Python 3.6 which will produce a CHANGELOG.md file from the commit differences between two different GitLab project branches. I&amp;rsquo;ve released this as an open source Python package and it&amp;rsquo;s available from PyPi here. Not intended to be a direct replacement for writing a manual changelog, the utility should be used as a draft upon which to build.
This was a small project to trial a few things; Python&amp;rsquo;s type hinting, which was added in PEP484; Facebook Open Source&amp;rsquo;s type checker Pyre; and Black &amp;lsquo;the uncompromising Python code formatter&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Add a Flask Application to a Docker Container</title>
      <link>/posts/add-a-flask-application-to-a-docker-container/</link>
      <pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate>
      
      <guid>/posts/add-a-flask-application-to-a-docker-container/</guid>
      <description>Flask is a microframework for Python, based on Werkzeug and Jinja2. The core Flask framework is extremely lightweight, albeit infinitely extensible, and it&amp;rsquo;s simple for an experienced developer to pick up. I had been using Laravel a lot at the beginning of the year and Flask has been a breeze to work with in comparison. With it&amp;rsquo;s extensibility I haven&amp;rsquo;t been locked into working with pre-defined components either; I&amp;rsquo;ve used different database abstraction layers across multiple projects, such as Redis and PostgreSQL.</description>
    </item>
    
    <item>
      <title>Quick and Dirty Kombu/RabbitMQ Application</title>
      <link>/posts/quick-and-dirty-kombu/rabbitmq-application/</link>
      <pubDate>Sun, 14 May 2017 10:10:32 +0000</pubDate>
      
      <guid>/posts/quick-and-dirty-kombu/rabbitmq-application/</guid>
      <description>Kombu is an open-source messaging library available for Python which aims to make messaging as simple as possible. Kombu provides a high-level interface for the Advanced Message Queuing Protocol (AMQP), an open standard protocol for message orientation, queuing, routing, reliability, and security. The most popular implementation of AMQP is the RabbitMQ open-source messaging server.
In the example application we&amp;rsquo;re going to create here, we&amp;rsquo;re going to use Kombu and RabbitMQ in combination to do the following:</description>
    </item>
    
  </channel>
</rss>