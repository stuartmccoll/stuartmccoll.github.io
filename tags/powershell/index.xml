<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on Stuart McColl</title><link>https://stuartmccoll.github.io/tags/powershell/</link><description>Recent content in PowerShell on Stuart McColl</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 24 Jun 2023 11:30:00 +0100</lastBuildDate><atom:link href="https://stuartmccoll.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Use PowerShell to find deallocated Azure VMs</title><link>https://stuartmccoll.github.io/posts/2023-06-24-use-powershell-to-fund-deallocated-azure-vms/</link><pubDate>Sat, 24 Jun 2023 11:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-06-24-use-powershell-to-fund-deallocated-azure-vms/</guid><description>In this post, I&amp;rsquo;ll show you how to find deallocated Azure Virtual Machines using the Azure Resource Graph PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description></item><item><title>Use PowerShell to monitor system performance</title><link>https://stuartmccoll.github.io/posts/2023-05-01-use-powershell-to-monitor-system-performance/</link><pubDate>Mon, 01 May 2023 11:15:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-05-01-use-powershell-to-monitor-system-performance/</guid><description>In this post, I&amp;rsquo;ll show you how to monitor system performance using PowerShell. I&amp;rsquo;ll introduce you to a few different cmdlets and some examples of how you might use them to monitor the performance of a system.
Get-Process This cmdlet provides information about all of the running processes on a system, including their process ID, their CPU usages, and their memory usage.
You might use this cmdlet to:
Get the five processes using the most CPU: Get-Process | Sort-Object -Property CPU | Select-Object Name,CPU -Last 5.</description></item><item><title>Use Bicep to create an Azure key vault</title><link>https://stuartmccoll.github.io/posts/2023-04-23-use-bicep-to-create-a-key-vault/</link><pubDate>Sun, 23 Apr 2023 22:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-23-use-bicep-to-create-a-key-vault/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares an Azure key vault resource containing a single secret.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .bicep file I create.</description></item><item><title>Use PowerShell to find empty files</title><link>https://stuartmccoll.github.io/posts/2023-04-15-use-powershell-to-find-empty-files/</link><pubDate>Sat, 15 Apr 2023 09:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-15-use-powershell-to-find-empty-files/</guid><description>In this post, I&amp;rsquo;ll show you how to find empty files using PowerShell.
Find empty files in the current working directory The following command will retrieve empty files within the current working directory (e.g., it won&amp;rsquo;t recursively search within inner directories). It&amp;rsquo;ll return the full file path to any empty files that it finds.
Get-ChildItem -File | Where-Object { $_.PSIsContainer -eq $false -and $_.Length -eq 0 } | Select -ExpandProperty FullName We&amp;rsquo;re using the Get-ChildItem cmdlet here to retrieve a list of all files within the current working directory.</description></item><item><title>Use PowerShell to find large files</title><link>https://stuartmccoll.github.io/posts/2023-04-07-use-powershell-to-find-large-files/</link><pubDate>Fri, 07 Apr 2023 12:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-07-use-powershell-to-find-large-files/</guid><description>In this post, I&amp;rsquo;ll show you how to find large files using PowerShell.
Using the Get-ChildItem cmdlet Searching for files based on different properties can all be done using PowerShell&amp;rsquo;s built-in Get-ChildItem cmdlet.
Find the largest files within the current working directory The following command will retrieve the ten largest files within the current working directory (e.g., it won&amp;rsquo;t recursively search within inner directories). It&amp;rsquo;ll sort these ten results in descending size order, returning the file names and the file size.</description></item><item><title>Use Bicep to create an Application Insights resource</title><link>https://stuartmccoll.github.io/posts/2023-04-01-use-bicep-to-create-an-application-insights-resource/</link><pubDate>Sat, 01 Apr 2023 21:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-04-01-use-bicep-to-create-an-application-insights-resource/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares the resources required for an Application Insights instance, specifically one used to monitor a website.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .</description></item><item><title>Use PowerShell to find empty Azure resource groups</title><link>https://stuartmccoll.github.io/posts/2023-03-29-use-powershell-to-find-empty-azure-resource-groups/</link><pubDate>Wed, 29 Mar 2023 20:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-29-use-powershell-to-find-empty-azure-resource-groups/</guid><description>In this post, I&amp;rsquo;ll show you how to find and remove empty Azure resource groups using the Azure Az PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description></item><item><title>Use PowerShell to find untagged Azure resources</title><link>https://stuartmccoll.github.io/posts/2023-03-28-use-powershell-to-find-untagged-azure-resources/</link><pubDate>Tue, 28 Mar 2023 11:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-28-use-powershell-to-find-untagged-azure-resources/</guid><description>In this post, I&amp;rsquo;ll show you how to retrieve Azure resources that do not have any associated tags.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description></item><item><title>Use Bicep to create an Azure Function App</title><link>https://stuartmccoll.github.io/posts/2023-03-26-use-bicep-to-create-an-azure-function-app/</link><pubDate>Sun, 26 Mar 2023 15:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-26-use-bicep-to-create-an-azure-function-app/</guid><description>In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares the resources required for an Azure Function App.
Prerequisites I&amp;rsquo;ll be using Visual Studio Code as my editor, where I&amp;rsquo;ll be writing the .bicep file for this walkthrough. I&amp;rsquo;ll also be using the official Bicep extension.
I&amp;rsquo;ll be using the Azure Az PowerShell module to handle deploying the resources declared in the .bicep file I create. You can find instructions on installing the module at Microsoft Learn.</description></item><item><title>Use PowerShell to retrieve Azure location information</title><link>https://stuartmccoll.github.io/posts/2023-03-24-use-powershell-to-retrieve-azure-location-information/</link><pubDate>Fri, 24 Mar 2023 18:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-24-use-powershell-to-retrieve-azure-location-information/</guid><description>In this post, I&amp;rsquo;ll show you how to retrieve Azure location names using PowerShell; specifically, using the Azure Az PowerShell module.
Install the Azure Az PowerShell module We&amp;rsquo;re going to follow this guide on Microsoft Learn to install the Azure Az PowerShell module.
I&amp;rsquo;m going to assume that you have the latest version of PowerShell installed. If you don&amp;rsquo;t, you can follow this guide on Microsoft Learn.
Run the following command in a PowerShell session:</description></item><item><title>Use Bicep to create a monthly budget in Azure</title><link>https://stuartmccoll.github.io/posts/2023-03-19-use-bicep-to-create-a-monthly-budget-in-azure/</link><pubDate>Sun, 19 Mar 2023 21:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2023-03-19-use-bicep-to-create-a-monthly-budget-in-azure/</guid><description>I&amp;rsquo;ve recently started experimenting with Bicep for deploying Azure resources declaratively.
In this post, I&amp;rsquo;ll show you how to create a Bicep file which declares a simple Azure Budget with a monthly alert.
Creating the .bicep file Create a new file, called main.bicep.
The first thing we&amp;rsquo;ll declare in this file is the target scope of any resources that we create. In this case, the Budget we&amp;rsquo;re creating will be created at a Subscription level.</description></item><item><title>Maintain an Azure Container Registry using a PowerShell Azure Function</title><link>https://stuartmccoll.github.io/posts/2022-09-10-maintain-acr-using-azure-function/</link><pubDate>Sat, 10 Sep 2022 23:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-09-10-maintain-acr-using-azure-function/</guid><description>This year I created a small C# CLI application that scrapes this website and stores the results in Azure Blob Storage. It&amp;rsquo;s essentially a not-very-good version of the the Internet Archive&amp;rsquo;s Wayback Machine, but specific only to this website.
The process happens in two parts. If I merge any pull requests on the website-archiver into main, then a GitHub Actions workflow pushes the latest Docker image to an Azure Container Registry.</description></item><item><title>Use PowerShell to generate a GUID</title><link>https://stuartmccoll.github.io/posts/2022-06-02-use-powershell-to-generate-a-guid/</link><pubDate>Thu, 02 Jun 2022 11:05:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-06-02-use-powershell-to-generate-a-guid/</guid><description>Another quick automation using PowerShell, this time to solve the problem of quickly adding a new GUID to the clipboard.
The New-Guid cmdlet will quickly create a random globally unique identifier, with the below output.
Guid ---- 8c312165-113b-4c30-91e9-e4e6edebcf0b This is great, but I&amp;rsquo;ve got a couple of extra needs; I don&amp;rsquo;t need the - characters, and I want the GUID to be added straight to my clipboard.
Ignoring the header is simple:</description></item><item><title>Use PowerShell to create a .zip file</title><link>https://stuartmccoll.github.io/posts/2022-05-28-use-powershell-to-create-a-zip-file/</link><pubDate>Sat, 28 May 2022 11:30:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2022-05-28-use-powershell-to-create-a-zip-file/</guid><description>A simple automation need that I stumbled across recently was the ability to quickly create a .zip file from a static set of files and directories. Rather than run a long command in PowerShell each time, I bundled everything up into a quick function that I can run using New-StaticZipFile.
The Compress-Archive cmdlet lets us create a compressed, or zipped, archive file. There are limitations (e.g. maximum file size is 2GB) to this cmdlet, as well as more advanced options, such as the level of compression needed, but we&amp;rsquo;ll be keeping it really simple here.</description></item><item><title>Set WSL as the default integrated terminal in Visual Studio Code</title><link>https://stuartmccoll.github.io/posts/2021-06-08-set-wsl-as-default-vscode-terminal/</link><pubDate>Tue, 08 Jun 2021 10:00:13 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2021-06-08-set-wsl-as-default-vscode-terminal/</guid><description>If you&amp;rsquo;re using Windows Subsystem for Linux (WSL) in tandem with Visual Studio Code, you might be wondering how to change your default integrated terminal from PowerShell to WSL.
Previously, you could set this in a single line in your settings.json file using terminal.integrated.shell.windows, but this has since been deprecated in a later version of Visual Studio Code.
Add the following snippet of JSON to your settings.json file in Visual Studio Code (you can access this file by clicking the gear icon in the bottom left hand corner of the screen, selecting the &amp;lsquo;Settings&amp;rsquo; menu option, and then clicking on the &amp;lsquo;Open settings (JSON)&amp;rsquo; icon in the top right hand corner of the subsequent screen - alternatively you can open the Command Palette with CTRL + Shift + P and then type in &amp;lsquo;Open settings (JSON)'):</description></item><item><title>Automate the shutdown of a Windows 10 PC</title><link>https://stuartmccoll.github.io/posts/2020-10-14-automate-windows-10-shutdown/</link><pubDate>Wed, 14 Oct 2020 10:00:00 +0100</pubDate><guid>https://stuartmccoll.github.io/posts/2020-10-14-automate-windows-10-shutdown/</guid><description>Using the shutdown command Setting a single, non-repeatable shutdown timer can be done using the shutdown command, which can be run in the Command Prompt or PowerShell. Let&amp;rsquo;s use PowerShell as an example.
Search for &amp;lsquo;PowerShell&amp;rsquo; in the start menu and open the app that is returned. Run the command shutdown -s -t TimeInSeconds where TimeInSeconds is replaced with the number of seconds after which you want the Windows 10 PC to shutdown.</description></item></channel></rss>