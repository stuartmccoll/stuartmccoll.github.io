<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on </title>
    <link>/tags/api/</link>
    <description>Recent content in api on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Jun 2020 21:30:00 +0100</lastBuildDate>
    
	<atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microsoft SharePoint API Access with Postman</title>
      <link>/posts/2020-06-16-sharepoint-api-authentication-with-postman/</link>
      <pubDate>Tue, 16 Jun 2020 21:30:00 +0100</pubDate>
      
      <guid>/posts/2020-06-16-sharepoint-api-authentication-with-postman/</guid>
      <description>Microsoft Graph API has largely superceded v1 of the SharePoint REST API for API-driven interaction with SharePoint online, but there are still a few things that you can&amp;rsquo;t do with it. For example, at the time of writing, it&amp;rsquo;s not possible to use Microsoft Graph API to add attachments to a list item, or retrieve attachments from an existing list item. The legacy SharePoint REST API does allow for this functionality.</description>
    </item>
    
    <item>
      <title>Designing Resilient APIs with Idempotency</title>
      <link>/posts/designing-resilient-apis-with-idempotency/</link>
      <pubDate>Sun, 02 Sep 2018 18:50:00 +0000</pubDate>
      
      <guid>/posts/designing-resilient-apis-with-idempotency/</guid>
      <description>How can we design APIs to be resilient when our networks necessarily aren&amp;rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&amp;rsquo;t alter the state of the system in a way that we weren&amp;rsquo;t expecting? This is where idempotence comes into play.</description>
    </item>
    
  </channel>
</rss>