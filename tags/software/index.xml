<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Stuart McColl</title>
    <link>https://stuartmccoll.github.io/tags/software/</link>
    <description>Recent content in software on Stuart McColl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Feb 2020 20:45:35 +0000</lastBuildDate>
    
	<atom:link href="https://stuartmccoll.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microservice Design Patterns: Aggregator</title>
      <link>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</link>
      <pubDate>Mon, 17 Jun 2019 10:00:00 +0000</pubDate>
      
      <guid>https://stuartmccoll.github.io/posts/microservice-design-patterns-aggregator/</guid>
      <description>The aggregator design pattern is a simple way of providing a single, unified service capable of surfacing data from multiple microservices, and a commonly used pattern when implementing a microservice-based architecture.
Let&amp;rsquo;s imagine that we&amp;rsquo;ve been tasked with developing an internal API for our organisation - a general practice clinic. The API needs to consume data from three existing microservices, each of which is used by other services within the practice&amp;rsquo;s architecture - some services call these individually, some call all three.</description>
    </item>
    
    <item>
      <title>Designing Resilient APIs with Idempotency</title>
      <link>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</link>
      <pubDate>Sun, 02 Sep 2018 18:50:00 +0000</pubDate>
      
      <guid>https://stuartmccoll.github.io/posts/designing-resilient-apis-with-idempotency/</guid>
      <description>How can we design APIs to be resilient when our networks necessarily aren&amp;rsquo;t? An API should be robust enough to handle failure scenarios including connectivity drops, timeouts between resultant calls, and more. If a client makes a request to our API and loses connection during the request, how can we ensure that a successive identical request doesn&amp;rsquo;t alter the state of the system in a way that we weren&amp;rsquo;t expecting? This is where idempotence comes into play.</description>
    </item>
    
  </channel>
</rss>